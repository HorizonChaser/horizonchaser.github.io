<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Strong-Reversers</title>
    <link href="/2021/01/27/Strong-Reversers/"/>
    <url>/2021/01/27/Strong-Reversers/</url>
    
    <content type="html"><![CDATA[<h2 id="0x00-DDCTF-Android-Easy"><a href="#0x00-DDCTF-Android-Easy" class="headerlink" title="0x00 DDCTF-Android Easy"></a>0x00 DDCTF-Android Easy</h2><p><del>接触到的第二道安卓逆向题</del></p><p>下载, 发现是个 zip , 但是有 apk 的目录结构, 用 jadx-gui 打开可以看到如下的结构</p><p><img src="https://i.loli.net/2021/01/27/Jd8H6ITzRl5NYsO.png" alt="image-20210127124159278"></p><p>很明显, 重点在 FlagActivity 类里面, <code>i()</code>中将<code>p</code> <code>q</code> 两个byte数组进行一系列操作后得到解密后的<code>byte[] bArr2</code>, 作为<code>String()</code>的参数返回.  之后在<code>onClickTest()</code>中通过将输入的字符串同<code>i()</code>的返回值进行比较, 判定 flag 是否正确.</p><p>那就很显然, <code>i()</code>的返回值就是正确的 flag. 把<code>i()</code>运行一次, 得到返回值<code>DDCTF-3ad60811d87c4a2dba0ef651b2d93476@didichuxing.com</code>, 用<code>flag{ }</code>包裹提交.</p><p><code>flag{DDCTF-3ad60811d87c4a2dba0ef651b2d93476@didichuxing.com}</code></p><h2 id="0x01-WELCOME-TO-JNI"><a href="#0x01-WELCOME-TO-JNI" class="headerlink" title="0x01 WELCOME TO JNI"></a>0x01 WELCOME TO JNI</h2><blockquote><p>“JNI是什么？”</p></blockquote><blockquote><p><strong>JNI</strong> （<strong>Java Native Interface，Java本地接口</strong>）是一种<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6&amp;action=edit&amp;redlink=1">编程框架</a>，使得<a href="https://zh.wikipedia.org/wiki/Java%E8%99%9A%E6%8B%9F%E6%9C%BA">Java虚拟机</a>中的<a href="https://zh.wikipedia.org/wiki/Java">Java</a>程序可以调用本地应用/或库，也可以被其他程序调用。 本地程序一般是用其它语言（<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C</a>、<a href="https://zh.wikipedia.org/wiki/C%2B%2B">C++</a>或<a href="https://zh.wikipedia.org/wiki/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80">汇编语言</a>等）编写的，并且被编译为基于本机硬件和操作系统的程序。</p><p>– Wikipedia</p></blockquote><p>简单的来说, JNI 可以让 Java 调用其他语言的库.</p><p>用 jadx-gui 打开 apk 文件, 定位到 Main Activity –在<code>com.reverier.xdsec_re_20200126</code>下面</p><p><img src="https://i.loli.net/2021/01/27/hwg4BSpNfiFO8DH.png" alt="image-20210127131115411"></p><p>在<code>MainActivity</code>类中, 可以看到声明了一个 native 方法 - <code>loginUtils()</code>, 从名字推测是 <del>检查 flag</del> 登陆验证, 加载了一个本地库<code>native-lib</code>, 它对应的文件在<code>/lib</code>下面, 对应不同的架构.</p><p>在 33 行可以看到, <code>loginUtil()</code>接受了输入的字符串作为参数, 然后返回一个布尔值作为结果, 控制输出<code>Right</code>和<code>Wrong</code> - 这就是重点了.</p><p>从 apk 中提取出 x86 架构对应的<code>native-lib.so</code>, IDA 打开, 找到对应的方法<code>Java_com_reverier_xdsec_1re_120200126_MainActivity_loginUtils()</code>, 反编译如下.</p><p><img src="https://i.loli.net/2021/01/27/7UM1xOPLB3RTIFK.png" alt="image-20210127132734025"></p><p>第 8 行开始, <code>v6</code>保存了作为参数的字符串的长度, <code>v5</code>则保存了另一个字符串的长度, <code>v4</code>保存了参数字符串. 第 11 行比较两个字符串的长度, 若相等则再通过<code>strncmp()</code>比较. </p><p>综上, <code>off_1FD4 + 5972</code>应该就指向了flag. <code>0x1FD4 + 5972d == 0x880</code>, 跳转过去, 发现果然保存着flag.</p><p><img src="https://i.loli.net/2021/01/27/shcxbOGXJ2U6DFV.png" alt="image-20210127133107771"></p><p><code>flag{welcome_to_naive_lib!}</code></p><p>做完了才意识到, 其实当时直接从 IDA 的 Strings window 能直接看到这个明文字符串…</p><h2 id="0×02-Codegate-CTF-2018-RedVelvet"><a href="#0×02-Codegate-CTF-2018-RedVelvet" class="headerlink" title="0×02 Codegate CTF 2018 RedVelvet"></a>0×02 Codegate CTF 2018 RedVelvet</h2><p>IDA 打开, 跳转到<code>main()</code>, 发现了一大串<code>funcX()</code>的调用.  <del>有点壮观(x</del></p><p>观察结构发现, 在 48 行, ``fgets()<code>接受了 28 个字节的输入(包含末尾的</code>\n<code>), 保存到</code>s<code>中. 而</code>funcX()<code>并未改变</code>s<code>的值, 而是进行了一些验证, 比如</code>func7()`: </p><p><img src="https://i.loli.net/2021/01/27/fuRYoAhm31TjLzw.png" alt="image-20210127134648665"></p><p>这 15 个<code>funcX()</code>共同对<code>s</code>进行了一系列的检查, 然后计算<code>s</code>的 SHA256 值, 并和<code>0a435f46288bb5a764d13fca6c901d3750cee73fd7689ce79ef6dc0ff8f380e5</code>比较, 确定 flag 正确与否.</p><p><del>所以直接用 hashcat 穷举破解理论上倒也可行</del></p><p>接下来就是 angr 发挥威力的时候了, 我们不需要将程序执行完, 只需要找到一个输入, 能够满足这十五个<code>funcX()</code>的约束, 使程序运行到<code>SHA256_Init()</code>前即可 - 对应的地址是<code>0x401534</code>.</p><p>同时, 我们还需要避免进入<code>funcX()</code>中的<code>exit(1)</code>的分支, 以<code>func1()</code>为例.</p><p><img src="https://i.loli.net/2021/01/27/Mu2QcKWZ81dfzFR.png" alt="image-20210127135526675"></p><p><code>0x4009ED</code>和<code>0x4009F7</code>就是我们不希望运行到的地方, 因为到这里说明我们的输入没有通过<code>func1()</code>的检验, 执行了<code>exit(1)</code> - 其他的<code>funcX()</code>同理.</p><p>这样, 我们得到了期望执行到的地址与要避免的地址, 写出如下脚本.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrprog <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./RedVelvet'</span><span class="token punctuation">,</span> load_options<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'auto_load_libs'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   state <span class="token operator">=</span> prog<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    simgr <span class="token operator">=</span> prog<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>state<span class="token punctuation">)</span>   simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x00401534</span> <span class="token punctuation">,</span>avoid<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4009ED</span><span class="token punctuation">,</span><span class="token number">0x4009F7</span><span class="token punctuation">,</span><span class="token number">0x400A3C</span><span class="token punctuation">,</span><span class="token number">0x400A46</span><span class="token punctuation">,</span><span class="token number">0x400A9F</span><span class="token punctuation">,</span><span class="token number">0x400B01</span><span class="token punctuation">,</span><span class="token number">0x400B5C</span><span class="token punctuation">,</span><span class="token number">0x400C05</span><span class="token punctuation">,</span><span class="token number">0x400CAB</span><span class="token punctuation">,</span><span class="token number">0x400D51</span><span class="token punctuation">,</span><span class="token number">0x400DD6</span><span class="token punctuation">,</span><span class="token number">0x400E5E</span><span class="token punctuation">,</span><span class="token number">0x400F07</span><span class="token punctuation">,</span><span class="token number">0x400FAD</span><span class="token punctuation">,</span><span class="token number">0x4105F</span><span class="token punctuation">,</span><span class="token number">0x4010E9</span><span class="token punctuation">,</span> <span class="token number">0x40119D</span><span class="token punctuation">]</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过漫长的运行( VMWare Ubuntu + Docker angr/angr 大概 30 分钟? ), 我们得到了如下输出 (<code>fg</code>是因为我之前误以为写错了, 于是挂起去检查脚本了…)</p><p><img src="https://i.loli.net/2021/01/27/id16RHAoK5TBpW3.png" alt="image-20210127140006667"></p><p>放到源程序里检查一下, 看来没毛病. </p><p><img src="https://i.loli.net/2021/01/27/DeuYsaXi3ZW4mMt.png" alt="image-20210127140226953"></p><p><code>flag{What_You_Wanna_Be?:)_la_la}</code></p><h3 id="Something-Else"><a href="#Something-Else" class="headerlink" title="Something Else"></a>Something Else</h3><ol><li>RedVelvet依赖 1.0.0 版本的 libcrypto.so, 但是包含它的老版本的 openssl 已经过时了, 最后用<code>apt-file</code>查到英伟达的<code>nslight-system</code>还带这东西, 于是安装之后手动复制出来…</li><li>理论上通过 15 个<code>funcX()</code>中的约束条件, 可以直接求出来满足的输入值, 就像<code>z3</code>那样</li><li>如果限定输入长度与范围( ASCII 可见字符) 的话, 应当能够跑的更快, 学习中</li><li>关于原题: 暂时没找到….</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Reverse</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MoeCTF 2020 Write Up for RxEncode</title>
    <link href="/2020/10/16/MoeCTF-2020-Write-Up-for-RxEncode/"/>
    <url>/2020/10/16/MoeCTF-2020-Write-Up-for-RxEncode/</url>
    
    <content type="html"><![CDATA[<h3 id="RxEncode-题解"><a href="#RxEncode-题解" class="headerlink" title="RxEncode 题解"></a>RxEncode 题解</h3><p>这道题当时没有做出来 <del>, 然后就变成了面试作业</del></p><p>使用IDA反汇编, 观察main函数, 发现程序将输入的内容作为RxEncode函数的参数, 再将返回值s1同s2进行比较确定flag正确与否.</p><p>双击RxEncode并反汇编, 得伪代码如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>__fastcall <span class="token function">RxEncode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">void</span> <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">void</span> <span class="token operator">*</span>Dst<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-58h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-50h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-48h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+3Ch] [rbp-44h]</span>  _BYTE <span class="token operator">*</span>v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-40h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-38h]</span>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+4Ch] [rbp-34h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+70h] [rbp-10h]</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+78h] [rbp-8h]</span>  v14 <span class="token operator">=</span> a1<span class="token punctuation">;</span>  v15 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v2 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v3 <span class="token operator">=</span> a2 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    v2 <span class="token operator">=</span> v3<span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v2 <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    v12 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v12 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Dst <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v13<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> Dst <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>Dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v13<span class="token punctuation">)</span><span class="token punctuation">;</span>    v11 <span class="token operator">=</span> Dst<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v9 <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v7 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">find_pos</span><span class="token punctuation">(</span>v14<span class="token punctuation">[</span>v10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v9<span class="token punctuation">;</span>        <span class="token operator">++</span>v10<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      v8 <span class="token operator">=</span> v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> v9<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        <span class="token operator">*</span>v11<span class="token operator">++</span> <span class="token operator">=</span> v8 <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> Dst<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No enough memory.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到 ‘=’ 的ASCII码是61, 结合面试时的提示**”将flag进行**(类似)<strong>base64解码”</strong>, 仔细分析RxEncode的逻辑后, 得出这个函数的作用就是将内容进行类似base64的解码.</p><p>由此我们得出, s2保存的应当就是解码后的flag内容, 将变量的值转为16进制后结果如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-60h]</span> __int64 v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-58h]</span> __int64 v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-50h]</span><span class="token comment">/*....................................  其他内容  .....................................*/</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token number">0x4AD158FEB59C879ALL</span><span class="token punctuation">;</span> v15 <span class="token operator">=</span> <span class="token number">0xCBEBFDFA6CED0BFELL</span><span class="token punctuation">;</span> v16 <span class="token operator">=</span> <span class="token number">0x7A47A38E43A334E8LL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合s2 v15 v16在main的栈帧中相邻存放这一点, 我们推测s2实际的长度应当不止为8, 而是24. </p><p>事实上, 我认为v15 v16的__int64类型也是IDA的推测(它并不确定真实类型是什么) - 因为在栈帧中将s2的类型由默认的char []改为char [24]后, 三个变量变成了这样.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token number">0x4AD158FEB59C879ALL</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v15 <span class="token operator">=</span> <span class="token number">0xCBEBFDFA6CED0BFELL</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v16 <span class="token operator">=</span> <span class="token number">0x7A47A38E43A334E8LL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>考虑到x86的小端序, 实际的字节顺序应当是 <code>9A 87 9C B5 FE 58</code>这样. 获得解码的flag后, 尝试进行base64编码. </p><p>考虑到flag中含有标准编码表不包含的<code>{ }</code>, 因此我们可以认为这个表不同于标准的编码表.</p><p>观察发现, RxEncode中调用了一个名为find_pos的函数, 它的作用应当是在编码表中查找字符的位置, 进入该函数, 得到编码表<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234{}789+/=</code>.</p><p>对先前得到的字节按照编码表进行编码, 可以得到flag<code>moectf{Y0Ur+C+1s+v3ry+g0o0OOo0d}</code>.</p><p><del>No my C is very poooooooor /(ㄒoㄒ)/</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>MoeCTF</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MoeCTF 2020 Write Up</title>
    <link href="/2020/10/16/MoeCTF%202020%20WriteUp/"/>
    <url>/2020/10/16/MoeCTF%202020%20WriteUp/</url>
    
    <content type="html"><![CDATA[<h1 id="MoeCTF-2020-Write-Up"><a href="#MoeCTF-2020-Write-Up" class="headerlink" title="MoeCTF 2020 Write Up"></a>MoeCTF 2020 Write Up</h1><p><strong><em>By Horizon Chaser, aka. Horizon</em></strong></p><p>第一次参加CTF, 现学现用, 会做的题实在有限😂, 先把自己会的或者有思路的部分题写下来, 以供参考</p><p><del>其他不会的题就等各位巨佬的Write Up辽</del></p><p><del>龟速</del>更新记录</p><ul><li>10.14 Misc + Reverse.Rxencode</li><li>10.16 Reverse</li><li>10.18 Algorithm + Classical Crypto</li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>Misc, 全程Miscellaneous, 本意是”杂项”. 在CTF中大概是指多个领域 <del>脑洞</del> 的混合. 因此做起来还是很有意思的.</p><h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h3><p>Misc入门题, 附件profession.jpg. 打开, 发现是专业团队, 仔细一看右下角有黑白色块, 觉得可能是在jpg文件末端添加了内容.</p><p>使用binwalk分析, 未发现隐写的文件, 有点疑惑.</p><p>使用16进制编辑器打开, 发现flag就在末尾😂</p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/image-20201012183142831.png" alt="welcome"></p><h3 id="hey-fxck-you"><a href="#hey-fxck-you" class="headerlink" title="hey fxck you!"></a>hey fxck you!</h3><p>附件good_morning_my_neighbors.png, 表达了诚挚的问候(大雾)</p><p>除了最下方被裁剪了, 图片没有发现什么问题, 使用binwalk分析, 发现末尾有一个zip文件, 解压得fk u.txt, 内容如下</p><blockquote><p>++++++++[&gt;&gt;++&gt;++++&gt;++++++&gt;++++++++&gt;++++++++++&gt;++++++++++++&gt;++++++++++++++&gt;++++++++++++++++&gt;++++++++++++++++++&gt;++++++++++++++++++++&gt;++++++++++++++++++++++&gt;++++++++++++++++++++++++&gt;++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;—.++.&lt;+++++.–.&gt;+++++.&lt;+++.&gt;&gt;—–.–.&lt;&lt;-.&gt;-.&lt;&lt;&lt;&lt;&lt;+.&gt;&gt;&gt;&gt;&gt;&gt;.&lt;&lt;.&gt;.&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;+.+++++.————.&lt;+++++.&gt;.&lt;&lt;&lt;++.&lt;.&gt;&gt;&gt;&gt;&gt;&gt;++++.</p></blockquote><p>搜索, 得知这是BrainFuck语言, 解密得到flag <code>moectf{yes!yes!fk_U_2!}</code></p><p><del>这是对此前问候的友好回应(确信)</del></p><h3 id="base64？¿"><a href="#base64？¿" class="headerlink" title="base64？¿"></a>base64？¿</h3><p>题面是一个以等号结尾的字符串  <code>0H9MJjCNPiMgJHMQJNtfyEJgIjtS1Ig=</code>, 结合名称, 确定是base64编码的文本.</p><p>按照标准的字符表无法解密, 查看hint, 得到字符表为<code>vwxrstuopq34567ABCDEFGHIJyz012PQRSTKLMNOZabcdUVWXYefghijklmn89+/</code>, 按照这个字符表解码, 得到flag<code>moectf{itai_base64_qaq}</code></p><h3 id="A3FXCK"><a href="#A3FXCK" class="headerlink" title="A3FXCK"></a>A3FXCK</h3><p><del>所以a3又干啥了这是</del></p><p>题面是一个jpg, binwalk分析, 得到隐藏的A3FXCK.txt, 打开, 发现内容可被拆分为两类: <code>luoqXan</code>与<code>arttnbaX</code>, X为1~6的正整数.</p><p>结合首行的<code>123456[]()+!</code>, 推测1~6的值分别代表<code>[]()+!</code>, 替换后得到一坨奇怪的东西, 尝试按照JavaScript运行后得到flag <code>moectf{J5Fxck_1s_1nt3res7in9!}</code></p><p>新知识: <a href="https://github.com/aemkei/jsfuck">JSFuck</a>是将(小段的)JS代码加密为仅包含<code>[]()+!</code>的文本, 但是会造成严重的体积膨胀. 所以替换后得到的那一坨解密之后也只是一行<code>alert('moectf{J5Fxck_1s_1nt3res7in9!}'</code></p><p><del>由此得知, JS确实是最强大的编程语言</del></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Welcome-To-Re"><a href="#Welcome-To-Re" class="headerlink" title="Welcome To Re!"></a>Welcome To Re!</h3><p>签到题, 也是第一道我做出来的逆向的题😂</p><p>下载附件, 打开, 按照入门指南和Hint提示, 使用IDA64分析SignIn.exe, 在左侧定位main函数, 双击跳转到对应位置, 按下F5反汇编, 得到伪代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> Str1<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-60h]</span>  <span class="token keyword">char</span> Str2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-30h]</span>  <span class="token function">_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>Str2<span class="token punctuation">,</span> <span class="token string">"moectf{W3lc0me-T0_th3-W0rld_Of_R3v3rsE!}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to MoeCTF! --by Reverier\nPlease Input your flag and I will check it:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%41s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Str1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Str1<span class="token punctuation">,</span> Str2<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulations!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Ruaaaaaaaaaaaaa~~~Wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在main函数中, 首先将flag内容复制到str2中, 然后输出提示信息并将输入保存到Str1中. 之后通过strcmp比较输入的Str2与保存的Str1的值是否一致. 由此我们得出, Str2的值就是flag<code>moectf{W3lc0me-T0_th3-W0rld_Of_R3v3rsE!}</code>. <del>虽然说是显然的, 但是该分析还是要分析的</del></p><p>总之, Welcome to the World of Reverse 🍻!</p><h3 id="RxEncode"><a href="#RxEncode" class="headerlink" title="RxEncode"></a>RxEncode</h3><p>这道题当时没有做出来 <del>, 然后就变成了面试作业</del></p><p>使用IDA反汇编, 观察main函数, 发现程序将输入的内容作为RxEncode函数的参数, 再将返回值s1同s2进行比较确定flag正确与否.</p><p>双击RxEncode并反汇编, 得伪代码如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>__fastcall <span class="token function">RxEncode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">void</span> <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">void</span> <span class="token operator">*</span>Dst<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-58h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-50h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-48h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+3Ch] [rbp-44h]</span>  _BYTE <span class="token operator">*</span>v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-40h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-38h]</span>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+4Ch] [rbp-34h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+70h] [rbp-10h]</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+78h] [rbp-8h]</span>  v14 <span class="token operator">=</span> a1<span class="token punctuation">;</span>  v15 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v2 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v3 <span class="token operator">=</span> a2 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    v2 <span class="token operator">=</span> v3<span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v2 <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    v12 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v12 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Dst <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v13<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> Dst <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>Dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v13<span class="token punctuation">)</span><span class="token punctuation">;</span>    v11 <span class="token operator">=</span> Dst<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v9 <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v7 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">find_pos</span><span class="token punctuation">(</span>v14<span class="token punctuation">[</span>v10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v9<span class="token punctuation">;</span>        <span class="token operator">++</span>v10<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      v8 <span class="token operator">=</span> v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> v9<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        <span class="token operator">*</span>v11<span class="token operator">++</span> <span class="token operator">=</span> v8 <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> Dst<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No enough memory.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到 ‘=’ 的ASCII码是61, 结合面试时的提示**”将flag进行**(类似)<strong>base64解码”</strong>, 仔细分析RxEncode的逻辑后, 得出这个函数的作用就是将内容进行类似base64的解码.</p><p>由此我们得出, s2保存的应当就是解码后的flag内容, 将变量的值转为16进制后结果如下.</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">  char s2[8]; // [rsp+10h] [rbp-60h] __int64 v15; // [rsp+18h] [rbp-58h] __int64 v16; // [rsp+20h] [rbp-50h]/*....................................  其他内容  .....................................*/ *(_QWORD *)s2 = 0x4AD158FEB59C879ALL; v15 = 0xCBEBFDFA6CED0BFELL; v16 = 0x7A47A38E43A334E8LL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合s2 v15 v16在main的栈帧中相邻存放这一点, 我们推测s2实际的长度应当不止为8, 而是24. </p><p>事实上, 我认为v15 v16的__int64类型也是IDA的推测(它并不确定真实类型是什么) - 因为在栈帧中将s2的类型由默认的char []改为char [24]后, 三个变量变成了这样.</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">*(_QWORD *)s2 = 0x4AD158FEB59C879ALL;*(_QWORD *)v15 = 0xCBEBFDFA6CED0BFELL;*(_QWORD *)v16 = 0x7A47A38E43A334E8LL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>考虑到x86的小端序, 实际的字节顺序应当是 <code>9A 87 9C B5 FE 58</code>这样. 获得解码的flag后, 尝试进行base64编码. </p><p>考虑到flag中含有标准编码表不包含的<code>{ }</code>, 因此我们可以认为这个表不同于标准的编码表.</p><p>观察发现, RxEncode中调用了一个名为find_pos的函数, 它的作用应当是在编码表中查找字符的位置, 进入该函数, 得到编码表<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234{}789+/=</code>.</p><p>对先前得到的字节按照编码表进行编码, 可以得到flag<code>moectf{Y0Ur+C+1s+v3ry+g0o0OOo0d}</code>.</p><p><del>No my C is very poooooooor /(ㄒoㄒ)/</del></p><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>在分析时我不小心改错了s2的类型, 却又改不回去, 而IDA本身又不支持撤销…<br>当时我通过菜单栏的New Instance新打开了一个IDA实例重新分析, 得到的main函数中解码后的flag的相关内容变成了这样, 栈帧也发生了相应的改变…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Str2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">;</span>v11 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">101</span><span class="token punctuation">;</span>v12 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>v13 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">75</span><span class="token punctuation">;</span>v14 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>v15 <span class="token operator">=</span> <span class="token number">112</span><span class="token punctuation">;</span>v16 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">;</span>v17 <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>v18 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">78</span><span class="token punctuation">;</span>v19 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">47</span><span class="token punctuation">;</span>v20 <span class="token operator">=</span> <span class="token number">79</span><span class="token punctuation">;</span>v21 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>v22 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>v23 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>v24 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">;</span>v25 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">;</span>v26 <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span>v27 <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>v28 <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>v29 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">;</span>v30 <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>v31 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">;</span>v32 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">51</span><span class="token punctuation">;</span>v33 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span>v34 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>v35 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v36 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v37 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v38 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v39 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v40 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v41 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v42 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过除此之外整体的结构并未发生过多改变, 其余内容一样.</p><h3 id="Simple-Re"><a href="#Simple-Re" class="headerlink" title="Simple Re"></a>Simple Re</h3><p>下载解压, 拖入IDA中反汇编, 得到伪代码. 观察发现, main中会将输入的字符串作为参数调用enc()函数.    </p><p>双击跳转进该函数, 反汇编后得到伪代码如下. </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">enc</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>      <span class="token comment">/*  ............  循环用变量定义  ............  */</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x17</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x39u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x4Bu</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x4Au</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>m <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x49u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>n <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x26u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> ii <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ii <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>ii <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>ii<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x15u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> jj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> jj <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>jj <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>jj<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x61u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> kk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> kk <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>kk <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x56u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> ll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ll <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>ll <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>ll<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x1Bu</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> mm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mm <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>mm <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>mm<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x21u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> nn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> nn <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>nn <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x40u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i1 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i1 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x57u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i2 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x2Eu</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i3 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i3 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i3<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x49u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i4 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i4 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i4<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x37u</span><span class="token punctuation">;</span>  byte_40807F <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> aim<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulations!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"no...Don't Give up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到, 它是将输入依次对 0x17 0x39 0x4A …… 0x37 进行异或, 然后将运算结果out与aim进行比较. 双击aim变量名, 跳转到栈帧中, 得到aim的值<code>rpz|kydKw^qTl@Y/m2f/J-@o^k.,qkb</code>.</p><p>由 <code>a^b^b == a</code>, 不难发现将aim依次同 0x37 0x49 …… 0x39 0x17 进行异或即可得到flag<code>moectf{ThAnKs_F0r-y0U2_pAt13nt}</code></p><p><del>是挺需要耐心的…</del></p><h3 id="Protection"><a href="#Protection" class="headerlink" title="Protection"></a>Protection</h3><p>下载文件, 根据提示, 程序应该是加了个壳… 检测一下, 是一个UPX的壳, 根据 <a href="https://linux.die.net/man/1/upx">UPX的文档</a>, 我们可以使用<code>-d</code>选项解压缩.</p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/image-20201017215239958.png" alt="image-20201017215239958"></p><p>去掉UPX壳之后, 又到了IDA大显神通的时间了. 我们得到main函数的伪代码如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-34h]</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-30h]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-8h]</span>  v6 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token string">"please input your flag: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token string">"%28s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">27</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"wrong!"</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"right!"</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难看出, 这里是将输入和 x 进行逐个字符异或后再同 y 比较. 用同样的方法, 我们得到<code>x = aouv#@!V08asdozpnma&amp;*#%!$^&amp;*</code>, <code>y ={0x0c, 0x0, 0x10, 0x15, 0x57, 0x26, 0x5a, 0x23, 0x40, 0x40, 0x3e, 0x42, 0x37, 0x30, 0x9, 0x19, 0x3, 0x1d, 0x50, 0x43, 0x7, 0x57, 0x15, 0x7e, 0x51, 0x6d, 0x43, 0x57, 0, 0, 0, 0}</code>. </p><p>写个Java脚本 <del>暂时还不会py</del> 异或之后得到 flag <code>moectf{upx_1S_simp1e-t0_u3e}</code></p><p><del>UPX是挺好用的</del></p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>算法题, 据说在正式的CTF比赛中不会出现…</p><h3 id="mess"><a href="#mess" class="headerlink" title="mess"></a>mess</h3><p><del>What a mess !</del></p><p>查看Python脚本, 发现是将flag转为ASCII码之后, 再向其中随机插入字母.</p><p>解法也简单, 去掉字母后将相邻的两个(或三个数字, 范围是 20~126 )转换为该ASCII码对应的字符.</p><p>flag: <code>moectf{pyth0n_1s_s0_s1mple}</code></p><h3 id="曲奇饼"><a href="#曲奇饼" class="headerlink" title="曲奇饼"></a>曲奇饼</h3><p>统计非重复子串的最大长度.</p><p>简单的滑动窗口即可解决, 细节参见代码.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//或者用自带的max也行</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getMaxSubStrLeng</span><span class="token punctuation">(</span>string inStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//滑动窗口, 应该很直观</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> currBegin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> currEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> inStr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string currContent <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currBegin <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> currEnd <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currContent<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>inStr<span class="token punctuation">[</span>currEnd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> currContent<span class="token punctuation">.</span>npos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currContent<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>currContent<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inStr<span class="token punctuation">[</span>currEnd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currEnd<span class="token operator">++</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> currEnd <span class="token operator">-</span> currBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//更新最大值</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//cout &lt;&lt; currContent.find(inStr[currBegin]) &lt;&lt; endl;</span>            currContent<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>currContent<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>inStr<span class="token punctuation">[</span>currBegin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currBegin<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//遇到重复则逐渐从左端删除currContent中的字符,</span>            <span class="token comment">//直到不再有字符和inStr[currEnd]重复</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//cout &lt;&lt; currContent &lt;&lt; endl;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string inStr<span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> inStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">getMaxSubStrLeng</span><span class="token punctuation">(</span>inStr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Frank-amp-赤道企鹅-永远的神"><a href="#Frank-amp-赤道企鹅-永远的神" class="headerlink" title="Frank &amp; 赤道企鹅, 永远的神"></a>Frank &amp; 赤道企鹅, 永远的神</h3><p>这两道题解法相似, 都是统计文件内容, 可参见repo中对应的FrankCounter.java 与EquatorCounter.java</p><p>其余略😜</p><h2 id="Classic-Crypto"><a href="#Classic-Crypto" class="headerlink" title="Classic Crypto"></a>Classic Crypto</h2><blockquote><p>“古典密码在现代的CTF比赛中已经很少出现”    – FAQ</p></blockquote><h3 id="大帝的征程-1-amp-2"><a href="#大帝的征程-1-amp-2" class="headerlink" title="大帝的征程 #1 &amp; #2"></a>大帝的征程 #1 &amp; #2</h3><p>凯撒密码是一种经典的移位密码, 由flag格式, 得前六个字符为<code>moectf</code>, 然后在此基础上计算密文相对于已知明文的偏移量即可</p><p><del>已知明文攻击 (大概)</del></p><h3 id="大帝的征程-3"><a href="#大帝的征程-3" class="headerlink" title="大帝的征程 #3"></a>大帝的征程 #3</h3><p>由上述经验, 我们推测偏移量应该为 +47(注意由于ASCII码的范围为0~127, 我们需要对127取余作为结果), 写个java脚本解密, 我们得到了<code>moectf{cnquer_th_X#S$"}</code>…</p><p>看起来大部分是正确的, 只是有一些字符没有正确的解出来. 结合之前的经验, 我们推测<code>cnquer</code> 应该是<code>c0nquer</code>, <code>th</code>应该是<code>th3</code>. 计算可得这时的偏移量是-47, 再计算一次, 我们得到了全部明文: flag <code>moectf{c0nquer_th3_XDSEC}</code></p><p><del>I’m afraid I’m too vegetable to do that 😭</del></p><h3 id="大帝的征程-维吉尼亚-amp-维吉尼亚Ex"><a href="#大帝的征程-维吉尼亚-amp-维吉尼亚Ex" class="headerlink" title="大帝的征程 维吉尼亚 &amp; 维吉尼亚Ex"></a>大帝的征程 维吉尼亚 &amp; 维吉尼亚Ex</h3><h4 id="背景知识-维吉尼亚密码"><a href="#背景知识-维吉尼亚密码" class="headerlink" title="背景知识: 维吉尼亚密码"></a>背景知识: 维吉尼亚密码</h4><p>维吉尼亚密码由凯撒密码扩展而来，引入了密钥的概念。即根据密钥来决定用哪一行的密表(或者你也可以理解成偏移量…)来进行替换，以此来对抗字频统计。</p><p>也就是说, 实际上, 维吉尼亚分解之后还是相当于多个凯撒密码的组合…</p><p>那现在(至少相邻字符的)偏移量不再固定, 我们应该怎么做呢…?</p><h4 id="Friedman测试法确定密钥长度"><a href="#Friedman测试法确定密钥长度" class="headerlink" title="Friedman测试法确定密钥长度"></a>Friedman测试法确定密钥长度</h4><p>我们知道, 不同字母在同一文本的出现概率并不相同(至少对于包括英文在内的大多数语言如此). 那么, 我们可以定义一个叫做”重合指数”的量, 来量化两个串之间的对应程度.</p><p>设x=x1x2…xn是一条n个字母的串，x的重合指数记为CI，定义为x中两个随机元素相同的概率。</p><p>而通过对大量的英文文本进行统计, 我们得到每个字母的出现概率如下. </p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/b91e4e49c93c2db554922f8ecb22f56a_thumb.png" alt="【密码学】维吉尼亚密码加解密原理及其破解算法Java实现"></p><p>由此, 我们可以得到英文文本的重合指数为 <strong>0.065</strong>(我们假定明文的重合指数大致也是这个值).</p><p>结合之前的”维吉尼亚密码相当于多个凯撒密码的组合”这一特点, 我们就可以把长为n的密文先分为m组, 按照列的形式组成一个 m*(n/m)的矩阵, 然后检测每一组密文的重合指数. </p><p>如果m正好就是密钥的长度, 那么每一组的CI值应当大致也是0.065; 如果不是的话, 那么分组后的密文看起来应该很随机. 而对于一个随机串, 重合指数约为 <strong>0.038</strong>.</p><p>综上, 我们就通过Friedman测试法得到了密钥的最可能长度.</p><h4 id="字母频度分析确定密钥"><a href="#字母频度分析确定密钥" class="headerlink" title="字母频度分析确定密钥"></a>字母频度分析确定密钥</h4><p>有了密钥长度m, 我们就可以将密文按照密钥长度分解为k = n/m组, 每一组都是凯撒密码, 然后用类似上图的字母频度分析即可解密.</p><blockquote><p>由上面的分析可知, 要破解维吉尼亚密码, 还是需要收集到大量的密文的. 不过这两道题的密文都很长, 足够破解了.</p></blockquote><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>其实Android我之前也没接触过, 这里就简单的记录一下简单的Android逆向过程吧.</p><p> <del>“你之前到底接触过啥??” “啥也没接触过….”</del></p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/5442499-52cadc4569714633.png" alt="img"></p><p>借一张图(来自<a href="https://www.jianshu.com/p/d29c37dda256">这里</a>)说明apk的打包过程.</p><p>我们看到, java文件在编译后会生成class文件, 然后与其他第三方的class文件与library一起组成dex文件, 然后再经过一些处理, zip压缩, 签名, 对齐后就是我们看到的apk文件了.</p><p>所以, 我们可以直接将apk按照zip解压, 然后获得dex文件. 不过dex是Android的Dalvik虚拟机专用的字节码文件, 我们得把它转成标准的java虚拟机的class文件. </p><p>幸运的是, 已经有大佬实现了相关的工具: <a href="https://github.com/pxb1988/dex2jar">dex2jar</a>. 获得jar/class文件后, 我们可以使用<a href="https://github.com/java-decompiler/jd-gui">jd-gui</a>反编译class文件, 得到源码.</p><h3 id="Baby-Android"><a href="#Baby-Android" class="headerlink" title="Baby Android"></a>Baby Android</h3><p>(稍后再更…)</p>]]></content>
    
    
    
    <tags>
      
      <tag>MoeCTF</tag>
      
      <tag>Reverse</tag>
      
      <tag>Android</tag>
      
      <tag>Misc</tag>
      
      <tag>Algorithm</tag>
      
      <tag>Classical Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Beginning of Everything</title>
    <link href="/2020/10/15/The-Beginning-of-Everything/"/>
    <url>/2020/10/15/The-Beginning-of-Everything/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Beginning-of-Everything"><a href="#The-Beginning-of-Everything" class="headerlink" title="The Beginning of Everything"></a>The Beginning of Everything</h1><p>其实很早之前就想在Github Pages上搭一个个人博客了, CSDN总是让人很难受   </p><p> <del>但是拖延症晚期的我现在才搭完hhh</del>    </p><p>言归正传, 基于Hexo和Travis CI的Pages并不难部署, 只是基于YMAL的主题配置写起来有点麻烦, 向Markdown中插入图片也是一件麻烦事儿….    </p><p>博客在 <a href="https://horizonchaser.gitee.io/">Gitee Pages</a> 上有一份镜像, 不过在我搞定Github的workflow之前, Gitee的更新可能不是很及时😂    </p><p>就这样吧, 欢迎大家来玩儿~</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
