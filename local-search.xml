<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BUUCTF Weekly Reverse</title>
    <link href="/2021/02/01/2021-Weekly-Reverse/"/>
    <url>/2021/02/01/2021-Weekly-Reverse/</url>
    
    <content type="html"><![CDATA[<h2 id="Week-5-01-31-02-06-BUUCTF"><a href="#Week-5-01-31-02-06-BUUCTF" class="headerlink" title="Week 5, 01/31 - 02/06, BUUCTF"></a>Week 5, 01/31 - 02/06, BUUCTF</h2><h3 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h3><p>用 ExeinfoPE 看一下, 是一个 x64 程序.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210201212113576.png" alt="image-20210201212113576"></p><p>IDA, 入口是<code>sub_140012170</code>, 一路跟踪下去到<code>sub_140012190</code>,  <del>然后分析不能</del></p><p>从 Strings window 看一下, 发现一条明显的提示语 <code>wrong flag</code>, 看一下, 是<code>sub_1400118C0</code>引用了它, 跳过去康康.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210201212247636.png" alt="image-20210201212247636"></p><p>第18行的 <code>for</code>循环中, 把 <code>Str2[]</code>中的<code>o</code>全部替换为了<code>0</code>, 然后和输入的<code>Str1</code>进行比较, 判断是否正确.</p><p><code>Str2[]</code>的内容是<code>{hello_world}</code>, 替换后输入程序检查, 确定正确.</p><p><code>flag{hell0_w0rld}</code></p><h3 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h3><p>IDA, 找到 <code>main</code>之后 F5, 大概修改一些名称之后得到如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main_0</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  size_t StrLen<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// eax</span>  size_t destLen2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-188h]</span>  <span class="token keyword">char</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-188h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [esp+DCh] [ebp-ACh]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+E8h] [ebp-A0h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> destLen<span class="token punctuation">;</span> <span class="token comment">// [esp+E8h] [ebp-A0h]</span>  <span class="token keyword">char</span> Destination<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+F4h] [ebp-94h] BYREF</span>  <span class="token keyword">char</span> Str<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+160h] [ebp-28h] BYREF</span>  <span class="token keyword">char</span> v14<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+17Ch] [ebp-Ch] BYREF</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">&gt;=</span> <span class="token number">0x64</span> <span class="token punctuation">)</span>      <span class="token function">j____report_rangecheckfailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Destination<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"please enter the flag:"</span><span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"%20s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>  StrLen <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_4110BE</span><span class="token punctuation">(</span>Str<span class="token punctuation">,</span> StrLen<span class="token punctuation">,</span> v14<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strncpy</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> v4<span class="token punctuation">,</span> <span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  destLen <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> destLen<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    Destination<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> j<span class="token punctuation">;</span>  destLen2 <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> aE3nifih9bCNDh<span class="token punctuation">,</span> destLen2<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"rigth flag!\n"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"wrong flag!\n"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在得到输入之后, <code>sub_4110BE</code>对输入的 <code>Str</code>进行了一些处理, 同时 27 行的 <code>for</code> 循环也对 <code>Destination[]</code> 进行了移位, 之后两者比较判断是否正确.</p><p>观察 <code>sub_4110BE</code>, 发现其中调用了一个 base64 的编码表, 结合行为确定是对输入进行 base64 编码.</p><p>把 <code>Destination[]</code>的内容进行反移位, 得到<code>e2lfbDB2ZV95b3V9</code>, base64 解码后得到 <code>{i_l0ve_you}</code></p><p><code>flag{i_l0ve_you}</code></p><p><del>另外题中的”right”打错了…</del></p><h3 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h3><p>DIE 检查, 发现是一个 x64 ELF 文件. IDA 打开, 定位到 <code>main</code>.</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl __noreturn main(int argc, const char **argv, const char **envp){  int v3; // eax  char v4; // [rsp+Fh] [rbp-1h]  while ( 1 )  {    while ( 1 )    {      printf("Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: ");      v4 = getchar();      if ( v4 != 'd' &amp;&amp; v4 != 'D' )        break;      Decry();    }    if ( v4 == 'q' || v4 == 'Q' )      Exit("Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: ", argv);    puts("Input fault format!");    v3 = getchar();    putchar(v3);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明显, 在 <code>Decry</code> 函数中进行了 flag 的验证….</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned __int64 Decry(){  char currChar; // [rsp+Fh] [rbp-51h]  int v2; // [rsp+10h] [rbp-50h]  int v3; // [rsp+14h] [rbp-4Ch]  int i; // [rsp+18h] [rbp-48h]  int keyLen; // [rsp+1Ch] [rbp-44h]  char src[8]; // [rsp+20h] [rbp-40h] BYREF  __int64 v7; // [rsp+28h] [rbp-38h]  int v8; // [rsp+30h] [rbp-30h]  char *v9; // [rsp+40h] [rbp-20h] BYREF  __int64 v10; // [rsp+48h] [rbp-18h]  int v11; // [rsp+50h] [rbp-10h]  unsigned __int64 v12; // [rsp+58h] [rbp-8h]  v12 = __readfsqword(0x28u);  *(_QWORD *)src = 'SLCDN';  v7 = 0LL;  v8 = 0;  v9 = (char *)'wodah';  v10 = 0LL;  v11 = 0;  text = join(key3, (const char *)&amp;v9);         // text == killshadow  strcpy(key, key1);                            // key == ASDFK  strcat(key, src);                             // key == ASDFKNDCLS  v2 = 0;  v3 = 0;  getchar();  keyLen = strlen(key);  for ( i = 0; i &lt; keyLen; ++i )  {    if ( key[v3 % keyLen] &gt; '@' &amp;&amp; key[v3 % keyLen] &lt;= 'Z' )      key[i] = key[v3 % keyLen] + 32;    ++v3;  }  printf("Please input your flag:");  while ( 1 )  {    currChar = getchar();    if ( currChar == '\n' )      break;    if ( currChar == ' ' )    {      ++v2;    }    else    {      if ( currChar &lt;= 96 || currChar &gt; 122 )   // NOT lower case      {        if ( currChar &gt; '@' &amp;&amp; currChar &lt;= 'Z' )// upper case        {          str2[v2] = (currChar - 39 - key[v3 % keyLen] + 97) % 26 + 97;          ++v3;        }      }      else      {        str2[v2] = (currChar - 39 - key[v3 % keyLen] + 97) % 26 + 97;        ++v3;      }      if ( !(v3 % keyLen) )        putchar(' ');      ++v2;    }  }  if ( !strcmp(text, str2) )    puts("Congratulation!\n");  else    puts("Try again!\n");  return __readfsqword(0x28u) ^ v12;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 37 行的 <code>while</code> 循环后, 通过计算 <code>str2[]</code>的值并判断是否与<code>text</code>相等来确定 flag 正确与否, 写个脚本爆破即可.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">upperTable<span class="token operator">=</span><span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>lowerTable <span class="token operator">=</span> upperTable<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>key<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'ADSFKNDCLS'</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>klens<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>text<span class="token operator">=</span><span class="token string">'killshadow'</span>flag<span class="token operator">=</span><span class="token string">''</span>flag2<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str2<span class="token operator">=</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> upperTable<span class="token punctuation">:</span>        <span class="token keyword">if</span> str2<span class="token operator">==</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i  <span class="token operator">%</span> klens<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">+=</span>c<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str2<span class="token operator">=</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> lowerTable<span class="token punctuation">:</span>        <span class="token keyword">if</span> str2<span class="token operator">==</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i  <span class="token operator">%</span> klens<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag2<span class="token operator">+=</span>c<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag{'</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">'}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag{'</span><span class="token operator">+</span>flag2<span class="token operator">+</span><span class="token string">'}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为并未对大小写进行限定, 所以大小写理论上均可…大概, 总之大写是可以的.</p><p><code>flag{KLDQCUDFZO}</code></p><h2 id="Week-6-02-07-02-14-BUUCTF"><a href="#Week-6-02-07-02-14-BUUCTF" class="headerlink" title="Week 6, 02/07 - 02/14, BUUCTF"></a>Week 6, 02/07 - 02/14, BUUCTF</h2><h3 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h3><p>看题目说明, 在文件中藏了一个 rtf 文件, 不过用 binwalk 扫描没发现什么. 可能是加密了…</p><p>用 IDA 打开, 定位到 <code>main_0</code>, 发现需要两个密码, 长度均为 6 个字符, 其中第一个为纯数字, 与 <code>@DBApp</code> 链接后计算一个哈希值, 与 <code>6E32D0943418C2C33385BC35A1470250DD8923A9</code> 比较.</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl main_0(int argc, const char **argv, const char **envp){  DWORD v3; // eax  DWORD v4; // eax  char Str[260]; // [esp+4Ch] [ebp-310h] BYREF  int v7; // [esp+150h] [ebp-20Ch]  char String1[260]; // [esp+154h] [ebp-208h] BYREF  char Destination[260]; // [esp+258h] [ebp-104h] BYREF  memset(Destination, 0, sizeof(Destination));  memset(String1, 0, sizeof(String1));  v7 = 0;  printf("pls input the first passwd(1): ");  scanf("%s", Destination);  if ( strlen(Destination) != 6 )  {    printf("Must be 6 characters!\n");    ExitProcess(0);  }  v7 = atoi(Destination);  if ( v7 &lt; 100000 )    ExitProcess(0);  strcat(Destination, "@DBApp");  v3 = strlen(Destination);  getSHA1((BYTE *)Destination, v3, String1);  if ( !_strcmpi(String1, "6E32D0943418C2C33385BC35A1470250DD8923A9") )  {    printf("continue...\n\n");                  // Destination == 123321@DBApp    printf("pls input the first passwd(2): ");    memset(Str, 0, sizeof(Str));    scanf("%s", Str);    if ( strlen(Str) != 6 )    {      printf("Must be 6 characters!\n");      ExitProcess(0);    }    strcat(Str, Destination);    memset(String1, 0, sizeof(String1));    v4 = strlen(Str);    getMD5((BYTE *)Str, v4, String1);    if ( !_strcmpi("27019e688a4e62a649fd99cadaafdb4e", String1) )    {      if ( !(unsigned __int8)sub_40100F(Str) )      {        printf("Error!!\n");        ExitProcess(0);      }      printf("bye ~~\n");    }  }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入 <code>sub_401230</code>, 定位到 <code>CryptCreateHash(phProv, 0x8004u, 0, 0, &amp;phHash)</code>, 搜一下这个函数的<a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id">文档</a>, 发现第二个参数控制了计算的哈希种类, <code>0x8004</code>是 SHA1, <code>0x8003</code>是 MD5. 由此我们可以对在 [100000, 1000000) 的前半部分进行爆破, 写个脚本.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibprefix <span class="token operator">=</span> <span class="token string">""</span>postfix <span class="token operator">=</span> <span class="token string">"@DBApp"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    prefix <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    shaObj <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> postfix<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(shaObj.hexdigest())</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>shaObj<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"6E32D0943418C2C33385BC35A1470250DD8923A9"</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> postfix<span class="token punctuation">)</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样, 我们得到了第一个密码 <code>1233321</code>, 这时 <code>Destination == "123321@DBApp"</code>, 输入的第二个密码后面会连接 <code>Destination</code>, 然后计算 MD5 值, 和 <code>27019e688a4e62a649fd99cadaafdb4e</code>比较, 判断是否正确.</p><p>需要注意的是, 第二个密码只限制了长度, 没有限制是纯数字…<del>没注意到的话你可能就会和我一样卡住了</del></p><p>到这里, 我们有两种方法.</p><h4 id="充分利用你电脑的计算能力"><a href="#充分利用你电脑的计算能力" class="headerlink" title="充分利用你电脑的计算能力"></a>充分利用你电脑的计算能力</h4><p>我们已知第二个 MD5 原文的后半部分和前半部分的长度, 相当于一个加盐的 MD5 爆破 - <a href="https://github.com/hashcat/hashcat">HashCat </a>很适合干这个事儿, 特别是你的 GPU 比较强的时候.</p><p>用如下的命令行进行一次 <code>md5($pass.$salt)</code>掩码攻击. <del>其实就是暴力穷举, 不过更高级一点, 大概</del></p><p><code>.\hashcat.exe -m 10  "27019e688a4e62a649fd99cadaafdb4e:123321@DBApp" -a 3 ?a?a?a?a?a?a</code></p><p>在我的电脑上, 大概十秒就得到了结果…</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210207140651360.png" alt="image-20210207140651360"></p><p>前半部分是 <code>~!3a@0</code>, 把俩密码输入程序, 得到一个 RTF 文档, 打开就是 flag.</p><p><del>不过, 我认为这应该不是出题人的最初想法吧</del></p><h4 id="充分利用你自己的-计算能力-解题能力"><a href="#充分利用你自己的-计算能力-解题能力" class="headerlink" title="充分利用你自己的 计算能力 解题能力"></a>充分利用你自己的 <del>计算能力</del> 解题能力</h4><p>在 <code>main_0</code> 的 44 行, 我们发现在两个密码验证正确后, 调用了 <code>sub_40400F</code>, 参数是 <code>Str</code>. </p><p><code>sub_40400F</code>会再调用 <code>sub_4014D0</code>, 参数变为 <code>LPCSTR</code>类型.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> __cdecl <span class="token function">sub_4014D0</span><span class="token punctuation">(</span>LPCSTR lpString<span class="token punctuation">)</span><span class="token punctuation">{</span>  LPCVOID lpBuffer<span class="token punctuation">;</span> <span class="token comment">// [esp+50h] [ebp-1Ch]</span>  DWORD NumberOfBytesWritten<span class="token punctuation">;</span> <span class="token comment">// [esp+58h] [ebp-14h] BYREF</span>  DWORD nNumberOfBytesToWrite<span class="token punctuation">;</span> <span class="token comment">// [esp+5Ch] [ebp-10h]</span>  HGLOBAL hResData<span class="token punctuation">;</span> <span class="token comment">// [esp+60h] [ebp-Ch]</span>  HRSRC hResInfo<span class="token punctuation">;</span> <span class="token comment">// [esp+64h] [ebp-8h]</span>  HANDLE hFile<span class="token punctuation">;</span> <span class="token comment">// [esp+68h] [ebp-4h]</span>  hFile <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  hResData <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  nNumberOfBytesToWrite <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  NumberOfBytesWritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  hResInfo <span class="token operator">=</span> <span class="token function">FindResourceA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPCSTR<span class="token punctuation">)</span><span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>hResInfo <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  nNumberOfBytesToWrite <span class="token operator">=</span> <span class="token function">SizeofResource</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hResInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  hResData <span class="token operator">=</span> <span class="token function">LoadResource</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hResInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>hResData <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  lpBuffer <span class="token operator">=</span> <span class="token function">LockResource</span><span class="token punctuation">(</span>hResData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_401005</span><span class="token punctuation">(</span>lpString<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>lpBuffer<span class="token punctuation">,</span> nNumberOfBytesToWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>  hFile <span class="token operator">=</span> <span class="token function">CreateFileA</span><span class="token punctuation">(</span><span class="token string">"dbapp.rtf"</span><span class="token punctuation">,</span> <span class="token number">0x10000000u</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">,</span> <span class="token number">0x80u</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> hFile <span class="token operator">==</span> <span class="token punctuation">(</span>HANDLE<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>hFile<span class="token punctuation">,</span> lpBuffer<span class="token punctuation">,</span> nNumberOfBytesToWrite<span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberOfBytesWritten<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hFile<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是 <code>FindResourceA</code>这个函数, 从<a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-findresourcea">文档</a>来看, 它会尝试寻找名称为 <code>0x65</code>, 类型为 <code>AAA</code> 的资源, 然后通过<code>SizeofResource</code>计算长度, 通过<code>LoadResource</code>加载到<code>lpBuffer</code>中并上锁, 之后调用了<code>sub_401005</code>进行了什么操作, 然后创建<code>dbapp.rtf</code>并写文件, 最后关闭.</p><p>看来<code>sub_401005</code>就是解密函数了.</p><p><code>sub_401005</code>会继续调用<code>sub_401420</code>, 主要是一个异或的循环…</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned int __cdecl sub_401420(LPCSTR key, int fileContentOffset, int a3){  unsigned int result; // eax  unsigned int i; // [esp+4Ch] [ebp-Ch]  unsigned int keyLen; // [esp+54h] [ebp-4h]  keyLen = lstrlenA(key);  for ( i = 0; ; ++i )  {    result = i;    if ( i &gt;= a3 )      break;    *(_BYTE *)(i + fileContentOffset) ^= key[i % keyLen];  }  return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里, 会将现有数据的每一位和密钥进行异或作为解密, 而原文件是一个 RTF 格式的文件, 文件头是 <a href="https://www.filesignatures.net/index.php?page=search&amp;search=7B5C72746631&amp;mode=SIG"><code>7B 5C 72 74 66 31</code></a>, 正好六个字节, 和第二段密码一样长.</p><p>参考<a href="https://blog.csdn.net/qq_43786458/article/details/102488408">这篇题解</a>, 用 ResourceHacker 看一下资源,果然找到了这个. (0x65 == 101)</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210207150448312.png" alt="image-20210207150448312"></p><p>加密后的文件头是 <code>05 7D 41 15 26 01 </code>, 把它和原来的文件头进行异或就得到了第二段密码: <code>~!3a@0</code></p><p><code>flag{N0_M0re_Free_Bugs}</code></p><h2 id="Week-11-03-14-03-20-BUUCTF"><a href="#Week-11-03-14-03-20-BUUCTF" class="headerlink" title="Week 11, 03/14 - 03/20, BUUCTF"></a>Week 11, 03/14 - 03/20, BUUCTF</h2><h3 id="SUCTF2019-SignIn"><a href="#SUCTF2019-SignIn" class="headerlink" title="[SUCTF2019]SignIn"></a>[SUCTF2019]SignIn</h3><p><del>好像摸鱼摸的太狠了… 从开学到现在啥也没干…</del></p><p>IDA 打开, 定位到<code>main</code>, 发现两个大整数.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-4A0h] BYREF</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-490h] BYREF</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-480h] BYREF</span>  <span class="token keyword">char</span> v7<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-470h] BYREF</span>  <span class="token keyword">char</span> input<span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-460h] BYREF</span>  <span class="token keyword">char</span> coded<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+B0h] [rbp-3F0h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+498h] [rbp-8h]</span>  v10 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[sign in]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[input your flag]: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%99s"</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_96A</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> coded<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__gmpz_init_set_str</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> <span class="token string">"ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35"</span><span class="token punctuation">,</span> <span class="token number">16LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__gmpz_init_set_str</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> coded<span class="token punctuation">,</span> <span class="token number">16LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__gmpz_init_set_str</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token string">"103461035900816914121390101299049044413950405173712170434161686539878160984549"</span><span class="token punctuation">,</span> <span class="token number">10LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__gmpz_init_set_str</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> <span class="token string">"65537"</span><span class="token punctuation">,</span> <span class="token number">10LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__gmpz_powm</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> v6<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">__gmpz_cmp</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> v7<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"GG!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"TTTTTTTTTTql!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sub_96A</code>会把输入进行处理, 得到 16 进制字符串. 之后的<code>__gmpz_</code>系列函数是 GNU 的高精度计算库.</p><p>16 ~ 19 行初始化了四个整数, 查看<a href="https://gmplib.org/manual/Integer-Exponentiation">文档</a>发现<code>__gmpz_powm(mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod)</code>实际上等价于<code>rop = (base ^ exp) % mod</code>. 另外, 据说这个函数经常在 RSA 算法中出现…</p><p>RSA! 这些大整数正好就是 RSA 中会用到的! 对应一下, <code>v7</code>是密文, <code>v6</code>是明文, <code>v5</code>是<code>e</code>, <code>v4</code>就是<code>n</code>. 把<code>v4</code>放到 <a href="http://factordb.com/index.php">factor.db</a> 分解一下, 得到了<code>p</code>和<code>q</code>.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210318200048244.png" alt="image-20210318200048244"></p><p>这样, RSA 算法的所有变量我们都拿到了, 直接写个脚本解密就能拿到 flag 了.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> binasciin <span class="token operator">=</span> <span class="token number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span>p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">282164587459512124844245113950593348271</span><span class="token punctuation">)</span>q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">366669102002966856876605669837014229419</span><span class="token punctuation">)</span>e <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">65537</span><span class="token punctuation">)</span>eula <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> eula<span class="token punctuation">)</span>c <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span><span class="token punctuation">)</span>dec <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"十进制:\n%s"</span><span class="token operator">%</span>dec<span class="token punctuation">)</span>dec_hex <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"十六进制:\n%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>dec_hex<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ascii:\n%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>dec_hex<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>gmpy2</code>在我的 Windows 下装不上 (需要<code>gmp</code> <code>mpfr </code> <code>mpc</code>), 因此我在 Ubuntu 虚拟机下面装了.</p><p>拿到结果.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210318200810904.png" alt="image-20210318200810904"></p><p>flag: <code>suctf{Pwn_@_hundred_years}</code></p><h2 id="Week-13-03-28-04-03-BUUCTF"><a href="#Week-13-03-28-04-03-BUUCTF" class="headerlink" title="Week 13, 03/28 - 04/03, BUUCTF"></a>Week 13, 03/28 - 04/03, BUUCTF</h2><h3 id="FlareOn6-Overlong"><a href="#FlareOn6-Overlong" class="headerlink" title="[FlareOn6] Overlong"></a>[FlareOn6] Overlong</h3><p>PE32 程序, 没发现有壳, 直接用 IDA 打开, 只有三个函数, 而且没有 <code>.init_array</code>和<code>.fini_array</code>段, 没有发现有价值的明文字符串 - 也就是说有某种形式的加解密.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210402231014192.png" alt="image-20210402231014192"></p><p>运行一下试试, 注意到下图最后是个冒号…. 推测应该是长度限制了.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210402231001573.png" alt="image-20210402231001573"></p><p>IDA 打开<code>start</code>函数, 很容易定位到解密函数, 它的第二个参数是密文, 第三个参数就是长度.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __stdcall <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span> <span class="token keyword">int</span> a4<span class="token punctuation">)</span><span class="token punctuation">{</span>  CHAR Text<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-84h] BYREF</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+80h] [ebp-4h]</span>  v6 <span class="token operator">=</span> <span class="token function">sub_401160</span><span class="token punctuation">(</span>Text<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_402008<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 解密函数</span>  Text<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Caption<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:004011C0 start           proc near.text:004011C0.text:004011C0 Text            = byte ptr -84h.text:004011C0 var_4           = dword ptr -4.text:004011C0.text:004011C0                 push    ebp.text:004011C1                 mov     ebp, esp.text:004011C3                 sub     esp, 84h.text:004011C9                 push    1Ch.text:004011CB                 push    offset unk_402008.text:004011D0                 lea     eax, [ebp+Text].text:004011D6                 push    eax.text:004011D7                 call    sub_401160.text:004011DC                 add     esp, 0Ch.text:004011DF                 mov     [ebp+var_4], eax.text:004011E2                 mov     ecx, [ebp+var_4].text:004011E5                 mov     [ebp+ecx+Text], 0.text:004011ED                 push    0               ; uType.text:004011EF                 push    offset Caption  ; "Output".text:004011F4                 lea     edx, [ebp+Text].text:004011FA                 push    edx             ; lpText.text:004011FB                 push    0               ; hWnd.text:004011FD                 call    ds:MessageBoxA.text:00401203                 xor     eax, eax.text:00401205                 mov     esp, ebp.text:00401207                 pop     ebp.text:00401208                 retn    10h.text:00401208 start           endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>unk_402008</code>的长度是 <code>0xAF</code>, 尝试修改一下. <strong>但是由于某些原因, 在用 KeyPatch 修改<code>push 1Ch</code>的时候会干扰下一条指令…</strong></p><p>用动态调试, 在<code>0x4011C9</code>下个断点, 在 push 之后直接把栈上数据改成 <code>0xAF</code>, 如下图.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210402232605263.png" alt="image-20210402232605263"></p><p>然后继续执行, 看到了 <del>好康的</del> 答案.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210402232658068.png" alt="image-20210402232658068"></p><p><code>flag{I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com}</code></p><h3 id="GXYCTF2019-simple-CPP"><a href="#GXYCTF2019-simple-CPP" class="headerlink" title="[GXYCTF2019] simple CPP"></a>[GXYCTF2019] simple CPP</h3><p><del>果然题面里有 simple 的不是送分题就是送命题</del></p><p>IDA打开, 按顺序把<code>main</code>分成三部分</p><h4 id="第一部分-异或加密"><a href="#第一部分-异或加密" class="headerlink" title="第一部分 异或加密"></a>第一部分 异或加密</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v40 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>v41 <span class="token operator">=</span> <span class="token number">15</span>i64<span class="token punctuation">;</span><span class="token function">LOBYTE</span><span class="token punctuation">(</span>Block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v4 <span class="token operator">=</span> std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>       std<span class="token operator">::</span>cout<span class="token punctuation">,</span>       <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"I'm a first timer of Logic algebra , how about you?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>ostream<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> std<span class="token operator">::</span>endl<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Let's start our game,Please input your flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>operator<span class="token operator">&gt;&gt;</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cin<span class="token punctuation">,</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">*</span><span class="token punctuation">)</span>Block<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>ostream<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> std<span class="token operator">::</span>endl<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v40 <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">25</span> <span class="token punctuation">)</span> <span class="token comment">//v40 is len of input str</span><span class="token punctuation">{</span>  v35 <span class="token operator">=</span> std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Wrong input ,no GXY{} in input words"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>ostream<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>v35<span class="token punctuation">,</span> std<span class="token operator">::</span>endl<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">goto</span> LABEL_41<span class="token punctuation">;</span><span class="token punctuation">}</span>v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>operator <span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0x20u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>v6 <span class="token operator">=</span> v5<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  v6 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span><span class="token punctuation">}</span>v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v40 <span class="token punctuation">)</span><span class="token punctuation">{</span>  v8 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    v9 <span class="token operator">=</span> Block<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v41 <span class="token operator">&gt;=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>      v9 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>Block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token operator">&amp;</span>qword_7FF73C476048<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span>qword_7FF73C476060 <span class="token operator">&gt;=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span><span class="token comment">// qword -&gt; xor key</span>      v10 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>qword_7FF73C476048<span class="token punctuation">;</span>    v6<span class="token punctuation">[</span>v8<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v9 <span class="token operator">+</span> v8<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v10 <span class="token operator">+</span> v7 <span class="token operator">%</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>v7<span class="token punctuation">;</span>    <span class="token operator">++</span>v8<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;</span> v40 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里会首先对输入进行一次异或加密并保存在<code>v6</code>, key 是 <code>*qword_7FF73C476060</code>, 实际内容未知, 等到动态调试时再确定.</p><h4 id="第二部分-分组"><a href="#第二部分-分组" class="headerlink" title="第二部分 分组"></a>第二部分 分组</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">  v11 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  v14 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v40 <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token punctuation">)</span>    <span class="token keyword">goto</span> LABEL_27<span class="token punctuation">;</span>  v15 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v40 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token keyword">goto</span> LABEL_27<span class="token punctuation">;</span>  v16 <span class="token operator">=</span> v6<span class="token punctuation">;</span> <span class="token comment">//v16 points to input str</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    v17 <span class="token operator">=</span> <span class="token operator">*</span>v16 <span class="token operator">+</span> v11<span class="token punctuation">;</span>    <span class="token operator">++</span>v15<span class="token punctuation">;</span>    <span class="token operator">++</span>v16<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> v15 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>        v14 <span class="token operator">=</span> v17<span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_23<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">16</span><span class="token operator">:</span>        v13 <span class="token operator">=</span> v17<span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_23<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">24</span><span class="token operator">:</span>        v12 <span class="token operator">=</span> v17<span class="token punctuation">;</span>LABEL_23<span class="token operator">:</span>        v17 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">32</span><span class="token operator">:</span>        std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"ERRO,out of range"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v11 <span class="token operator">=</span> v17 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v15 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v40 <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里把输入按照 8 个字符为一组 (正好 64 位)分开, 分别赋给<code>v14</code> <code>v13</code> <code>v12</code> <code>v11</code>.</p><h4 id="第三部分-校验"><a href="#第三部分-校验" class="headerlink" title="第三部分 校验"></a>第三部分 校验</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token keyword">if</span> <span class="token punctuation">(</span> v14 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v18 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64 <span class="token operator">*</span><span class="token punctuation">)</span>operator <span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0x20u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>v18 <span class="token operator">=</span> v14<span class="token punctuation">;</span>    v18<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v13<span class="token punctuation">;</span>    v18<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v12<span class="token punctuation">;</span>    v18<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v11<span class="token punctuation">;</span>    <span class="token keyword">goto</span> LABEL_28<span class="token punctuation">;</span>  <span class="token punctuation">}</span>LABEL_27<span class="token operator">:</span>  v18 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>LABEL_28<span class="token operator">:</span>  v38 <span class="token operator">=</span> v18<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//v12</span>  v19 <span class="token operator">=</span> v18<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//v13</span>  v20 <span class="token operator">=</span> <span class="token operator">*</span>v18<span class="token punctuation">;</span> <span class="token comment">//v14</span>  v21 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64 <span class="token operator">*</span><span class="token punctuation">)</span>operator <span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0x20u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>  v22 <span class="token operator">=</span> v19 <span class="token operator">&amp;</span> v20<span class="token punctuation">;</span> <span class="token comment">//v13&amp;v14</span>  <span class="token operator">*</span>v21 <span class="token operator">=</span> v19 <span class="token operator">&amp;</span> v20<span class="token punctuation">;</span>  v23 <span class="token operator">=</span> v38 <span class="token operator">&amp;</span> <span class="token operator">~</span>v20<span class="token punctuation">;</span>   v21<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v23<span class="token punctuation">;</span>  v24 <span class="token operator">=</span> <span class="token operator">~</span>v19<span class="token punctuation">;</span>  v25 <span class="token operator">=</span> v38 <span class="token operator">&amp;</span> v24<span class="token punctuation">;</span>  v21<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v38 <span class="token operator">&amp;</span> v24<span class="token punctuation">;</span>  v26 <span class="token operator">=</span> v20 <span class="token operator">&amp;</span> v24<span class="token punctuation">;</span>  v21<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v26<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v23 <span class="token operator">!=</span> <span class="token number">0x11204161012</span>i64 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v21<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>    v23 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  v27 <span class="token operator">=</span> v23 <span class="token operator">|</span> v22 <span class="token operator">|</span> v25 <span class="token operator">|</span> v26<span class="token punctuation">;</span>  v28 <span class="token operator">=</span> v18<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v29 <span class="token operator">=</span> v18<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v30 <span class="token operator">=</span> v25 <span class="token operator">&amp;</span> <span class="token operator">*</span>v18 <span class="token operator">|</span> v29 <span class="token operator">&amp;</span> <span class="token punctuation">(</span>v22 <span class="token operator">|</span> v28 <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token operator">*</span>v18 <span class="token operator">|</span> <span class="token operator">~</span><span class="token punctuation">(</span>v28 <span class="token operator">|</span> <span class="token operator">*</span>v18<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v31 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v30 <span class="token operator">==</span> <span class="token number">0x8020717153E3013</span>i64 <span class="token punctuation">)</span>    v31 <span class="token operator">=</span> v27 <span class="token operator">==</span> <span class="token number">0x3E3A4717373E7F1F</span>i64<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v27 <span class="token operator">^</span> v18<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x3E3A4717050F791F</span>i64 <span class="token punctuation">)</span>    v3 <span class="token operator">=</span> v31<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v23 <span class="token operator">|</span> v22 <span class="token operator">|</span> v28 <span class="token operator">&amp;</span> v29<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">*</span>v18 <span class="token operator">&amp;</span> v29 <span class="token operator">|</span> <span class="token number">0xC00020130082C0C</span>i64<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> v3 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v32 <span class="token operator">=</span> std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Congratulations!flag is GXY{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...... other things ......</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们可以得到如下的方程组…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">z <span class="token operator">&amp;</span> <span class="token operator">~</span>x <span class="token operator">==</span> <span class="token number">1176889593874</span>z <span class="token operator">&amp;</span> <span class="token operator">~</span>x <span class="token operator">|</span> y <span class="token operator">&amp;</span> x <span class="token operator">|</span> z <span class="token operator">&amp;</span> <span class="token operator">~</span>y <span class="token operator">|</span> x <span class="token operator">&amp;</span> <span class="token operator">~</span>y <span class="token operator">==</span> <span class="token number">4483974544037412639</span>z <span class="token operator">&amp;</span> <span class="token operator">~</span>y <span class="token operator">&amp;</span>x <span class="token operator">|</span> z <span class="token operator">&amp;</span><span class="token punctuation">(</span>y <span class="token operator">&amp;</span> x <span class="token operator">|</span> y <span class="token operator">&amp;</span> <span class="token operator">~</span>x <span class="token operator">|</span> <span class="token operator">~</span><span class="token punctuation">(</span>y <span class="token operator">|</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">577031497978884115</span><span class="token punctuation">(</span>z <span class="token operator">&amp;</span> <span class="token operator">~</span>x <span class="token operator">|</span> y <span class="token operator">&amp;</span> x <span class="token operator">|</span> z <span class="token operator">&amp;</span> <span class="token operator">~</span>y <span class="token operator">|</span> x <span class="token operator">&amp;</span> <span class="token operator">~</span>y<span class="token punctuation">)</span> <span class="token operator">^</span> w <span class="token operator">==</span> <span class="token number">4483974543195470111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用 z3 解之, 得到</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">w <span class="token operator">=</span> <span class="token number">842073600</span>y <span class="token operator">=</span> <span class="token number">290580315766788</span>x <span class="token operator">=</span> <span class="token number">4483973367147818765</span>z <span class="token operator">=</span> <span class="token number">577031497978884115</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>v6</code>就是<code>x y z w</code>按顺序连接得到的加密后的 flag.</p><h4 id="最后一击"><a href="#最后一击" class="headerlink" title="最后一击"></a>最后一击</h4><p>接下来我们在<code>0x13DF</code>的位置下个断点, 观察一下<code>qword_7FF73C476048</code>指向的内容.</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.data:00007FF73C476048 qword_7FF73C476048 dq 1D5FD108F30h      ; DATA XREF: main+DF↑o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选中<code>0x1D5FD108F30h</code>处的数据, Edit - Strings, 得到<code>i_will_check_is_debug_or_not</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x3e</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x0d</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x3e</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">]</span>key <span class="token operator">=</span> <span class="token string">"i_will_check_is_debug_or_not"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>y</code>手动修正一下, 得到 flag.</p><p><code>flag{We1l_D0ne!P0or_algebra_am_i}</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>BUUCTF</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021 Weekly Misc</title>
    <link href="/2021/01/29/2021-Weekly-Misc/"/>
    <url>/2021/01/29/2021-Weekly-Misc/</url>
    
    <content type="html"><![CDATA[<h2 id="Week-4-01-24-01-30-BUUCTF"><a href="#Week-4-01-24-01-30-BUUCTF" class="headerlink" title="Week 4, 01/24 - 01/30 BUUCTF"></a>Week 4, 01/24 - 01/30 BUUCTF</h2><h3 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h3><p>打开流量包, 发现一些FTP协议的包, 用<code>ftp or ftp-data</code>筛选出来, 结果如下.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130110430119.png" alt="image-20210130110430119"></p><p>55 号包就是服务器返回的包含 flag.rar 的数据包, 右键详情中的 FTP Data 分组, 导出分组字节流. 从文件头的<code>Rar!</code>可以判定, 这是一个 rar 文件.</p><p>打开导出的文件, 发现需要密码, 用 ARCHPR 爆破, 得到四位密码<code>5790</code>, 进而得到 flag.</p><p><code>flag{6fe99a5d03fb01f833ec3caa80358fa3}</code></p><h4 id="另一种提取数据的做法"><a href="#另一种提取数据的做法" class="headerlink" title="另一种提取数据的做法"></a>另一种提取数据的做法</h4><p>从 <a href="https://pcapng.github.io/pcapng/draft-tuexen-opsawg-pcapng.html">pcapng 的规范</a>中, 我们可以发现数据包在捕获文件中是明文存储的, 同时 FTP 的数据也是明文传输的, 所以我们可以直接使用 binwalk 或者 foremost 从 pcapng 中提取文件.</p><p>如果提取出的文件太多的话, 也可以先导出指定的数据包再尝试提取.</p><h3 id="BJDCTF2020-认真你就输了"><a href="#BJDCTF2020-认真你就输了" class="headerlink" title="[BJDCTF2020] 认真你就输了"></a>[BJDCTF2020] 认真你就输了</h3><p>打开, 是一个 xls 文件, 但不能正常显示.</p><p>不过 xls 文件本身也是一个 zip 压缩包, 直接解压, 在 xl/charts 下面发现一个 flag.txt, 打开就是 flag…</p><p><code>flag{M9eVfi2Pcs#}</code></p><h3 id="BJDCTF2020-藏藏藏"><a href="#BJDCTF2020-藏藏藏" class="headerlink" title="[BJDCTF2020]藏藏藏"></a>[BJDCTF2020]藏藏藏</h3><p>打开, 是张 jpg 图片, 用 stegsolve 看一下 File Format…</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130121745206.png" alt="image-20210130121745206"></p><p>看来文件末尾藏了点东西, 熟悉的 <code>50 4B 03 04</code> - 应该是个 zip . 比较奇怪的是, 用 binwalk 没能识别到 zip 头, 只识别到了结尾…</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130122312148.png" alt="image-20210130122312148"></p><p>不过关系不大, 用 UltraEdit (或者别的什么十六进制编辑器)打开, 定位到 zip 文件头, 在<code>0xC7EE</code>的位置, 写个 python 脚本从这里切分就行.</p><p>打开切分得到的 zip 文件, 里面是个 docx 文件, 打开扫码, 得到flag.</p><p><code>flag{you are the best!}</code></p><h3 id="GXYCTF2019-佛系青年"><a href="#GXYCTF2019-佛系青年" class="headerlink" title="[GXYCTF2019] 佛系青年"></a>[GXYCTF2019] 佛系青年</h3><p>打开压缩包, 里面有一张图, 一个 txt, 后者是加密的.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130151231685.png" alt="image-20210130151231685"></p><p>到这里, 会产生两种想法: </p><ul><li>压缩包的密码在图里, 得先把密码找到 (错了)</li><li><strong>压缩包是伪加密的</strong> (这才是对的…)</li></ul><h4 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h4><p>用 stegsolve 尝试无果, 尝试用 zsteg 检测隐写方式, 发现不支持 - 文件头是 <code>FF D8 FF D9</code>…原来是个 jpg  <del>又被出题人套路了,下次一定注意先用file确认一下</del></p><p>用 stegdetect 检测, 系数为 10.0, 报告可能是 jphide, 用 stegbreak 跑字典, 未果.</p><p>至此发现, 此路不通…😭</p><h4 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h4><p>因为存在未加密的文件, 因此一定不是全局伪加密, 可能是单独设置了每一个文件记录的加密位.</p><p>用 010 Editor 打开, 定位到 dirEntry[1], 也就是 fo.txt 对应的记录的位置, 发现 <a href="https://www.jianshu.com/p/8e4209bca4af"><code>deFlags</code></a>是<code>09 00</code>, 存在伪加密, 修改为<code>00 00</code>, 正常解压出了 fo.txt.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130152220026.png" alt="image-20210130152220026"></p><p>在最下面我们发现了这么一串东西.</p><blockquote><p>佛曰：遮等諳勝能礙皤藐哆娑梵迦侄羅哆迦梵者梵楞蘇涅侄室實真缽朋能。奢怛俱道怯都諳怖梵尼怯一罰心缽謹缽薩苦奢夢怯帝梵遠朋陀諳陀穆諳所呐知涅侄以薩怯想夷奢醯數羅怯諸</p></blockquote><p>在<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">这里</a>解密, 得到 flag.</p><p><code>flag{w0_fo_ci_Be1}</code></p><p><del>所以那张图真的没有用啊….</del></p><h3 id="秘密文件"><a href="#秘密文件" class="headerlink" title="秘密文件"></a>秘密文件</h3><p>打开流量包, 发现大量 FTP 协议流量, 跟踪.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130153937974.png" alt="image-20210130153937974"></p><p>发现一个 rar 文件, binwalk 分离, 发现有密码, 爆破, 得口令为<code>1903</code>, 解压得 flag.</p><p><code>flag{d72e5a671aa50fa5f400e5d10eedeaa5}</code></p><p><del>我一开始还以为密码是ctf来着…</del></p><h3 id="BJDCTF2020-你猜我是个啥"><a href="#BJDCTF2020-你猜我是个啥" class="headerlink" title="[BJDCTF2020] 你猜我是个啥"></a>[BJDCTF2020] 你猜我是个啥</h3><p>下载附件, 打开, 提示不是个有效的压缩文件…</p><p>010 Editor, 发现是个 png, 打开发现是一个二维码, 在文件尾有明文 flag.</p><p><code>flag{i_am_fl@g}</code></p><h3 id="BJDCTF-2nd-EasyBaBa"><a href="#BJDCTF-2nd-EasyBaBa" class="headerlink" title="[BJDCTF 2nd] EasyBaBa"></a>[BJDCTF 2nd] EasyBaBa</h3><p>下载, 得到一个 19.9 MB 的 454x427 的 jpg 文件…这大小显然不对啊…</p><p>binwalk 分离, 发现 zip 结尾, 从 <code>0x6E43</code>手动分离 zip, 得到了这个</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130223536091.png" alt="image-20210130223536091"></p><p>查看文件头, 发现是一个 avi 视频, 打开, 在里面发现几个隐藏的一闪而过的二维码, 截图, 用 QR Research 解码, 拼接得flag.</p><p><code>flag{imagin_love_Y1ng}</code></p><h2 id="Week-5-01-31-02-06-BUUCTF"><a href="#Week-5-01-31-02-06-BUUCTF" class="headerlink" title="Week 5, 01/31 - 02/06, BUUCTF"></a>Week 5, 01/31 - 02/06, BUUCTF</h2><h3 id="SWPU2019-神奇的二维码"><a href="#SWPU2019-神奇的二维码" class="headerlink" title="[SWPU2019] 神奇的二维码"></a>[SWPU2019] 神奇的二维码</h3><p>下载附件, 打开, 用 binwalk 分离一下, 得到四个 rar 压缩包.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210131162556648.png" alt="image-20210131162556648"></p><p>先看第一个<code>7104.rar</code>, 里面有一个 <code>encode.txt</code>, 打开是一段 base64: <code>YXNkZmdoamtsMTIzNDU2Nzg5MA==</code>, 解码得<code>asdfghjkl1234567890</code>.</p><p>对于<code>716A.rar</code>, 有一张图片和压缩包, 内层压缩包需要密码 - 也就是我们刚刚拿到的解码后的内容…不过解压之后检查, 并没发现 flag…</p><p><del>看看flag在不在里面?</del></p><p><del>不在😡</del></p><p>在<code>17012.rar</code>中, 我们发现了一个 flag.doc, 里面有一段很长的, 看上去是 base64 的东西, 解码一下, 变成了另一段 base64… <del>有点意思</del></p><p>重复解码多次之后, 我们得到了<code>comEON_YOuAreSOSoS0great</code>, 用这个解压 <code>18394.rar</code>, 有一段音频.</p><p>放到 Audacity 里看一下, 明显是<a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81">摩尔斯电码</a>, 用<a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html">这个</a>解码一下(或者自己来也行), 得到 flag.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210131164320704.png" alt="image-20210131164320704"></p><p>flag: <code>flag{morseisveryveryeasy}</code></p><p>BTW, 直接扫描二维码会告诉你 <code>flag is not here</code>…</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210131164506602.png" alt="image-20210131164506602"></p><h3 id="BJDCTF2020-一叶障目"><a href="#BJDCTF2020-一叶障目" class="headerlink" title="[BJDCTF2020] 一叶障目"></a>[BJDCTF2020] 一叶障目</h3><p>下载打开, 发现 Honeyview 打不开图片, 但是资源管理器能显示预览图 - 显然图的某些东西是被改过了.</p><p>用 010 Editor 打开, 报了 CRC 校验错误, 结合之前看到的条状图案, 怀疑是宽高被改了.</p><p>对于 <a href="https://dev.gameres.com/Program/Visual/Other/PNGFormat.htm">PNG 图片</a>, 宽高这些信息保存在 IHDR 中, 作为第一个数据块紧接着文件头之后. IHDR 长 13 字节, 定义如下.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210201205712447.png" alt="image-20210201205712447"></p><p>所以在已知 CRC 的前提下, 我们可以通过在合理范围内穷举宽高的方式得到正确的大小.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> zlib<span class="token keyword">import</span> struct<span class="token keyword">import</span> timetime_start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#读文件</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">'1.png'</span>  <span class="token comment">#注意，1.png图片要和脚本在同一个文件夹下哦~</span>fileRead <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>fileRead<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#0xCh ~ 0x1Ch</span>crc32key <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>fileRead<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\x'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"b'"</span><span class="token punctuation">,</span><span class="token string">'0x'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#crc32key = 0xCBD6DF8A #补上0x，copy hex value</span><span class="token comment">#data = bytearray(b'\x49\x48\x44\x52\x00\x00\x01\xF4\x00\x00\x01\xF1\x08\x06\x00\x00\x00')  #hex下copy grep hex</span>n <span class="token operator">=</span> <span class="token number">4095</span> <span class="token comment">#理论上0xffffffff,但考虑到屏幕实际，0x0fff就差不多了</span><span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#高和宽一起爆破</span>    width <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&gt;i'</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#q为8字节，i为4字节，h为2字节</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        height <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&gt;i'</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            data<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token comment">#print(data)</span>        crc32result <span class="token operator">=</span> zlib<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> crc32result <span class="token operator">==</span> crc32key<span class="token punctuation">:</span>            <span class="token comment">#print("Correct Width: " + (width) + "\nCorrect Height: " + (height))</span>            <span class="token comment">#写文件</span>            newpic <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>fileRead<span class="token punctuation">)</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                newpic<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">[</span>x<span class="token punctuation">]</span>                newpic<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            fw <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">+</span><span class="token string">'_CRC_Repaired.png'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment">#保存副本</span>            fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>newpic<span class="token punctuation">)</span>            fw<span class="token punctuation">.</span>closetime_end<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"CRC Repaired, saved as "</span> <span class="token operator">+</span> <span class="token builtin">file</span><span class="token operator">+</span><span class="token string">'_CRC_Repaired.png'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Time Used: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>time_end<span class="token operator">-</span>time_start<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看修复后的图片, 得到 flag.</p><p><code>flag{66666}</code></p><h3 id="BJDCTF-2nd-Real-EasyBaBa"><a href="#BJDCTF-2nd-Real-EasyBaBa" class="headerlink" title="[BJDCTF 2nd] Real_EasyBaBa"></a>[BJDCTF 2nd] Real_EasyBaBa</h3><p>查看图片, 发现是 jpg 格式, 并且有一定损坏…</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210204221540876.png" alt="image-20210204221540876"></p><p>binwalk 扫描一下, 发现 zip 文件尾但是没发现文件头. 检查发现文件头被修改为 <code>50 4B FF FF</code> , 修改后分离得到一个包含 <code>hint</code> 文件的 zip 压缩包, 打开后…是一个二维码…</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210204223726793.png" alt="image-20210204223726793"></p><p>缩小之后扫描, 得到一行指令 <code>od -vtx1 ./draw.png | head -56 | tail -28</code>, 执行后发现输出的是这里对应的 16 进制内容</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210204224728710.png" alt="image-20210204224728710"></p><p>仔细看, 能看到对应的字符画….<del>这也太坑了吧</del></p><p><code>flag{572154976}</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Misc</tag>
      
      <tag>BUUCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021 Weekly Reverse</title>
    <link href="/2021/01/27/Strong-Reversers/"/>
    <url>/2021/01/27/Strong-Reversers/</url>
    
    <content type="html"><![CDATA[<h1 id="2021-Week-2-01-26"><a href="#2021-Week-2-01-26" class="headerlink" title="2021 Week 2 - 01/26"></a>2021 Week 2 - 01/26</h1><h2 id="0x00-DDCTF-Android-Easy"><a href="#0x00-DDCTF-Android-Easy" class="headerlink" title="0x00 DDCTF-Android Easy"></a>0x00 DDCTF-Android Easy</h2><p><del>接触到的第二道安卓逆向题</del></p><p>下载, 发现是个 zip , 但是有 apk 的目录结构, 用 jadx-gui 打开可以看到如下的结构</p><p><img src="https://i.loli.net/2021/01/27/Jd8H6ITzRl5NYsO.png" alt="image-20210127124159278"></p><p>很明显, 重点在 FlagActivity 类里面, <code>i()</code>中将<code>p</code> <code>q</code> 两个byte数组进行一系列操作后得到解密后的<code>byte[] bArr2</code>, 作为<code>String()</code>的参数返回.  之后在<code>onClickTest()</code>中通过将输入的字符串同<code>i()</code>的返回值进行比较, 判定 flag 是否正确.</p><p>那就很显然, <code>i()</code>的返回值就是正确的 flag. 把<code>i()</code>运行一次, 得到返回值<code>DDCTF-3ad60811d87c4a2dba0ef651b2d93476@didichuxing.com</code>, 用<code>flag{ }</code>包裹提交.</p><p><code>flag{DDCTF-3ad60811d87c4a2dba0ef651b2d93476@didichuxing.com}</code></p><h2 id="0x01-WELCOME-TO-JNI"><a href="#0x01-WELCOME-TO-JNI" class="headerlink" title="0x01 WELCOME TO JNI"></a>0x01 WELCOME TO JNI</h2><blockquote><p>“JNI是什么？”</p></blockquote><blockquote><p><strong>JNI</strong> （<strong>Java Native Interface，Java本地接口</strong>）是一种<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6&amp;action=edit&amp;redlink=1">编程框架</a>，使得<a href="https://zh.wikipedia.org/wiki/Java%E8%99%9A%E6%8B%9F%E6%9C%BA">Java虚拟机</a>中的<a href="https://zh.wikipedia.org/wiki/Java">Java</a>程序可以调用本地应用/或库，也可以被其他程序调用。 本地程序一般是用其它语言（<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C</a>、<a href="https://zh.wikipedia.org/wiki/C%2B%2B">C++</a>或<a href="https://zh.wikipedia.org/wiki/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80">汇编语言</a>等）编写的，并且被编译为基于本机硬件和操作系统的程序。</p><p>– Wikipedia</p></blockquote><p>简单的来说, JNI 可以让 Java 调用其他语言的库.</p><p>用 jadx-gui 打开 apk 文件, 定位到 Main Activity –在<code>com.reverier.xdsec_re_20200126</code>下面</p><p><img src="https://i.loli.net/2021/01/27/hwg4BSpNfiFO8DH.png" alt="image-20210127131115411"></p><p>在<code>MainActivity</code>类中, 可以看到声明了一个 native 方法 - <code>loginUtils()</code>, 从名字推测是 <del>检查 flag</del> 登陆验证, 加载了一个本地库<code>native-lib</code>, 它对应的文件在<code>/lib</code>下面, 对应不同的架构.</p><p>在 33 行可以看到, <code>loginUtil()</code>接受了输入的字符串作为参数, 然后返回一个布尔值作为结果, 控制输出<code>Right</code>和<code>Wrong</code> - 这就是重点了.</p><p>从 apk 中提取出 x86 架构对应的<code>native-lib.so</code>, IDA 打开, 找到对应的方法<code>Java_com_reverier_xdsec_1re_120200126_MainActivity_loginUtils()</code>, 反编译如下.</p><p><img src="https://i.loli.net/2021/01/27/7UM1xOPLB3RTIFK.png" alt="image-20210127132734025"></p><p>第 8 行开始, <code>v6</code>保存了作为参数的字符串的长度, <code>v5</code>则保存了另一个字符串的长度, <code>v4</code>保存了参数字符串. 第 11 行比较两个字符串的长度, 若相等则再通过<code>strncmp()</code>比较. </p><p>综上, <code>off_1FD4 + 5972</code>应该就指向了flag. <code>0x1FD4 + 5972d == 0x880</code>, 跳转过去, 发现果然保存着flag.</p><p><img src="https://i.loli.net/2021/01/27/shcxbOGXJ2U6DFV.png" alt="image-20210127133107771"></p><p><code>flag{welcome_to_naive_lib!}</code></p><p>做完了才意识到, 其实当时直接从 IDA 的 Strings window 能直接看到这个明文字符串…</p><h2 id="0×02-Codegate-CTF-2018-RedVelvet"><a href="#0×02-Codegate-CTF-2018-RedVelvet" class="headerlink" title="0×02 Codegate CTF 2018 RedVelvet"></a>0×02 Codegate CTF 2018 RedVelvet</h2><p>IDA 打开, 跳转到<code>main()</code>, 发现了一大串<code>funcX()</code>的调用.  <del>有点壮观(x</del></p><p>观察结构发现, 在 48 行, ``fgets()<code>接受了 28 个字节的输入(包含末尾的</code>\n<code>), 保存到</code>s<code>中. 而</code>funcX()<code>并未改变</code>s<code>的值, 而是进行了一些验证, 比如</code>func7()`: </p><p><img src="https://i.loli.net/2021/01/27/fuRYoAhm31TjLzw.png" alt="image-20210127134648665"></p><p>这 15 个<code>funcX()</code>共同对<code>s</code>进行了一系列的检查, 然后计算<code>s</code>的 SHA256 值, 并和<code>0a435f46288bb5a764d13fca6c901d3750cee73fd7689ce79ef6dc0ff8f380e5</code>比较, 确定 flag 正确与否.</p><p><del>所以直接用 hashcat 穷举破解理论上倒也可行</del></p><p>接下来就是 angr 发挥威力的时候了, 我们不需要将程序执行完, 只需要找到一个输入, 能够满足这十五个<code>funcX()</code>的约束, 使程序运行到<code>SHA256_Init()</code>前即可 - 对应的地址是<code>0x401534</code>.</p><p>同时, 我们还需要避免进入<code>funcX()</code>中的<code>exit(1)</code>的分支, 以<code>func1()</code>为例.</p><p><img src="https://i.loli.net/2021/01/27/Mu2QcKWZ81dfzFR.png" alt="image-20210127135526675"></p><p><code>0x4009ED</code>和<code>0x4009F7</code>就是我们不希望运行到的地方, 因为到这里说明我们的输入没有通过<code>func1()</code>的检验, 执行了<code>exit(1)</code> - 其他的<code>funcX()</code>同理.</p><p>这样, 我们得到了期望执行到的地址与要避免的地址, 写出如下脚本.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrprog <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./RedVelvet'</span><span class="token punctuation">,</span> load_options<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'auto_load_libs'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   state <span class="token operator">=</span> prog<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    simgr <span class="token operator">=</span> prog<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>state<span class="token punctuation">)</span>   simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x00401534</span> <span class="token punctuation">,</span>avoid<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4009ED</span><span class="token punctuation">,</span><span class="token number">0x4009F7</span><span class="token punctuation">,</span><span class="token number">0x400A3C</span><span class="token punctuation">,</span><span class="token number">0x400A46</span><span class="token punctuation">,</span><span class="token number">0x400A9F</span><span class="token punctuation">,</span><span class="token number">0x400B01</span><span class="token punctuation">,</span><span class="token number">0x400B5C</span><span class="token punctuation">,</span><span class="token number">0x400C05</span><span class="token punctuation">,</span><span class="token number">0x400CAB</span><span class="token punctuation">,</span><span class="token number">0x400D51</span><span class="token punctuation">,</span><span class="token number">0x400DD6</span><span class="token punctuation">,</span><span class="token number">0x400E5E</span><span class="token punctuation">,</span><span class="token number">0x400F07</span><span class="token punctuation">,</span><span class="token number">0x400FAD</span><span class="token punctuation">,</span><span class="token number">0x4105F</span><span class="token punctuation">,</span><span class="token number">0x4010E9</span><span class="token punctuation">,</span> <span class="token number">0x40119D</span><span class="token punctuation">]</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过漫长的运行( VMWare Ubuntu + Docker angr/angr 大概 30 分钟? ), 我们得到了如下输出 (<code>fg</code>是因为我之前误以为写错了, 于是挂起去检查脚本了…)</p><p><img src="https://i.loli.net/2021/01/27/id16RHAoK5TBpW3.png" alt="image-20210127140006667"></p><p>放到源程序里检查一下, 看来没毛病. </p><p><img src="https://i.loli.net/2021/01/27/DeuYsaXi3ZW4mMt.png" alt="image-20210127140226953"></p><p><code>flag{What_You_Wanna_Be?:)_la_la}</code></p><h3 id="Something-Else"><a href="#Something-Else" class="headerlink" title="Something Else"></a>Something Else</h3><ol><li>RedVelvet依赖 1.0.0 版本的 libcrypto.so, 但是包含它的老版本的 openssl 已经过时了, 最后用<code>apt-file</code>查到英伟达的<code>nslight-system</code>还带这东西, 于是安装之后手动复制出来…</li><li>理论上通过 15 个<code>funcX()</code>中的约束条件, 可以直接求出来满足的输入值, 就像<code>z3</code>那样</li><li>如果限定输入长度与范围( ASCII 可见字符) 的话, 应当能够跑的更快, 学习中</li><li>关于原题: 暂时没找到….</li></ol><h1 id="2021-Week-3-02-10"><a href="#2021-Week-3-02-10" class="headerlink" title="2021 Week 3 - 02/10"></a>2021 Week 3 - 02/10</h1><h2 id="0x00-PyDis"><a href="#0x00-PyDis" class="headerlink" title="0x00 PyDis"></a>0x00 PyDis</h2><p>一道 Python 逆向题, 本来想直接用 uncompyle6 来着, 不过它目前只能支持到 3.8 …</p><p>不过我们总是可以自己手动来解决 √ <del>从零开始, 半天过去了</del></p><p>根据提示, 用 <code>marshal</code> 解析 pyc 文件, 提取出指令部分, 然后用 <code>dis</code> 反编译, 拿到字节码指令. 根据 <a href="https://docs.python.org/3/library/dis.html">Python文档</a>, 我们可以写出同义的代码, 如下. </p><p>(<code>#</code>开头的是我们推测出的每行对应的源代码, 缩进一致)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token number">1</span>           <span class="token number">0</span> BUILD_LIST               <span class="token number">0</span>             <span class="token number">2</span> LOAD_CONST               <span class="token number">0</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token number">4</span> CALL_FINALLY             <span class="token number">1</span> <span class="token punctuation">(</span>to <span class="token number">7</span><span class="token punctuation">)</span>             <span class="token number">6</span> STORE_NAME               <span class="token number">0</span> <span class="token punctuation">(</span>magic<span class="token punctuation">)</span>   <span class="token comment"># magic = [178, ....]</span> <span class="token number">2</span>           <span class="token number">8</span> LOAD_NAME                <span class="token number">1</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>            <span class="token number">10</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token string">'flag &gt;&gt;&gt; '</span><span class="token punctuation">)</span>            <span class="token number">12</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">14</span> STORE_NAME               <span class="token number">2</span> <span class="token punctuation">(</span>inp<span class="token punctuation">)</span>   <span class="token comment"># inp = input("flag &gt;&gt;&gt; ")</span> <span class="token number">4</span>          <span class="token number">16</span> LOAD_NAME                <span class="token number">3</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>            <span class="token number">18</span> LOAD_NAME                <span class="token number">2</span> <span class="token punctuation">(</span>inp<span class="token punctuation">)</span>            <span class="token number">20</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">22</span> STORE_NAME               <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>   <span class="token comment"># inp = list(flag)</span> <span class="token number">5</span>          <span class="token number">24</span> LOAD_NAME                <span class="token number">5</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>            <span class="token number">26</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token number">28</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">30</span> LOAD_NAME                <span class="token number">5</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>            <span class="token number">32</span> LOAD_NAME                <span class="token number">0</span> <span class="token punctuation">(</span>magic<span class="token punctuation">)</span>            <span class="token number">34</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">36</span> COMPARE_OP               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token operator">!=</span><span class="token punctuation">)</span>            <span class="token number">38</span> POP_JUMP_IF_FALSE       <span class="token number">54</span>   <span class="token comment"># if(len(flag) != len(magic)):</span> <span class="token number">6</span>          <span class="token number">40</span> LOAD_NAME                <span class="token number">6</span> <span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">)</span>            <span class="token number">42</span> LOAD_CONST               <span class="token number">2</span> <span class="token punctuation">(</span><span class="token string">'qwq'</span><span class="token punctuation">)</span>            <span class="token number">44</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">46</span> POP_TOP   <span class="token comment">#   print("qwq")</span> <span class="token number">7</span>          <span class="token number">48</span> LOAD_NAME                <span class="token number">7</span> <span class="token punctuation">(</span>exit<span class="token punctuation">)</span>            <span class="token number">50</span> CALL_FUNCTION            <span class="token number">0</span>            <span class="token number">52</span> POP_TOP      <span class="token comment">#   exit()</span> <span class="token number">9</span>     <span class="token operator">&gt;&gt;</span>   <span class="token number">54</span> LOAD_NAME                <span class="token number">8</span> <span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">)</span>            <span class="token number">56</span> LOAD_NAME                <span class="token number">5</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>            <span class="token number">58</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token number">60</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">62</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token number">64</span> BINARY_FLOOR_DIVIDE            <span class="token number">66</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">68</span> GET_ITER       <span class="token operator">&gt;&gt;</span>   <span class="token number">70</span> FOR_ITER                <span class="token number">54</span> <span class="token punctuation">(</span>to <span class="token number">126</span><span class="token punctuation">)</span>            <span class="token number">72</span> STORE_NAME               <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token comment"># for i in range(len(flag) // 2):</span><span class="token number">10</span>          <span class="token number">74</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token number">76</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token number">78</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">80</span> BINARY_MULTIPLY            <span class="token number">82</span> LOAD_CONST               <span class="token number">4</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token number">84</span> BINARY_ADD            <span class="token number">86</span> BINARY_SUBSCR            <span class="token number">88</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token number">90</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token number">92</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">94</span> BINARY_MULTIPLY            <span class="token number">96</span> BINARY_SUBSCR            <span class="token number">98</span> ROT_TWO           <span class="token number">100</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>           <span class="token number">102</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token number">104</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>           <span class="token number">106</span> BINARY_MULTIPLY           <span class="token number">108</span> STORE_SUBSCR                           <span class="token comment"># flag[2*i] = flag[2*i+1] </span>           <span class="token number">110</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>           <span class="token number">112</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token number">114</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>         <span class="token comment"># flag[2*i+1] = flag[2*i]</span>           <span class="token number">116</span> BINARY_MULTIPLY           <span class="token number">118</span> LOAD_CONST               <span class="token number">4</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>           <span class="token number">120</span> BINARY_ADD           <span class="token number">122</span> STORE_SUBSCR           <span class="token number">124</span> JUMP_ABSOLUTE           <span class="token number">70</span>   <span class="token comment">#   flag[2*i], flag[2*i+1] = flag[2*i+1], flag[2*i]</span><span class="token number">12</span>     <span class="token operator">&gt;&gt;</span>  <span class="token number">126</span> BUILD_LIST               <span class="token number">0</span>           <span class="token number">128</span> STORE_NAME              <span class="token number">10</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span>   <span class="token comment"># check = []</span><span class="token number">14</span>         <span class="token number">130</span> LOAD_NAME                <span class="token number">8</span> <span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">)</span>           <span class="token number">132</span> LOAD_NAME                <span class="token number">5</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>           <span class="token number">134</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>           <span class="token number">136</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">138</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">140</span> GET_ITER       <span class="token operator">&gt;&gt;</span>  <span class="token number">142</span> FOR_ITER                <span class="token number">26</span> <span class="token punctuation">(</span>to <span class="token number">170</span><span class="token punctuation">)</span>           <span class="token number">144</span> STORE_NAME               <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token comment"># for i in range(len(flag)):</span><span class="token number">15</span>         <span class="token number">146</span> LOAD_NAME               <span class="token number">10</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span>           <span class="token number">148</span> LOAD_METHOD             <span class="token number">11</span> <span class="token punctuation">(</span>append<span class="token punctuation">)</span>           <span class="token number">150</span> LOAD_NAME               <span class="token number">12</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">)</span>           <span class="token number">152</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>           <span class="token number">154</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>           <span class="token number">156</span> BINARY_SUBSCR           <span class="token number">158</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">160</span> LOAD_CONST               <span class="token number">5</span> <span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>           <span class="token number">162</span> BINARY_XOR           <span class="token number">164</span> CALL_METHOD              <span class="token number">1</span>           <span class="token number">166</span> POP_TOP           <span class="token number">168</span> JUMP_ABSOLUTE          <span class="token number">142</span>   <span class="token comment">#   check.append(ord(flag[i]) ^ 222)</span><span class="token number">17</span>     <span class="token operator">&gt;&gt;</span>  <span class="token number">170</span> LOAD_NAME                <span class="token number">8</span> <span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">)</span>           <span class="token number">172</span> LOAD_NAME                <span class="token number">5</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>           <span class="token number">174</span> LOAD_NAME                <span class="token number">0</span> <span class="token punctuation">(</span>magic<span class="token punctuation">)</span>           <span class="token number">176</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">178</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">180</span> GET_ITER       <span class="token operator">&gt;&gt;</span>  <span class="token number">182</span> FOR_ITER                <span class="token number">34</span> <span class="token punctuation">(</span>to <span class="token number">218</span><span class="token punctuation">)</span>           <span class="token number">184</span> STORE_NAME               <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token comment"># for i in range(len(magic)):</span><span class="token number">18</span>         <span class="token number">186</span> LOAD_NAME               <span class="token number">10</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span>           <span class="token number">188</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>           <span class="token number">190</span> BINARY_SUBSCR           <span class="token number">192</span> LOAD_NAME                <span class="token number">0</span> <span class="token punctuation">(</span>magic<span class="token punctuation">)</span>           <span class="token number">194</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>           <span class="token number">196</span> BINARY_SUBSCR           <span class="token number">198</span> COMPARE_OP               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token operator">!=</span><span class="token punctuation">)</span>           <span class="token number">200</span> POP_JUMP_IF_FALSE      <span class="token number">182</span>   <span class="token comment">#   if(check[i] != magic[i]):</span><span class="token number">19</span>         <span class="token number">202</span> LOAD_NAME                <span class="token number">6</span> <span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">)</span>           <span class="token number">204</span> LOAD_CONST               <span class="token number">2</span> <span class="token punctuation">(</span><span class="token string">'qwq'</span><span class="token punctuation">)</span>           <span class="token number">206</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">208</span> POP_TOP   <span class="token comment">#       print("qwq")</span><span class="token number">20</span>         <span class="token number">210</span> LOAD_NAME                <span class="token number">7</span> <span class="token punctuation">(</span>exit<span class="token punctuation">)</span>           <span class="token number">212</span> CALL_FUNCTION            <span class="token number">0</span>           <span class="token number">214</span> POP_TOP           <span class="token number">216</span> JUMP_ABSOLUTE          <span class="token number">182</span>   <span class="token comment">#       exit()</span><span class="token number">22</span>     <span class="token operator">&gt;&gt;</span>  <span class="token number">218</span> LOAD_NAME                <span class="token number">6</span> <span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">)</span>           <span class="token number">220</span> LOAD_CONST               <span class="token number">6</span> <span class="token punctuation">(</span><span class="token string">'happy new year!'</span><span class="token punctuation">)</span>           <span class="token number">222</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">224</span> POP_TOP           <span class="token number">226</span> LOAD_CONST               <span class="token number">7</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>           <span class="token number">228</span> RETURN_VALUE   <span class="token comment"># print("happy new year!")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后写个jio本解密就行了.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span>       <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">]</span>dec <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">222</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dec <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dec <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>flag{hapi_new_ya</code>, 记得补上 <code>}</code></p><h2 id="0x01-FlareOn4-IgniteMe"><a href="#0x01-FlareOn4-IgniteMe" class="headerlink" title="0x01 FlareOn4 IgniteMe"></a>0x01 FlareOn4 IgniteMe</h2><p><code>die</code>查壳, 确认 32 位 pe 文件, 没壳, IDA 打开, 定位到入口点 <code>start</code>函数.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __noreturn <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  DWORD NumberOfBytesWritten<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-4h] BYREF</span>  NumberOfBytesWritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  stdinHandle <span class="token operator">=</span> <span class="token function">GetStdHandle</span><span class="token punctuation">(</span><span class="token number">4294967286u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// stdin</span>  stdoutHandle <span class="token operator">=</span> <span class="token function">GetStdHandle</span><span class="token punctuation">(</span><span class="token number">0xFFFFFFF5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// stdout</span>  <span class="token function">WriteFile</span><span class="token punctuation">(</span>stdoutHandle<span class="token punctuation">,</span> aG1v3M3T3hFl4g<span class="token punctuation">,</span> <span class="token number">0x13u</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberOfBytesWritten<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">praseInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_401050</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">WriteFile</span><span class="token punctuation">(</span>stdoutHandle<span class="token punctuation">,</span> aG00dJ0b<span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberOfBytesWritten<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">WriteFile</span><span class="token punctuation">(</span>stdoutHandle<span class="token punctuation">,</span> aN0tT00H0tRWe7r<span class="token punctuation">,</span> <span class="token number">0x24u</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberOfBytesWritten<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ExitProcess</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>GetStdHandle</code>函数没见过, 查了一下<a href="https://docs.microsoft.com/zh-cn/windows/console/getstdhandle">文档</a>, 是获得设备句柄, 参数决定是标准 输入/输出/错误 设备.</p><p>在第 8 行输出提示之后调用了一个函数, 推测是解析输入 - 同时确定的输入缓冲区的第一个零字节的位置作为结尾. 然后在第 10 行调用<code>sub_401050</code>检验 flag, </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_401050</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-Ch]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+4h] [ebp-8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [esp+4h] [ebp-8h]</span>  <span class="token keyword">char</span> key<span class="token punctuation">;</span> <span class="token comment">// [esp+Bh] [ebp-1h]</span>  v1 <span class="token operator">=</span> <span class="token function">getFirstZeroBytePos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>prasedInput<span class="token punctuation">)</span><span class="token punctuation">;</span>  key <span class="token operator">=</span> <span class="token function">sub_401000</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">// 0x4</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> v1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    encIn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key <span class="token operator">^</span> prasedInput<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    key <span class="token operator">=</span> prasedInput<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> encIn<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>enc<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是一个简单的循环异或加密, 不过注意是反向的, 初始的<code>key</code>是<code>0x4</code>. 写个jio本解密, 拿到 flag.</p><p><code>flag{R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com}</code></p><p><del>还真是晚上做的…</del></p><h2 id="0x02-BUUCTF-Firmware"><a href="#0x02-BUUCTF-Firmware" class="headerlink" title="0x02 BUUCTF Firmware"></a>0x02 BUUCTF Firmware</h2><p>看题目是一个路由器固件的分析, 用 binwalk 扫描一下, 得到了文件系统的位置, 也就是提取出来的<code>120200.squashfs</code>文件.</p><p><img src="/2021/01/27/Strong-Reversers/image-20210210230050652.png" alt="image-20210210230050652"></p><p>用 <code>file</code>命令确认了一下, 是 squashfs 文件系统, 不过不能直接用<code>mount</code>挂载 - 可能是因为有 lzma 压缩了….</p><p>在网上搜索了一下, 得知 <a href="https://github.com/mirror/firmware-mod-kit">firmware-mod-kit</a> (简称 fmk) 可以从 squashfs 提取文件, 不过在我这里总是提取失败, 或者返回成功但是啥也没提取出来… 也许是因为 fmk 从 2013 年之后没更新过吧…</p><p>最后用 <code>unsquashfs</code> 提取成功 (是 <a href="https://github.com/plougher/squashfs-tools">squashfs-tools</a> 下的一个工具), 在 <code>/tmp</code>下发现一个 <code>backdoor</code> 文件…<del>还好这名字挺明显…</del></p><p>确认是 32 位的 ARM ELF 文件, die 检查发现 upx 壳, 脱壳之后 IDA 打开, 定位到 <code>main</code>.</p><p>在前面获取 MAC 等等之后, 这个 <code>initConnection</code>函数引起了我们的注意, 尤其是这里.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">initConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Failed to connect..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token comment">// do some other things</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>initConnextion</code>返回不为零时, 会等待五秒再重来 - 这里应该就是回连服务器了. 进去看看, 确定地址<code>echo.byethost51.com</code>, 端口<code>36667</code>.</p><p><code>MD5(echo.byethost51.com:36667) == 33a422c45d551ac6e4756f59812a954b</code></p><p>所以, <code>flag{33a422c45d551ac6e4756f59812a954b}</code></p><h2 id="最后-祝大家新年快乐🍻"><a href="#最后-祝大家新年快乐🍻" class="headerlink" title="最后, 祝大家新年快乐🍻"></a>最后, 祝大家新年快乐🍻</h2><h1 id="2021-Week-6-03-05"><a href="#2021-Week-6-03-05" class="headerlink" title="2021 Week 6 - 03/05"></a>2021 Week 6 - 03/05</h1><p><del>前两周因为题不会(好多知识盲区.jpg)+准备返校，只做出来了两道…不过看题解学到了很多，继续努力</del></p><h2 id="0×00-Hacking-with-Google-2020-Beginner"><a href="#0×00-Hacking-with-Google-2020-Beginner" class="headerlink" title="0×00 Hacking with Google 2020 Beginner"></a>0×00 Hacking with Google 2020 Beginner</h2><p>已经理解了整个过程, 不过还没有拿到 flag… angr 也没有跑出来正确的结果, 可能是没能正确识别 SSE 的函数…?</p><p>跑出来是这样…</p><p><img src="/2021/01/27/Strong-Reversers/image-20210305182332107.png" alt="image-20210305182332107"></p><p>等我再研究研究, 或许直接用 z3 会比较适合?</p><h2 id="0×01-V-amp-N-公开赛-CSRe"><a href="#0×01-V-amp-N-公开赛-CSRe" class="headerlink" title="0×01 V&amp;N 公开赛 CSRe"></a>0×01 V&amp;N 公开赛 CSRe</h2><p>看题目是混淆过的 C#, 查了一下, 可以用 <a href="https://github.com/CodingGuru1989/de4dot">detdot的修改版</a> 反混淆, 之后再用 <a href="https://github.com/icsharpcode/ILSpy">ILSpy</a> 反编译. </p><p>一个类一个类地找, 很快就能发现 <code>Class3.Main</code> 方法, 如下.</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">// Class3using System;using System.Security.Cryptography;using System.Text;internal sealed class Class3{public string method_0(string string_0, string string_1){string text = string.Empty;char[] array = string_0.ToCharArray();char[] array2 = string_1.ToCharArray();int num = ((array.Length &lt; array2.Length) ? array.Length : array2.Length);for (int i = 0; i &lt; num; i++){text += array[i] ^ array2[i];}return text;}public static string smethod_0(string string_0){byte[] bytes = Encoding.UTF8.GetBytes(string_0);byte[] array = SHA1.Create().ComputeHash(bytes);StringBuilder stringBuilder = new StringBuilder();byte[] array2 = array;foreach (byte b in array2){stringBuilder.Append(b.ToString("X2"));}return stringBuilder.ToString();}private static void Main(string[] args){if (!Class1.smethod_1()){return;}bool flag = true;Class3 @class = new Class3();string text = Console.ReadLine();if (smethod_0("3" + text + "9") != "B498BFA2498E21325D1178417BEA459EB2CD28F8"){flag = false;}string text2 = Console.ReadLine();string string_ = smethod_0("re" + text2);string text3 = @class.method_0(string_, "63143B6F8007B98C53CA2149822777B3566F9241");for (int i = 0; i &lt; text3.Length; i++){if (text3[i] != '0'){flag = false;}}if (flag){Console.WriteLine("flag{" + text + text2 + "}");}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag 一共有两端, 其中<code>text</code>直接就是<code>B498BFA2498E21325D1178417BEA459EB2CD28F8</code>的 SHA1 原文. </p><p>对于 <code>text2</code>, 观察<code>method_0</code>, 发现它会返回两个 string 类型参数的异或值, 而之后的 for 循环会比较异或后的字符串每个字符是否均为<code>"0"</code> - 很明显, <code>x ^ x == 0</code>, 所以<code>"re" + text2</code>的 SHA1 值就是 <code>63143B6F8007B98C53CA2149822777B3566F9241</code>.</p><p>cmd5 上查询, 得到 <code>text = "1415"</code>, <code>text2 = "turn"</code>, 最后得到 flag.</p><p><code>flag{1415turn}</code></p><h2 id="0×02-Zer0pts2020-easy-strcmp"><a href="#0×02-Zer0pts2020-easy-strcmp" class="headerlink" title="0×02 Zer0pts2020 easy-strcmp"></a>0×02 Zer0pts2020 easy-strcmp</h2><blockquote><p>“有时候你看见的不一定是真实的”</p><p>​                                                – RX</p></blockquote><p>IDA64 打开, 定位到<code>main</code>函数, 发现 flag 就摆在眼前 (误</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"zer0pts{********CENSORED********}"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: %s &lt;FLAG&gt;\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>怎么看第五行的那东西都不能是 flag 吧</del></p><p>我们发现它确实调用了一个<code>strcmp</code>比较<code>argv[0]</code>和那东西 (就叫假 flag 吧) 的值, 但是它又确实不是 flag…. 看看左侧, 发现还有两个奇怪的函数 <code>sub_6EA</code>和<code>sub_795</code>.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// write access to const memory has been detected, the output may be wrong!</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token function">sub_795</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rax</span>  result <span class="token operator">=</span> <span class="token operator">&amp;</span>strcmp<span class="token punctuation">;</span>  strcmp_pointer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_QWORD<span class="token punctuation">,</span> _QWORD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>strcmp<span class="token punctuation">;</span>  off_201028 <span class="token operator">=</span> sub_6EA<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(<code>srecmp_pointer</code>是我重命名的)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_6EA</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v4<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> j <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">-=</span> qword_201060<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">strcmp_pointer</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是我们并没有在<code>main</code>中看到这两个函数的调用, 看一下交叉引用, 发现这两个函数都在<code>.init_array</code>段里 - 会在<code>main</code>前就执行.</p><p><code>sub_795</code>会把在<code>.got.plt</code>段中原先正常的<code>strcmp</code>的地址替换成<code>sub_6EA</code>的地址, 而<code>sub_6EA</code>会把第一个参数按照每 8 个字符一组, 减去<code>qword_201060[j]</code>后再和假 flag 进行真正的<code>strcmp</code>…</p><p>既然这样, 写个 jio 本 - 看上去是这样.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>       <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span>       <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">]</span>enc <span class="token operator">=</span> <span class="token string">"********CENSORED********"</span>dec <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    dec <span class="token operator">=</span> dec <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span>dec <span class="token operator">=</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的结果是<code>l3ts_m4k3^4^DDSOUR_t0d4y</code>, 中间部分看上去不太对… 原因在于, 原程序是将整个<code>QWORD</code>作为一个整体进行加减, 但我们的 exp 是对每一个字节进行的计算, 这样进位不会影响到前一位.</p><p>进位影响的是 9 11 13 14 这几个位置, 手动加一就好.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>       <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span>       <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">]</span>enc <span class="token operator">=</span> <span class="token string">"********CENSORED********"</span>dec <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      c <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    dec <span class="token operator">=</span> dec <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span>dec <span class="token operator">=</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>zer0pts{l3ts_m4k3_4_DETOUR_t0d4y}</code></p><p>不过在平台上提交的时候应该是<code>flag{l3ts_m4k3_4_DETOUR_t0d4y}</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Reverse</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MoeCTF 2020 Write Up for RxEncode</title>
    <link href="/2020/10/16/MoeCTF-2020-Write-Up-for-RxEncode/"/>
    <url>/2020/10/16/MoeCTF-2020-Write-Up-for-RxEncode/</url>
    
    <content type="html"><![CDATA[<h3 id="RxEncode-题解"><a href="#RxEncode-题解" class="headerlink" title="RxEncode 题解"></a>RxEncode 题解</h3><p>这道题当时没有做出来 <del>, 然后就变成了面试作业</del></p><p>使用IDA反汇编, 观察main函数, 发现程序将输入的内容作为RxEncode函数的参数, 再将返回值s1同s2进行比较确定flag正确与否.</p><p>双击RxEncode并反汇编, 得伪代码如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>__fastcall <span class="token function">RxEncode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">void</span> <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">void</span> <span class="token operator">*</span>Dst<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-58h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-50h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-48h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+3Ch] [rbp-44h]</span>  _BYTE <span class="token operator">*</span>v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-40h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-38h]</span>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+4Ch] [rbp-34h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+70h] [rbp-10h]</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+78h] [rbp-8h]</span>  v14 <span class="token operator">=</span> a1<span class="token punctuation">;</span>  v15 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v2 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v3 <span class="token operator">=</span> a2 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    v2 <span class="token operator">=</span> v3<span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v2 <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    v12 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v12 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Dst <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v13<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> Dst <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>Dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v13<span class="token punctuation">)</span><span class="token punctuation">;</span>    v11 <span class="token operator">=</span> Dst<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v9 <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v7 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">find_pos</span><span class="token punctuation">(</span>v14<span class="token punctuation">[</span>v10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v9<span class="token punctuation">;</span>        <span class="token operator">++</span>v10<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      v8 <span class="token operator">=</span> v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> v9<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        <span class="token operator">*</span>v11<span class="token operator">++</span> <span class="token operator">=</span> v8 <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> Dst<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No enough memory.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到 ‘=’ 的ASCII码是61, 结合面试时的提示**”将flag进行**(类似)<strong>base64解码”</strong>, 仔细分析RxEncode的逻辑后, 得出这个函数的作用就是将内容进行类似base64的解码.</p><p>由此我们得出, s2保存的应当就是解码后的flag内容, 将变量的值转为16进制后结果如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-60h]</span> __int64 v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-58h]</span> __int64 v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-50h]</span><span class="token comment">/*....................................  其他内容  .....................................*/</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token number">0x4AD158FEB59C879ALL</span><span class="token punctuation">;</span> v15 <span class="token operator">=</span> <span class="token number">0xCBEBFDFA6CED0BFELL</span><span class="token punctuation">;</span> v16 <span class="token operator">=</span> <span class="token number">0x7A47A38E43A334E8LL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合s2 v15 v16在main的栈帧中相邻存放这一点, 我们推测s2实际的长度应当不止为8, 而是24. </p><p>事实上, 我认为v15 v16的__int64类型也是IDA的推测(它并不确定真实类型是什么) - 因为在栈帧中将s2的类型由默认的char []改为char [24]后, 三个变量变成了这样.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token number">0x4AD158FEB59C879ALL</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v15 <span class="token operator">=</span> <span class="token number">0xCBEBFDFA6CED0BFELL</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v16 <span class="token operator">=</span> <span class="token number">0x7A47A38E43A334E8LL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>考虑到x86的小端序, 实际的字节顺序应当是 <code>9A 87 9C B5 FE 58</code>这样. 获得解码的flag后, 尝试进行base64编码. </p><p>考虑到flag中含有标准编码表不包含的<code>{ }</code>, 因此我们可以认为这个表不同于标准的编码表.</p><p>观察发现, RxEncode中调用了一个名为find_pos的函数, 它的作用应当是在编码表中查找字符的位置, 进入该函数, 得到编码表<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234{}789+/=</code>.</p><p>对先前得到的字节按照编码表进行编码, 可以得到flag<code>moectf{Y0Ur+C+1s+v3ry+g0o0OOo0d}</code>.</p><p><del>No my C is very poooooooor /(ㄒoㄒ)/</del></p>]]></content>
    
    
    
    <tags>
      
      <tag>MoeCTF</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MoeCTF 2020 Write Up</title>
    <link href="/2020/10/16/MoeCTF%202020%20WriteUp/"/>
    <url>/2020/10/16/MoeCTF%202020%20WriteUp/</url>
    
    <content type="html"><![CDATA[<h1 id="MoeCTF-2020-Write-Up"><a href="#MoeCTF-2020-Write-Up" class="headerlink" title="MoeCTF 2020 Write Up"></a>MoeCTF 2020 Write Up</h1><p><strong><em>By Horizon Chaser, aka. Horizon</em></strong></p><p>第一次参加CTF, 现学现用, 会做的题实在有限😂, 先把自己会的或者有思路的部分题写下来, 以供参考</p><p><del>其他不会的题就等各位巨佬的Write Up辽</del></p><p><del>龟速</del>更新记录</p><ul><li>10.14 Misc + Reverse.Rxencode</li><li>10.16 Reverse</li><li>10.18 Algorithm + Classical Crypto</li></ul><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>Misc, 全程Miscellaneous, 本意是”杂项”. 在CTF中大概是指多个领域 <del>脑洞</del> 的混合. 因此做起来还是很有意思的.</p><h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h3><p>Misc入门题, 附件profession.jpg. 打开, 发现是专业团队, 仔细一看右下角有黑白色块, 觉得可能是在jpg文件末端添加了内容.</p><p>使用binwalk分析, 未发现隐写的文件, 有点疑惑.</p><p>使用16进制编辑器打开, 发现flag就在末尾😂</p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/image-20201012183142831.png" alt="welcome"></p><h3 id="hey-fxck-you"><a href="#hey-fxck-you" class="headerlink" title="hey fxck you!"></a>hey fxck you!</h3><p>附件good_morning_my_neighbors.png, 表达了诚挚的问候(大雾)</p><p>除了最下方被裁剪了, 图片没有发现什么问题, 使用binwalk分析, 发现末尾有一个zip文件, 解压得fk u.txt, 内容如下</p><blockquote><p>++++++++[&gt;&gt;++&gt;++++&gt;++++++&gt;++++++++&gt;++++++++++&gt;++++++++++++&gt;++++++++++++++&gt;++++++++++++++++&gt;++++++++++++++++++&gt;++++++++++++++++++++&gt;++++++++++++++++++++++&gt;++++++++++++++++++++++++&gt;++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;—.++.&lt;+++++.–.&gt;+++++.&lt;+++.&gt;&gt;—–.–.&lt;&lt;-.&gt;-.&lt;&lt;&lt;&lt;&lt;+.&gt;&gt;&gt;&gt;&gt;&gt;.&lt;&lt;.&gt;.&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;+.+++++.————.&lt;+++++.&gt;.&lt;&lt;&lt;++.&lt;.&gt;&gt;&gt;&gt;&gt;&gt;++++.</p></blockquote><p>搜索, 得知这是BrainFuck语言, 解密得到flag <code>moectf{yes!yes!fk_U_2!}</code></p><p><del>这是对此前问候的友好回应(确信)</del></p><h3 id="base64？¿"><a href="#base64？¿" class="headerlink" title="base64？¿"></a>base64？¿</h3><p>题面是一个以等号结尾的字符串  <code>0H9MJjCNPiMgJHMQJNtfyEJgIjtS1Ig=</code>, 结合名称, 确定是base64编码的文本.</p><p>按照标准的字符表无法解密, 查看hint, 得到字符表为<code>vwxrstuopq34567ABCDEFGHIJyz012PQRSTKLMNOZabcdUVWXYefghijklmn89+/</code>, 按照这个字符表解码, 得到flag<code>moectf{itai_base64_qaq}</code></p><h3 id="A3FXCK"><a href="#A3FXCK" class="headerlink" title="A3FXCK"></a>A3FXCK</h3><p><del>所以a3又干啥了这是</del></p><p>题面是一个jpg, binwalk分析, 得到隐藏的A3FXCK.txt, 打开, 发现内容可被拆分为两类: <code>luoqXan</code>与<code>arttnbaX</code>, X为1~6的正整数.</p><p>结合首行的<code>123456[]()+!</code>, 推测1~6的值分别代表<code>[]()+!</code>, 替换后得到一坨奇怪的东西, 尝试按照JavaScript运行后得到flag <code>moectf{J5Fxck_1s_1nt3res7in9!}</code></p><p>新知识: <a href="https://github.com/aemkei/jsfuck">JSFuck</a>是将(小段的)JS代码加密为仅包含<code>[]()+!</code>的文本, 但是会造成严重的体积膨胀. 所以替换后得到的那一坨解密之后也只是一行<code>alert('moectf{J5Fxck_1s_1nt3res7in9!}'</code></p><p><del>由此得知, JS确实是最强大的编程语言</del></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Welcome-To-Re"><a href="#Welcome-To-Re" class="headerlink" title="Welcome To Re!"></a>Welcome To Re!</h3><p>签到题, 也是第一道我做出来的逆向的题😂</p><p>下载附件, 打开, 按照入门指南和Hint提示, 使用IDA64分析SignIn.exe, 在左侧定位main函数, 双击跳转到对应位置, 按下F5反汇编, 得到伪代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> Str1<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-60h]</span>  <span class="token keyword">char</span> Str2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-30h]</span>  <span class="token function">_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>Str2<span class="token punctuation">,</span> <span class="token string">"moectf{W3lc0me-T0_th3-W0rld_Of_R3v3rsE!}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to MoeCTF! --by Reverier\nPlease Input your flag and I will check it:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%41s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Str1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Str1<span class="token punctuation">,</span> Str2<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulations!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Ruaaaaaaaaaaaaa~~~Wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在main函数中, 首先将flag内容复制到str2中, 然后输出提示信息并将输入保存到Str1中. 之后通过strcmp比较输入的Str2与保存的Str1的值是否一致. 由此我们得出, Str2的值就是flag<code>moectf{W3lc0me-T0_th3-W0rld_Of_R3v3rsE!}</code>. <del>虽然说是显然的, 但是该分析还是要分析的</del></p><p>总之, Welcome to the World of Reverse 🍻!</p><h3 id="RxEncode"><a href="#RxEncode" class="headerlink" title="RxEncode"></a>RxEncode</h3><p>这道题当时没有做出来 <del>, 然后就变成了面试作业</del></p><p>使用IDA反汇编, 观察main函数, 发现程序将输入的内容作为RxEncode函数的参数, 再将返回值s1同s2进行比较确定flag正确与否.</p><p>双击RxEncode并反汇编, 得伪代码如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>__fastcall <span class="token function">RxEncode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">void</span> <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">void</span> <span class="token operator">*</span>Dst<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-58h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-50h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-48h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+3Ch] [rbp-44h]</span>  _BYTE <span class="token operator">*</span>v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-40h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-38h]</span>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+4Ch] [rbp-34h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+70h] [rbp-10h]</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+78h] [rbp-8h]</span>  v14 <span class="token operator">=</span> a1<span class="token punctuation">;</span>  v15 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v2 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v3 <span class="token operator">=</span> a2 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    v2 <span class="token operator">=</span> v3<span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v2 <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    v12 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v12 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Dst <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v13<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> Dst <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>Dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v13<span class="token punctuation">)</span><span class="token punctuation">;</span>    v11 <span class="token operator">=</span> Dst<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v9 <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v7 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">find_pos</span><span class="token punctuation">(</span>v14<span class="token punctuation">[</span>v10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v9<span class="token punctuation">;</span>        <span class="token operator">++</span>v10<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      v8 <span class="token operator">=</span> v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> v9<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        <span class="token operator">*</span>v11<span class="token operator">++</span> <span class="token operator">=</span> v8 <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> Dst<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No enough memory.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到 ‘=’ 的ASCII码是61, 结合面试时的提示**”将flag进行**(类似)<strong>base64解码”</strong>, 仔细分析RxEncode的逻辑后, 得出这个函数的作用就是将内容进行类似base64的解码.</p><p>由此我们得出, s2保存的应当就是解码后的flag内容, 将变量的值转为16进制后结果如下.</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">  char s2[8]; // [rsp+10h] [rbp-60h] __int64 v15; // [rsp+18h] [rbp-58h] __int64 v16; // [rsp+20h] [rbp-50h]/*....................................  其他内容  .....................................*/ *(_QWORD *)s2 = 0x4AD158FEB59C879ALL; v15 = 0xCBEBFDFA6CED0BFELL; v16 = 0x7A47A38E43A334E8LL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合s2 v15 v16在main的栈帧中相邻存放这一点, 我们推测s2实际的长度应当不止为8, 而是24. </p><p>事实上, 我认为v15 v16的__int64类型也是IDA的推测(它并不确定真实类型是什么) - 因为在栈帧中将s2的类型由默认的char []改为char [24]后, 三个变量变成了这样.</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">*(_QWORD *)s2 = 0x4AD158FEB59C879ALL;*(_QWORD *)v15 = 0xCBEBFDFA6CED0BFELL;*(_QWORD *)v16 = 0x7A47A38E43A334E8LL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>考虑到x86的小端序, 实际的字节顺序应当是 <code>9A 87 9C B5 FE 58</code>这样. 获得解码的flag后, 尝试进行base64编码. </p><p>考虑到flag中含有标准编码表不包含的<code>{ }</code>, 因此我们可以认为这个表不同于标准的编码表.</p><p>观察发现, RxEncode中调用了一个名为find_pos的函数, 它的作用应当是在编码表中查找字符的位置, 进入该函数, 得到编码表<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234{}789+/=</code>.</p><p>对先前得到的字节按照编码表进行编码, 可以得到flag<code>moectf{Y0Ur+C+1s+v3ry+g0o0OOo0d}</code>.</p><p><del>No my C is very poooooooor /(ㄒoㄒ)/</del></p><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>在分析时我不小心改错了s2的类型, 却又改不回去, 而IDA本身又不支持撤销…<br>当时我通过菜单栏的New Instance新打开了一个IDA实例重新分析, 得到的main函数中解码后的flag的相关内容变成了这样, 栈帧也发生了相应的改变…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Str2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">;</span>v11 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">101</span><span class="token punctuation">;</span>v12 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>v13 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">75</span><span class="token punctuation">;</span>v14 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>v15 <span class="token operator">=</span> <span class="token number">112</span><span class="token punctuation">;</span>v16 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">;</span>v17 <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>v18 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">78</span><span class="token punctuation">;</span>v19 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">47</span><span class="token punctuation">;</span>v20 <span class="token operator">=</span> <span class="token number">79</span><span class="token punctuation">;</span>v21 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>v22 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>v23 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>v24 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">;</span>v25 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">;</span>v26 <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span>v27 <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>v28 <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>v29 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">;</span>v30 <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>v31 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">;</span>v32 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">51</span><span class="token punctuation">;</span>v33 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span>v34 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>v35 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v36 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v37 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v38 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v39 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v40 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v41 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v42 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过除此之外整体的结构并未发生过多改变, 其余内容一样.</p><h3 id="Simple-Re"><a href="#Simple-Re" class="headerlink" title="Simple Re"></a>Simple Re</h3><p>下载解压, 拖入IDA中反汇编, 得到伪代码. 观察发现, main中会将输入的字符串作为参数调用enc()函数.    </p><p>双击跳转进该函数, 反汇编后得到伪代码如下. </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">enc</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>      <span class="token comment">/*  ............  循环用变量定义  ............  */</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x17</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x39u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x4Bu</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x4Au</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>m <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x49u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>n <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x26u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> ii <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ii <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>ii <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>ii<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x15u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> jj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> jj <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>jj <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>jj<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x61u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> kk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> kk <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>kk <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x56u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> ll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ll <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>ll <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>ll<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x1Bu</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> mm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mm <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>mm <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>mm<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x21u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> nn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> nn <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>nn <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x40u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i1 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i1 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x57u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i2 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x2Eu</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i3 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i3 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i3<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x49u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i4 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i4 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i4<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x37u</span><span class="token punctuation">;</span>  byte_40807F <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> aim<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulations!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"no...Don't Give up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到, 它是将输入依次对 0x17 0x39 0x4A …… 0x37 进行异或, 然后将运算结果out与aim进行比较. 双击aim变量名, 跳转到栈帧中, 得到aim的值<code>rpz|kydKw^qTl@Y/m2f/J-@o^k.,qkb</code>.</p><p>由 <code>a^b^b == a</code>, 不难发现将aim依次同 0x37 0x49 …… 0x39 0x17 进行异或即可得到flag<code>moectf{ThAnKs_F0r-y0U2_pAt13nt}</code></p><p><del>是挺需要耐心的…</del></p><h3 id="Protection"><a href="#Protection" class="headerlink" title="Protection"></a>Protection</h3><p>下载文件, 根据提示, 程序应该是加了个壳… 检测一下, 是一个UPX的壳, 根据 <a href="https://linux.die.net/man/1/upx">UPX的文档</a>, 我们可以使用<code>-d</code>选项解压缩.</p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/image-20201017215239958.png" alt="image-20201017215239958"></p><p>去掉UPX壳之后, 又到了IDA大显神通的时间了. 我们得到main函数的伪代码如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-34h]</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-30h]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-8h]</span>  v6 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token string">"please input your flag: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token string">"%28s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">27</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"wrong!"</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"right!"</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难看出, 这里是将输入和 x 进行逐个字符异或后再同 y 比较. 用同样的方法, 我们得到<code>x = aouv#@!V08asdozpnma&amp;*#%!$^&amp;*</code>, <code>y ={0x0c, 0x0, 0x10, 0x15, 0x57, 0x26, 0x5a, 0x23, 0x40, 0x40, 0x3e, 0x42, 0x37, 0x30, 0x9, 0x19, 0x3, 0x1d, 0x50, 0x43, 0x7, 0x57, 0x15, 0x7e, 0x51, 0x6d, 0x43, 0x57, 0, 0, 0, 0}</code>. </p><p>写个Java脚本 <del>暂时还不会py</del> 异或之后得到 flag <code>moectf{upx_1S_simp1e-t0_u3e}</code></p><p><del>UPX是挺好用的</del></p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>算法题, 据说在正式的CTF比赛中不会出现…</p><h3 id="mess"><a href="#mess" class="headerlink" title="mess"></a>mess</h3><p><del>What a mess !</del></p><p>查看Python脚本, 发现是将flag转为ASCII码之后, 再向其中随机插入字母.</p><p>解法也简单, 去掉字母后将相邻的两个(或三个数字, 范围是 20~126 )转换为该ASCII码对应的字符.</p><p>flag: <code>moectf{pyth0n_1s_s0_s1mple}</code></p><h3 id="曲奇饼"><a href="#曲奇饼" class="headerlink" title="曲奇饼"></a>曲奇饼</h3><p>统计非重复子串的最大长度.</p><p>简单的滑动窗口即可解决, 细节参见代码.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//或者用自带的max也行</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getMaxSubStrLeng</span><span class="token punctuation">(</span>string inStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//滑动窗口, 应该很直观</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> currBegin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> currEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> inStr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string currContent <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currBegin <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> currEnd <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currContent<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>inStr<span class="token punctuation">[</span>currEnd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> currContent<span class="token punctuation">.</span>npos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currContent<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>currContent<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inStr<span class="token punctuation">[</span>currEnd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currEnd<span class="token operator">++</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> currEnd <span class="token operator">-</span> currBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//更新最大值</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//cout &lt;&lt; currContent.find(inStr[currBegin]) &lt;&lt; endl;</span>            currContent<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>currContent<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>inStr<span class="token punctuation">[</span>currBegin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currBegin<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//遇到重复则逐渐从左端删除currContent中的字符,</span>            <span class="token comment">//直到不再有字符和inStr[currEnd]重复</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//cout &lt;&lt; currContent &lt;&lt; endl;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string inStr<span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> inStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">getMaxSubStrLeng</span><span class="token punctuation">(</span>inStr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Frank-amp-赤道企鹅-永远的神"><a href="#Frank-amp-赤道企鹅-永远的神" class="headerlink" title="Frank &amp; 赤道企鹅, 永远的神"></a>Frank &amp; 赤道企鹅, 永远的神</h3><p>这两道题解法相似, 都是统计文件内容, 可参见repo中对应的FrankCounter.java 与EquatorCounter.java</p><p>其余略😜</p><h2 id="Classic-Crypto"><a href="#Classic-Crypto" class="headerlink" title="Classic Crypto"></a>Classic Crypto</h2><blockquote><p>“古典密码在现代的CTF比赛中已经很少出现”    – FAQ</p></blockquote><h3 id="大帝的征程-1-amp-2"><a href="#大帝的征程-1-amp-2" class="headerlink" title="大帝的征程 #1 &amp; #2"></a>大帝的征程 #1 &amp; #2</h3><p>凯撒密码是一种经典的移位密码, 由flag格式, 得前六个字符为<code>moectf</code>, 然后在此基础上计算密文相对于已知明文的偏移量即可</p><p><del>已知明文攻击 (大概)</del></p><h3 id="大帝的征程-3"><a href="#大帝的征程-3" class="headerlink" title="大帝的征程 #3"></a>大帝的征程 #3</h3><p>由上述经验, 我们推测偏移量应该为 +47(注意由于ASCII码的范围为0~127, 我们需要对127取余作为结果), 写个java脚本解密, 我们得到了<code>moectf{cnquer_th_X#S$"}</code>…</p><p>看起来大部分是正确的, 只是有一些字符没有正确的解出来. 结合之前的经验, 我们推测<code>cnquer</code> 应该是<code>c0nquer</code>, <code>th</code>应该是<code>th3</code>. 计算可得这时的偏移量是-47, 再计算一次, 我们得到了全部明文: flag <code>moectf{c0nquer_th3_XDSEC}</code></p><p><del>I’m afraid I’m too vegetable to do that 😭</del></p><h3 id="大帝的征程-维吉尼亚-amp-维吉尼亚Ex"><a href="#大帝的征程-维吉尼亚-amp-维吉尼亚Ex" class="headerlink" title="大帝的征程 维吉尼亚 &amp; 维吉尼亚Ex"></a>大帝的征程 维吉尼亚 &amp; 维吉尼亚Ex</h3><h4 id="背景知识-维吉尼亚密码"><a href="#背景知识-维吉尼亚密码" class="headerlink" title="背景知识: 维吉尼亚密码"></a>背景知识: 维吉尼亚密码</h4><p>维吉尼亚密码由凯撒密码扩展而来，引入了密钥的概念。即根据密钥来决定用哪一行的密表(或者你也可以理解成偏移量…)来进行替换，以此来对抗字频统计。</p><p>也就是说, 实际上, 维吉尼亚分解之后还是相当于多个凯撒密码的组合…</p><p>那现在(至少相邻字符的)偏移量不再固定, 我们应该怎么做呢…?</p><h4 id="Friedman测试法确定密钥长度"><a href="#Friedman测试法确定密钥长度" class="headerlink" title="Friedman测试法确定密钥长度"></a>Friedman测试法确定密钥长度</h4><p>我们知道, 不同字母在同一文本的出现概率并不相同(至少对于包括英文在内的大多数语言如此). 那么, 我们可以定义一个叫做”重合指数”的量, 来量化两个串之间的对应程度.</p><p>设x=x1x2…xn是一条n个字母的串，x的重合指数记为CI，定义为x中两个随机元素相同的概率。</p><p>而通过对大量的英文文本进行统计, 我们得到每个字母的出现概率如下. </p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/b91e4e49c93c2db554922f8ecb22f56a_thumb.png" alt="【密码学】维吉尼亚密码加解密原理及其破解算法Java实现"></p><p>由此, 我们可以得到英文文本的重合指数为 <strong>0.065</strong>(我们假定明文的重合指数大致也是这个值).</p><p>结合之前的”维吉尼亚密码相当于多个凯撒密码的组合”这一特点, 我们就可以把长为n的密文先分为m组, 按照列的形式组成一个 m*(n/m)的矩阵, 然后检测每一组密文的重合指数. </p><p>如果m正好就是密钥的长度, 那么每一组的CI值应当大致也是0.065; 如果不是的话, 那么分组后的密文看起来应该很随机. 而对于一个随机串, 重合指数约为 <strong>0.038</strong>.</p><p>综上, 我们就通过Friedman测试法得到了密钥的最可能长度.</p><h4 id="字母频度分析确定密钥"><a href="#字母频度分析确定密钥" class="headerlink" title="字母频度分析确定密钥"></a>字母频度分析确定密钥</h4><p>有了密钥长度m, 我们就可以将密文按照密钥长度分解为k = n/m组, 每一组都是凯撒密码, 然后用类似上图的字母频度分析即可解密.</p><blockquote><p>由上面的分析可知, 要破解维吉尼亚密码, 还是需要收集到大量的密文的. 不过这两道题的密文都很长, 足够破解了.</p></blockquote><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>其实Android我之前也没接触过, 这里就简单的记录一下简单的Android逆向过程吧.</p><p> <del>“你之前到底接触过啥??” “啥也没接触过….”</del></p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/5442499-52cadc4569714633.png" alt="img"></p><p>借一张图(来自<a href="https://www.jianshu.com/p/d29c37dda256">这里</a>)说明apk的打包过程.</p><p>我们看到, java文件在编译后会生成class文件, 然后与其他第三方的class文件与library一起组成dex文件, 然后再经过一些处理, zip压缩, 签名, 对齐后就是我们看到的apk文件了.</p><p>所以, 我们可以直接将apk按照zip解压, 然后获得dex文件. 不过dex是Android的Dalvik虚拟机专用的字节码文件, 我们得把它转成标准的java虚拟机的class文件. </p><p>幸运的是, 已经有大佬实现了相关的工具: <a href="https://github.com/pxb1988/dex2jar">dex2jar</a>. 获得jar/class文件后, 我们可以使用<a href="https://github.com/java-decompiler/jd-gui">jd-gui</a>反编译class文件, 得到源码.</p><h3 id="Baby-Android"><a href="#Baby-Android" class="headerlink" title="Baby Android"></a>Baby Android</h3><p>(稍后再更…)</p>]]></content>
    
    
    
    <tags>
      
      <tag>Misc</tag>
      
      <tag>MoeCTF</tag>
      
      <tag>Reverse</tag>
      
      <tag>Algorithm</tag>
      
      <tag>Classical Crypto</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Beginning of Everything</title>
    <link href="/2020/10/15/The-Beginning-of-Everything/"/>
    <url>/2020/10/15/The-Beginning-of-Everything/</url>
    
    <content type="html"><![CDATA[<h1 id="The-Beginning-of-Everything"><a href="#The-Beginning-of-Everything" class="headerlink" title="The Beginning of Everything"></a>The Beginning of Everything</h1><p>其实很早之前就想在Github Pages上搭一个个人博客了, CSDN总是让人很难受   </p><p> <del>但是拖延症晚期的我现在才搭完hhh</del>    </p><p>言归正传, 基于Hexo和Travis CI的Pages并不难部署, 只是基于YMAL的主题配置写起来有点麻烦, 向Markdown中插入图片也是一件麻烦事儿….    </p><p>博客在 <a href="https://horizonchaser.gitee.io/">Gitee Pages</a> 上有一份镜像, <del>不过在我搞定Github的workflow之前, Gitee的更新可能不是很及时😂</del>已经搞定了🍻</p><p>就这样吧, 欢迎大家来玩儿~</p><h1 id="Update-21-01-31"><a href="#Update-21-01-31" class="headerlink" title="Update 21/01/31"></a>Update 21/01/31</h1><p>把博客的 CI 从 Travis 迁移到 Github Actions 上了, 前者太慢了, 排队能排半个小时…</p><h1 id="Update-21-02-05"><a href="#Update-21-02-05" class="headerlink" title="Update 21/02/05"></a>Update 21/02/05</h1><p>从 <a href="https://www.bfcounter.vip/">蝴蝶计数器</a> 拿到了一个统计的小工具, 放到这里</p><p><img src="https://www.bfcounter.vip/generatepic?userid=d582efcb-3c8b-49de-8f01-e9da8bb7be3e"></p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
