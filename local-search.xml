<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/10/16/MoeCTF%202020%20WriteUp/"/>
    <url>/2020/10/16/MoeCTF%202020%20WriteUp/</url>
    
    <content type="html"><![CDATA[<h1 id="MoeCTF-2020-Write-Up"><a href="#MoeCTF-2020-Write-Up" class="headerlink" title="MoeCTF 2020 Write Up"></a>MoeCTF 2020 Write Up</h1><p><strong><em>By Horizon Chaser, aka. Horizon</em></strong></p><p>第一次参加CTF, 现学现用, 会做的题实在有限😂, 先把自己会的或者有思路的部分题写下来, 以供参考</p><p><del>其他不会的题就等各位巨佬的Write Up辽</del></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>Misc, 全程Miscellaneous, 本意是”杂项”. 在CTF中大概是指多个领域 <del>脑洞</del> 的混合. 因此做起来还是很有意思的.</p><h3 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h3><p>Misc入门题, 附件profession.jpg. 打开, 发现是专业团队, 仔细一看右下角有黑白色块, 觉得可能是在jpg文件末端添加了内容.</p><p>使用binwalk分析, 未发现隐写的文件, 有点疑惑.</p><p>使用16进制编辑器打开, 发现flag就在末尾😂</p><p><img src="MoeCTF%202020%20WriteUp.assets/image-20201012183142831.png" alt="image-20201012183142831"></p><h3 id="hey-fxck-you"><a href="#hey-fxck-you" class="headerlink" title="hey fxck you!"></a>hey fxck you!</h3><p>附件good_morning_my_neighbors.png, 表达了诚挚的问候(大雾)</p><p>除了最下方被裁剪了, 图片没有发现什么问题, 使用binwalk分析, 发现末尾有一个zip文件, 解压得fk u.txt, 内容如下</p><blockquote><p>++++++++[&gt;&gt;++&gt;++++&gt;++++++&gt;++++++++&gt;++++++++++&gt;++++++++++++&gt;++++++++++++++&gt;++++++++++++++++&gt;++++++++++++++++++&gt;++++++++++++++++++++&gt;++++++++++++++++++++++&gt;++++++++++++++++++++++++&gt;++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;—.++.&lt;+++++.–.&gt;+++++.&lt;+++.&gt;&gt;—–.–.&lt;&lt;-.&gt;-.&lt;&lt;&lt;&lt;&lt;+.&gt;&gt;&gt;&gt;&gt;&gt;.&lt;&lt;.&gt;.&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;+.+++++.————.&lt;+++++.&gt;.&lt;&lt;&lt;++.&lt;.&gt;&gt;&gt;&gt;&gt;&gt;++++.</p></blockquote><p>搜索, 得知这是BrainFuck语言, 解密得到flag <code>moectf{yes!yes!fk_U_2!}</code></p><p><del>这是对此前问候的友好回应(确信)</del></p><h3 id="base64？¿"><a href="#base64？¿" class="headerlink" title="base64？¿"></a>base64？¿</h3><p>题面是一个以等号结尾的字符串  <code>0H9MJjCNPiMgJHMQJNtfyEJgIjtS1Ig=</code>, 结合名称, 确定是base64编码的文本.</p><p>按照标准的字符表无法解密, 查看hint, 得到字符表为<code>vwxrstuopq34567ABCDEFGHIJyz012PQRSTKLMNOZabcdUVWXYefghijklmn89+/</code>, 按照这个字符表解码, 得到flag<code>moectf{itai_base64_qaq}</code></p><h3 id="A3FXCK"><a href="#A3FXCK" class="headerlink" title="A3FXCK"></a>A3FXCK</h3><p><del>所以a3又干啥了这是</del></p><p>题面是一个jpg, binwalk分析, 得到隐藏的A3FXCK.txt, 打开, 发现内容可被拆分为两类: <code>luoqXan</code>与<code>arttnbaX</code>, X为1~6的正整数.</p><p>结合首行的<code>123456[]()+!</code>, 推测1~6的值分别代表<code>[]()+!</code>, 替换后得到一坨奇怪的东西, 尝试按照JavaScript运行后得到flag <code>moectf{J5Fxck_1s_1nt3res7in9!}</code></p><p>新知识: <a href="https://github.com/aemkei/jsfuck">JSFuck</a>是将(小段的)JS代码加密为仅包含<code>[]()+!</code>的文本, 但是会造成严重的体积膨胀. 所以替换后得到的那一坨解密之后也只是一行<code>alert('moectf{J5Fxck_1s_1nt3res7in9!}'</code></p><p><del>由此得知, JS确实是最强大的编程语言</del></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Welcome-To-Re"><a href="#Welcome-To-Re" class="headerlink" title="Welcome To Re!"></a>Welcome To Re!</h3><p>签到题, 也是第一道我做出来的逆向的题😂</p><p>下载附件, 打开, 按照入门指南和Hint提示, 使用IDA64分析SignIn.exe, 在左侧定位main函数, 双击跳转到对应位置, 按下F5反汇编, 得到伪代码如下</p><pre class="line-numbers language-hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword"><code class="language-hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><span class="hljs-function"></span>{  <span class="hljs-keyword">char</span> Str1; <span class="hljs-comment">// [rsp+20h] [rbp-60h]</span>  <span class="hljs-keyword">char</span> Str2[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+50h] [rbp-30h]</span>  _main();  <span class="hljs-built_in">strcpy</span>(Str2, <span class="hljs-string">"moectf{W3lc0me-T0_th3-W0rld_Of_R3v3rsE!}"</span>);  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Welcome to MoeCTF! --by Reverier\nPlease Input your flag and I will check it:"</span>);  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%41s"</span>, &Str1);  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(&Str1, Str2) )    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congratulations!"</span>);  <span class="hljs-keyword">else</span>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Ruaaaaaaaaaaaaa~~~Wrong!"</span>);  getchar();  getchar();  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在main函数中, 首先将flag内容复制到str2中, 然后输出提示信息并将输入保存到Str1中. 之后通过strcmp比较输入的Str2与保存的Str1的值是否一致. 由此我们得出, Str2的值就是flag<code>moectf{W3lc0me-T0_th3-W0rld_Of_R3v3rsE!}</code>. <del>虽然说是显然的, 但是该分析还是要分析的</del></p><p>总之, Welcome to the World of Reverse 🍻!</p><h3 id="RxEncode"><a href="#RxEncode" class="headerlink" title="RxEncode"></a>RxEncode</h3><p>这道题当时没有做出来 <del>, 然后就变成了面试作业</del></p><p>使用IDA反汇编, 观察main函数, 发现程序将输入的内容作为RxEncode函数的参数, 再将返回值s1同s2进行比较确定flag正确与否.</p><p>双击RxEncode并反汇编, 得伪代码如下.</p><pre class="line-numbers language-hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> *__fastcall <span class="hljs-title">RxEncode</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *a1, <span class="hljs-keyword"><code class="language-hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> *__fastcall <span class="hljs-title">RxEncode</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *a1, <span class="hljs-keyword">int</span> a2)</span></span><span class="hljs-function"></span>{  <span class="hljs-keyword">int</span> v2; <span class="hljs-comment">// eax</span>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// edx</span>  <span class="hljs-keyword">void</span> *result; <span class="hljs-comment">// rax</span>  <span class="hljs-keyword">void</span> *Dst; <span class="hljs-comment">// [rsp+28h] [rbp-58h]</span>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+30h] [rbp-50h]</span>  <span class="hljs-keyword">int</span> v7; <span class="hljs-comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="hljs-keyword">int</span> v8; <span class="hljs-comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> v9; <span class="hljs-comment">// [rsp+38h] [rbp-48h]</span>  <span class="hljs-keyword">int</span> v10; <span class="hljs-comment">// [rsp+3Ch] [rbp-44h]</span>  _BYTE *v11; <span class="hljs-comment">// [rsp+40h] [rbp-40h]</span>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> v12; <span class="hljs-comment">// [rsp+48h] [rbp-38h]</span>  <span class="hljs-keyword">int</span> v13; <span class="hljs-comment">// [rsp+4Ch] [rbp-34h]</span>  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *v14; <span class="hljs-comment">// [rsp+70h] [rbp-10h]</span>  <span class="hljs-keyword">int</span> v15; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span>  v14 = a1;  v15 = a2;  v2 = a2;  v3 = a2 + <span class="hljs-number">3</span>;  <span class="hljs-keyword">if</span> ( v2 < <span class="hljs-number">0</span> )    v2 = v3;  v13 = <span class="hljs-number">3</span> * (v2 >> <span class="hljs-number">2</span>);  v12 = <span class="hljs-number">0</span>;  v10 = <span class="hljs-number">0</span>;  <span class="hljs-keyword">if</span> ( a1[v15 - <span class="hljs-number">1</span>] == <span class="hljs-number">61</span> )    v12 = <span class="hljs-number">1</span>;  <span class="hljs-keyword">if</span> ( a1[v15 - <span class="hljs-number">2</span>] == <span class="hljs-number">61</span> )    ++v12;  <span class="hljs-keyword">if</span> ( a1[v15 - <span class="hljs-number">3</span>] == <span class="hljs-number">61</span> )    ++v12;  <span class="hljs-keyword">if</span> ( v12 == <span class="hljs-number">1</span> )  {    v13 += <span class="hljs-number">4</span>;  }  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v12 > <span class="hljs-number">1</span> )  {    <span class="hljs-keyword">if</span> ( v12 == <span class="hljs-number">2</span> )    {      v13 += <span class="hljs-number">3</span>;    }    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v12 == <span class="hljs-number">3</span> )    {      v13 += <span class="hljs-number">2</span>;    }  }  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( !v12 )  {    v13 += <span class="hljs-number">4</span>;  }  Dst = <span class="hljs-built_in">malloc</span>(v13);  <span class="hljs-keyword">if</span> ( Dst )  {    <span class="hljs-built_in">memset</span>(Dst, <span class="hljs-number">0</span>, v13);    v11 = Dst;    <span class="hljs-keyword">while</span> ( v15 - v12 > v10 )    {      v9 = <span class="hljs-number">0</span>;      v7 = <span class="hljs-number">0</span>;      <span class="hljs-keyword">while</span> ( v9 <= <span class="hljs-number">3</span> && v15 - v12 > v10 )      {        v7 = (v7 << <span class="hljs-number">6</span>) | (<span class="hljs-keyword">char</span>)find_pos(v14[v10]);        ++v9;        ++v10;      }      v8 = v7 << <span class="hljs-number">6</span> * (<span class="hljs-number">4</span> - v9);      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i <= <span class="hljs-number">2</span> && i != v9; ++i )        *v11++ = v8 >> <span class="hljs-number">8</span> * (<span class="hljs-number">2</span> - i);    }    *v11 = <span class="hljs-number">0</span>;    result = Dst;  }  <span class="hljs-keyword">else</span>  {    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"No enough memory.\n"</span>);    result = <span class="hljs-number">0</span>i64;  }  <span class="hljs-keyword">return</span> result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到 ‘=’ 的ASCII码是61, 结合面试时的提示**”将flag进行**(类似)<strong>base64解码”</strong>, 仔细分析RxEncode的逻辑后, 得出这个函数的作用就是将内容进行类似base64的解码.</p><p>由此我们得出, s2保存的应当就是解码后的flag内容, 将变量的值转为16进制后结果如下.</p><pre class="line-numbers language-hljs C">  <span class="hljs-keyword">char</span> s2[<span class="hljs-number">8</span>]; <span class="hljs-comment"><code class="language-hljs C">  <span class="hljs-keyword">char</span> s2[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-60h]</span> __int64 v15; <span class="hljs-comment">// [rsp+18h] [rbp-58h]</span> __int64 v16; <span class="hljs-comment">// [rsp+20h] [rbp-50h]</span><span class="hljs-comment">/*....................................</span><span class="hljs-comment">  其他内容</span><span class="hljs-comment">  .....................................*/</span> *(_QWORD *)s2 = <span class="hljs-number">0x4AD158FEB59C879A</span>LL; v15 = <span class="hljs-number">0xCBEBFDFA6CED0BFE</span>LL; v16 = <span class="hljs-number">0x7A47A38E43A334E8</span>LL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合s2 v15 v16在main的栈帧中相邻存放这一点, 我们推测s2实际的长度应当不止为8, 而是24. </p><p>事实上, 我认为v15 v16的__int64类型也是IDA的推测(它并不确定真实类型是什么) - 因为在栈帧中将s2的类型由默认的char []改为char [24]后, 三个变量变成了这样.</p><pre class="line-numbers language-hljs c">*(_QWORD *)s2 = <span class="hljs-number"><code class="language-hljs c">*(_QWORD *)s2 = <span class="hljs-number">0x4AD158FEB59C879A</span>LL;*(_QWORD *)v15 = <span class="hljs-number">0xCBEBFDFA6CED0BFE</span>LL;*(_QWORD *)v16 = <span class="hljs-number">0x7A47A38E43A334E8</span>LL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>考虑到x86的小端序, 实际的字节顺序应当是 <code>9A 87 9C B5 FE 58</code>这样. 获得解码的flag后, 尝试进行base64编码. </p><p>考虑到flag中含有标准编码表不包含的<code>{ }</code>, 因此我们可以认为这个表不同于标准的编码表.</p><p>观察发现, RxEncode中调用了一个名为find_pos的函数, 它的作用应当是在编码表中查找字符的位置, 进入该函数, 得到编码表<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234{}789+/=</code>.</p><p>对先前得到的字节按照编码表进行编码, 可以得到flag<code>moectf{Y0Ur+C+1s+v3ry+g0o0OOo0d}</code>.</p><p><del>No my C is very poooooooor /(ㄒoㄒ)/</del></p><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>在分析时我不小心改错了s2的类型, 却又改不回去, 而IDA本身又不支持撤销…<br>当时我通过菜单栏的New Instance新打开了一个IDA实例重新分析, 得到的main函数中解码后的flag的相关内容变成了这样, 栈帧也发生了相应的改变…</p><pre class="line-numbers language-hljs c">Str2 = <span class="hljs-number"><code class="language-hljs c">Str2 = <span class="hljs-number">-98</span>;v11 = <span class="hljs-number">-101</span>;v12 = <span class="hljs-number">-100</span>;v13 = <span class="hljs-number">-75</span>;v14 = <span class="hljs-number">-2</span>;v15 = <span class="hljs-number">112</span>;v16 = <span class="hljs-number">-45</span>;v17 = <span class="hljs-number">15</span>;v18 = <span class="hljs-number">-78</span>;v19 = <span class="hljs-number">-47</span>;v20 = <span class="hljs-number">79</span>;v21 = <span class="hljs-number">-100</span>;v22 = <span class="hljs-number">2</span>;v23 = <span class="hljs-number">127</span>;v24 = <span class="hljs-number">-85</span>;v25 = <span class="hljs-number">-34</span>;v26 = <span class="hljs-number">89</span>;v27 = <span class="hljs-number">101</span>;v28 = <span class="hljs-number">99</span>;v29 = <span class="hljs-number">-25</span>;v30 = <span class="hljs-number">64</span>;v31 = <span class="hljs-number">-99</span>;v32 = <span class="hljs-number">-51</span>;v33 = <span class="hljs-number">-6</span>;v34 = <span class="hljs-number">4</span>;v35 = <span class="hljs-number">0</span>;v36 = <span class="hljs-number">0</span>;v37 = <span class="hljs-number">0</span>;v38 = <span class="hljs-number">0</span>;v39 = <span class="hljs-number">0</span>;v40 = <span class="hljs-number">0</span>;v41 = <span class="hljs-number">0</span>;v42 = <span class="hljs-number">0</span>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过除此之外整体的结构并未发生过多改变, 其余内容一样.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/16/hello-world/"/>
    <url>/2020/10/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-hljs bash">$ hexo new <span class="hljs-string"><code class="language-hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-hljs bash"><code class="language-hljs bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-hljs bash"><code class="language-hljs bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-hljs bash"><code class="language-hljs bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test blog</title>
    <link href="/2020/10/13/test-blog/"/>
    <url>/2020/10/13/test-blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
