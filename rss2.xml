<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Horizon Blog</title>
    <link>https://horizonchaser.github.io/</link>
    
    <image>
      <url>https://horizonchaser.github.io/avatar_small_round.png</url>
      <title>Horizon Blog</title>
      <link>https://horizonchaser.github.io/</link>
    </image>
    
    <atom:link href="https://horizonchaser.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 09 Jan 2024 15:41:13 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>使用 GitHub Action 自动推送博客更新到 Telegram 频道</title>
      <link>https://horizonchaser.github.io/2024/01/09/%E4%BD%BF%E7%94%A8-GitHub-Action-%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E5%88%B0-Telegram-%E9%A2%91%E9%81%93/</link>
      <guid>https://horizonchaser.github.io/2024/01/09/%E4%BD%BF%E7%94%A8-GitHub-Action-%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E5%88%B0-Telegram-%E9%A2%91%E9%81%93/</guid>
      <pubDate>Tue, 09 Jan 2024 23:39:32 GMT</pubDate>
      
      <description>利用 Action, 我们不仅可以自动化构建与发布博客, 还可以推送更新消息</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="使用-github-action-自动推送博客更新到-telegram-频道"><a class="markdownIt-Anchor" href="#使用-github-action-自动推送博客更新到-telegram-频道"></a> 使用 GitHub Action 自动推送博客更新到 Telegram 频道</h1><p>之前在别人的频道看到了将自己博客更新的消息推送到自己频道的 Bot, 觉得很不错, 所以 — 咱也要整一个!</p><p>折腾了一小段时间之后, 就有了这篇文章, 以及一个推送的 Bot.</p><h2 id="整体流程"><a class="markdownIt-Anchor" href="#整体流程"></a> 整体流程</h2><p>这个事情说起来也不麻烦, 博客本身就是使用 Hexo 通过 GitHub Action, 在每次 push 时自动构建和发布的. 所以我们要做的事情就是, 在 Action 流程中加一个步骤, 获取这次提交包含的 Markdown 文件, 然后通过 Telegram Bot API 发送到自己的频道:</p><ol><li>获取当前的 Commit Message, 判断是否包含 <code>upd post</code> 或 <code>new post</code></li><li>如果包含, 则通过 <code>gitpython</code> 库获得当前提交包含的 Markdown 文件, 再通过 head matter 的第二行拿到名称, 第三行拿到摘要</li><li>拼一下消息字符串, 通过 <code>telegram</code> 库, 用机器人账号把消息发到指定的位置<ol><li>Bot 通过 BotFather 创建, 记得手动加到频道里并给对应的发送消息的权限</li><li>Bot 的 Token 和目标频道的 ID 放到 Secret 里面, 通过环境变量在执行时获取<ol><li>虽然 Action 会试着给你包含这些内容的输出 (如果真有的话) 打码, 但你要是直接写在源码里仓库还是 public 的话谁也救不了</li></ol></li></ol></li></ol><p>整体的流程就是这样, 并不算难, 麻烦的地方在于获取具体哪篇是更新的文章 — Hexo 本身似乎没有提供 API, GPT 给出的脚本也跑不了, 大概是瞎编的. 而折腾这么久的原因主要是两个</p><ol><li>没整明白如何在 Action 的不同步骤之间传递消息, 不管是 <code>echo ::setoutput</code> 还是写到环境文件都没效果</li><li><code>telegram</code> 库中发送消息的方法是 <code>async</code> 的, 而某个笨蛋很长时间没写过这类代码也没看文档</li></ol><h2 id="待改进之处"><a class="markdownIt-Anchor" href="#待改进之处"></a> 待改进之处</h2><p>还是有很多要改进的地方的:</p><ol><li>更新信息里面附带摘要 (是的上面写了但是我没真正加进去)</li><li>把上面的第一步和第二步都放到 py 脚本里面去, 由于历史遗留问题这两步现在是分开的</li></ol><p>等我有时间再改改吧, 最近还是比较忙</p><p>就这样, 博客的 Action 配置文件在<a href="https://github.com/HorizonChaser/horizonchaser.github.io/blob/backup/.github/workflows/main.yml">这里</a>, 需要的话可以看看.</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/GitHub/">GitHub</category>
      
      <category domain="https://horizonchaser.github.io/tags/CI-CD/">CI/CD</category>
      
      <category domain="https://horizonchaser.github.io/tags/Telegram-Bot/">Telegram Bot</category>
      
      <category domain="https://horizonchaser.github.io/tags/GitHub-Action/">GitHub Action</category>
      
      
      <comments>https://horizonchaser.github.io/2024/01/09/%E4%BD%BF%E7%94%A8-GitHub-Action-%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E5%88%B0-Telegram-%E9%A2%91%E9%81%93/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>搭建一台 NAS</title>
      <link>https://horizonchaser.github.io/2023/04/09/%E6%90%AD%E5%BB%BA%E4%B8%80%E5%8F%B0-NAS/</link>
      <guid>https://horizonchaser.github.io/2023/04/09/%E6%90%AD%E5%BB%BA%E4%B8%80%E5%8F%B0-NAS/</guid>
      <pubDate>Sun, 09 Apr 2023 17:11:21 GMT</pubDate>
      
      <description>捡垃圾搭建了一台 NAS, 顺便当作服务器</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p><strong>⏩这是一篇持续更新中的文章⏩</strong></p></blockquote><h1 id="horizon-nas"><a class="markdownIt-Anchor" href="#horizon-nas"></a> Horizon NAS</h1><p>其实这是去年冬天的事情了, 当时刚打完美亚杯, 拿到了点儿奖金, 正好外置的硬盘挂学校 BT 已经力不从心了 (马上就被塞满力), 于是就…</p><p>有了这台百元级 NAS 的 <s>(捡垃圾)</s> 计划! (实际是五百还是六百来着)</p><p>言归正传, 实际上当时选机箱和主板还是折腾了挺长时间的 (主要是 17x19 的, 有足够 SATA 接口并且还自带千兆网卡的板子真的不多), 写篇文章记录一下</p><p><s>顺便升级一下博客的依赖, 大半年没动过了, 都快忘了还有这个东西了 (笑)</s></p><h2 id="需求确定"><a class="markdownIt-Anchor" href="#需求确定"></a> 需求确定</h2><h3 id="软件"><a class="markdownIt-Anchor" href="#软件"></a> 软件</h3><p>在开始之前, 咱看了很多家庭/个人 NAS 组建相关的文章, 基本都是花里胡哨地作为家里的流媒体中心, 配上 emby/plex 之类软件的和自动下载海报的刮削器, 然后得到一个很炫酷的海报墙… 不是说这个不好, 只是咱的 NAS 也就一个人用, 实在用不上这么复杂的功能.</p><p>总之, 大概只有以下的功能是核心:</p><ul><li>作为 BT 下载器</li><li>作为 SAMBA / NFS 服务器, 做好文件分享</li><li>支持 Docker, 偶尔跑跑其他服务</li></ul><p>以下都是亲自测试后的结果.</p><p>为什么不选择黑群晖:</p><ul><li>安装/升级麻烦, 得固定插个引导U盘<ul><li>不小心升级了系统可能没了</li></ul></li><li>新版群晖认不到硬盘位, 不想装老版 (太丑辣.jpg)</li><li>软件少, Docker 受限 (下个 Transmission 害得折腾, 至于 qbittorrent, 加油吧)</li><li>群晖自己的文件系统可能不好修复 (虽然基于 Btrfs, 但是群晖貌似有魔改)</li><li>总感觉群晖的图形界面卡卡的 (也许是个人因素吧)</li></ul><p>为什么不选择 TrueNAS:</p><ul><li>TrueNAS 本身即是一个应用, 不允许你自己手动装其他软件</li><li>Docker 支持有限</li></ul><p>TrueNAS 是一个很好的 NAS OS, 但不适合作为服务器.</p><p>综上, 选择 Ubuntu Server 22.04 LTS 作为系统, 没有也不需要图形界面, 还能降低性能需求 - 反正都在一个内网下, 想要干什么直接 SSH 过去就好, 平时不用管</p><h3 id="硬件"><a class="markdownIt-Anchor" href="#硬件"></a> 硬件</h3><p>硬件方面的选择比软件可麻烦太多了… 虽然软件尝试了不少, 但是硬件就没这个条件了</p><p>首先是机箱, 考虑到宿舍一共也没多大地方, 机架式的就免了 (梦想破灭.jpg), 长宽高都控制在35cm以下最好, 同时至少支持 4 个 3.5’ SATA 硬盘位</p><p>找了半天, 找到一个基本满足上述限制的机箱: 惠普的 Gen 7 MicroServer 机箱, 体积很小, 带四个硬盘屉, 各方面算是满足要求</p><p>这个机箱的主板是底置的, 硬盘在主板正上方排列放置, 所以机箱整体接近一个立方体. 由于它本质上是惠普自己定制的机箱, 因此背板的扩展卡槽位和主板的螺丝位置和普通的主板并不通用. 好在万能的淘宝商家总有办法, 他们直接把机箱的背板按照正常主板的需求切割好; 至于螺丝位置, 则设计了一个托盘用来转接 (果然绝大多数问题都能通过加一层解决啊…).</p><p>当然, <strong>这机箱是二手的</strong> (N 手也说不定).</p><p>机箱选定之后, 主板也就只能在 17x19 的 ITX 主板里选了. 找了半天, 集成 CPU 的主板基本都是要大一点的 (而且 CPU 还不能换), 所以最后还是选了磐石至尊的 B85 ITX 的板子. 寨板就寨板吧, 他家至少是有做服务器的, 咱这没什么负载的应该问题不大 (当然了, B85 的板子早就停产了, 至于为啥是全新的 – PCB 是新的, 南桥可不一定是, <strong>主板整体就算二手吧</strong>)</p><p>硬盘没什么好说的, 这预算也只能选<strong>二手机械盘</strong>. 正好现在手头这块儿西数的紫盘 (4T 的 WD40EJRX)给我留下了很不错的印象 (速度还行 &amp;&amp; 声音很小, 完全听不见, 毕竟是 5400 RPM 的监控盘), 那就上两块儿 4T 紫盘吧! WD40EJRX 的 OEM 版本是 WD40PURX, 那就它了!</p><p><strong>事实证明, 这个是整个选型中最大的错误. 问题甚至不完全在型号上.</strong></p><p>系统盘方面, 主板有个 M.2 盘位, 那就傲腾 16G 走起, 反正数据在机械盘上, 16G 妥妥够用. 当然, 这条 <strong>M.2 固态也是拆机二手的</strong>, 不过傲腾的寿命极长, 有点写入也问题不大.</p><p>CPU 选择了 G3250, 因为这家的 G3260 正好无货了… 内存则是一条威刚的 4G DDR3 1600MHz. 不用想了, <strong>CPU 和内存也都是二手的</strong>.</p><p>有意思的是, 我选的 G3250, 店家发过来的是一颗巨脏的 G3260… 大概咱是赚了吧 (也许).</p><p>风扇方面, 这个 CPU 的发热量其实被动散热都够了, 随便一个散热器都够, 不过高度是个大问题… 由于主板在最下方, 上方距离硬盘位只有大概不到 30mm 的间距, 所以还得选个超薄的 – 结果就是 CPU 散热器比 CPU 还贵. 考虑到硬盘的散热问题, 额外加了个 12cm 的机箱风扇. 这<strong>俩风扇倒都是一手的.</strong></p><p>电源方面, 250W 的全汉小 1U 电源就完全够用了. 咱也<strong>不知道这电源是不是全新的, 就算是吧</strong>.</p><p>由于机箱不带背板, 因此得用足够长的 SATA 线接到主板上. 后来, 主板上方极为有限的高度, 加上垂直于主板的 SATA 接口导致了一次事故.</p><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><table><thead><tr><th style="text-align:center"><strong>组件</strong></th><th style="text-align:center"><strong>型号</strong></th><th style="text-align:center"><strong>价格</strong></th></tr></thead><tbody><tr><td style="text-align:center"><strong>OS</strong></td><td style="text-align:center">Ubuntu Server 22.04 LTS</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center"><strong>主板</strong></td><td style="text-align:center">磐石至尊 B85</td><td style="text-align:center">245</td></tr><tr><td style="text-align:center"><strong>CPU</strong></td><td style="text-align:center">Intel G3250</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center"><strong>固态硬盘</strong></td><td style="text-align:center">傲腾 16G</td><td style="text-align:center">28</td></tr><tr><td style="text-align:center"><strong>CPU散热器</strong></td><td style="text-align:center">16mm高 全铝</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center"><strong>机箱风扇</strong></td><td style="text-align:center">航嘉清风 12cm 无光</td><td style="text-align:center">9.9</td></tr><tr><td style="text-align:center"><strong>电源</strong></td><td style="text-align:center">全汉小 1U 250W</td><td style="text-align:center">62</td></tr><tr><td style="text-align:center"><strong>内存</strong></td><td style="text-align:center">威刚 DDR3 4G</td><td style="text-align:center">30.9</td></tr><tr><td style="text-align:center"><strong>机箱</strong></td><td style="text-align:center">HP Gen7</td><td style="text-align:center">140</td></tr><tr><td style="text-align:center"><strong>总价</strong></td><td style="text-align:center"><strong>不计硬盘</strong></td><td style="text-align:center">552.8</td></tr></tbody></table><p>不算硬盘 &lt;600, 算是百元级吧 (笑)</p><h2 id="装机"><a class="markdownIt-Anchor" href="#装机"></a> 装机</h2><p>这个机箱装机还是比较艰难的, 主要是由于硬盘位置会挡住主板的接线. 而且主板上方的高度很有限, 只能拿两根手指捏着线往下压…</p><p>总之大体的流程是先把 CPU &amp; 散热器, 内存, 以及固态什么的先装在主板上, 然后在外面接上电源看看能不能亮机. 如果能的话, 再装到机箱里.</p><p>装机的顺序大致是先主板, 然后电源, 接电源线, 然后硬盘, 最后接 SATA 数据线. <s>等装完你就练好了二指禅 (不是</s></p><p><img src="https://s2.loli.net/2023/04/09/bw4ZX9mcVQrfp3a.png" alt="CPU"></p><blockquote><p>装好了 CPU</p></blockquote><p><img src="https://s2.loli.net/2023/04/09/GEMtJn71x6YsD4i.png" alt="最小系统"></p><blockquote><p>装上内存和散热器, 从此 CPU 就被永远压在下面了</p></blockquote><p><img src="https://s2.loli.net/2023/04/09/jKoMpqeNsBFcE7C.png" alt="亮机测试"></p><blockquote><p>亮机测试, 一次点亮</p></blockquote><p><img src="https://s2.loli.net/2023/04/09/kqGjYCQbXDI9h8s.png" alt="正面"></p><blockquote><p>机箱正面图, 可以看到空间实在是紧凑</p></blockquote><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><p>配置也没什么好说的, 主要就是 SAMBA 服务器和 qbittorrent-nox, 换源什么的都是常规操作, 注意权限即可</p><h2 id="用户兼开发兼运维体验"><a class="markdownIt-Anchor" href="#用户兼开发兼运维体验"></a> 用户兼开发兼运维体验</h2><p><img src="https://s2.loli.net/2023/04/09/D6gM4TqWXYnyjpv.png" alt="ruler on server"></p><blockquote><p>可以看到, 机箱占地空间没比主板本身大多少</p></blockquote><p><img src="https://s2.loli.net/2023/04/09/zmOeHYUwgCXGPfx.png" alt="on table"></p><blockquote><p>放到桌面刚刚好, 边上那个黑盒子就是咱的外置硬盘盒</p></blockquote><p>整体体验还不错, Ubuntu Server 本身很稳定, 各部件发热也很低所以也几乎听不到风扇声</p><p>但是, 硬盘有话要说: 这两块 <strong>WD40PURX</strong> 虽然是 5400RPM 的 EJRX 的 OEM 版本, 但它们<strong>是 7200 RPM 的</strong>!</p><p>特别的, 其中一块硬盘的声音明显比另一块要大, 而且是低频的嗡嗡声, 在这个距离下降噪耳机已经无能为力了, 已经是不可能放到桌面日用的程度了.</p><p>所以我把它扔到了桌子下面. 配合硬盘定时休眠, 这下就清净多了.</p><p><img src="https://s2.loli.net/2023/04/09/3DWRdk5I8bLCJ2p.png" alt="neofetch output"></p><h2 id="迄今为止的事故"><a class="markdownIt-Anchor" href="#迄今为止的事故"></a> 迄今为止的事故</h2><h3 id="202302-主板-sata-接口脱落"><a class="markdownIt-Anchor" href="#202302-主板-sata-接口脱落"></a> 2023/02 主板 SATA 接口脱落</h3><p><img src="https://s2.loli.net/2023/04/10/lwt7zc5DJdyBrhK.png" alt="damaged SATA slot"></p><p>如前所述, 由于空间有限, SATA 线是弯折了个直角插到主板上的, 所以在某次搬动带来的震动之后…</p><p>主板的 SATA 接口脱落了! 而由于开机少了块硬盘, Ubuntu 自动进了恢复模式 (我也不知道怎么说, 总之就类似 grub 的 rescue).</p><p>最后把硬盘接到其他空闲的接口就暂时解决了. 至于脱落了的接口, 等有时间了再看看怎么装回去吧…</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/NAS/">NAS</category>
      
      <category domain="https://horizonchaser.github.io/tags/%E6%8D%A1%E5%9E%83%E5%9C%BE/">捡垃圾</category>
      
      <category domain="https://horizonchaser.github.io/tags/Linux/">Linux</category>
      
      <category domain="https://horizonchaser.github.io/tags/Ubuntu/">Ubuntu</category>
      
      <category domain="https://horizonchaser.github.io/tags/Server/">Server</category>
      
      
      <comments>https://horizonchaser.github.io/2023/04/09/%E6%90%AD%E5%BB%BA%E4%B8%80%E5%8F%B0-NAS/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Java 线程池初探</title>
      <link>https://horizonchaser.github.io/2022/10/07/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9D%E6%8E%A2/</link>
      <guid>https://horizonchaser.github.io/2022/10/07/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9D%E6%8E%A2/</guid>
      <pubDate>Fri, 07 Oct 2022 17:24:38 GMT</pubDate>
      
      <description>简单研究了一下 Java 线程池的实现方式</description>
      
      
      
      
      
      <category domain="https://horizonchaser.github.io/tags/Java/">Java</category>
      
      <category domain="https://horizonchaser.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/">多线程</category>
      
      <category domain="https://horizonchaser.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/">线程池</category>
      
      
      <comments>https://horizonchaser.github.io/2022/10/07/Java-%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%88%9D%E6%8E%A2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>设计模式 总结</title>
      <link>https://horizonchaser.github.io/2022/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%80%BB%E7%BB%93/</link>
      <guid>https://horizonchaser.github.io/2022/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%80%BB%E7%BB%93/</guid>
      <pubDate>Sun, 28 Aug 2022 00:36:53 GMT</pubDate>
      
      <description>对常见设计模式的总结, 主要来自《设计模式解析》这本书</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>总结一下设计模式, 感觉这应该是某种"元知识"…</p></blockquote><h1 id="设计模式"><a class="markdownIt-Anchor" href="#设计模式"></a> 设计模式</h1><h2 id="一些核心规则"><a class="markdownIt-Anchor" href="#一些核心规则"></a> 一些核心规则</h2><ul><li>识别变化, 然后把变化的部分封装起来</li><li>可测试通常也意味着高质量<ul><li>测试驱动开发 (TDD): 先写测试</li><li>高内聚, 低耦合</li></ul></li></ul><h2 id="facade-模式"><a class="markdownIt-Anchor" href="#facade-模式"></a> Facade 模式</h2><blockquote><p>\fə-ˈsäd, 外观模式</p></blockquote><p>对一个复杂的系统, 提供一个相对简单的对外接口, 接口不一定完整 (是原系统功能的子集), 但足以满足外部要求</p><p>实现: 定义一个或多个实现对外接口的新类, 这些类使用原来的系统 (相当于封装了一层)</p><h2 id="adapter-模式"><a class="markdownIt-Anchor" href="#adapter-模式"></a> Adapter 模式</h2><blockquote><p>适配器模式</p></blockquote><p>使控制范围之外的一个原有对象与某个已经固定的已知接口匹配</p><p>实现: 使原有类包含在新的类中, 新的类提供对外所需的接口, 这样<strong>可以保持多态性</strong></p><h2 id="strategy-模式"><a class="markdownIt-Anchor" href="#strategy-模式"></a> Strategy 模式</h2><blockquote><p>策略模式</p></blockquote><p>根据当前的环境上下文使用不同的业务规则/算法</p><p>实现: 将不同的算法封装为不同的类, 对外暴露相同的接口; 调用者利用多态调用接口即可</p><h2 id="bridge-模式"><a class="markdownIt-Anchor" href="#bridge-模式"></a> Bridge 模式</h2><blockquote><p>桥接模式</p></blockquote><p>将实现与使用分离, 这样所有的实现就可以只公用一个接口 (usu. 抽象类)</p><p><img src="https://s2.loli.net/2022/08/28/CuFsMpy6wqUxeoJ.png" alt="image.png"></p><p>实现: 将实现封装在抽象类中, 然后在使用的地方包含一个抽象类的引用</p><h2 id="abstragy-factory-模式"><a class="markdownIt-Anchor" href="#abstragy-factory-模式"></a> Abstragy Factory 模式</h2><blockquote><p>抽象工厂模式</p></blockquote><p>抽象工厂模式是为了让创建工厂和一组产品与使用相分离，并可以随时切换到另一个工厂以及另一组产品；</p><p>抽象工厂模式实现的关键点是定义工厂接口和产品接口，但如何实现工厂与产品本身需要留给具体的子类实现，客户端只和抽象工厂与抽象产品打交道。</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</category>
      
      <category domain="https://horizonchaser.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/">设计模式</category>
      
      
      <comments>https://horizonchaser.github.io/2022/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%80%BB%E7%BB%93/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>计算机安全导论 复习笔记</title>
      <link>https://horizonchaser.github.io/2022/03/10/Computer%20Security%20Introduction%20Review/</link>
      <guid>https://horizonchaser.github.io/2022/03/10/Computer%20Security%20Introduction%20Review/</guid>
      <pubDate>Thu, 10 Mar 2022 16:57:36 GMT</pubDate>
      
      <description>计安导的复习笔记, 最后一章不全</description>
      
      
      
      <content:encoded><![CDATA[<ul><li><a href="#%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8%E5%AF%BC%E8%AE%BA-%E5%A4%8D%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93">计算机安全导论 复习与总结</a><ul><li><a href="#chapter-1-%E7%AE%80%E4%BB%8B">Chapter 1 简介</a><ul><li><a href="#11-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">1.1 基本概念</a><ul><li><a href="#imp-cia-%E6%9C%BA%E5%AF%86%E6%80%A7-%E5%AE%8C%E6%95%B4%E6%80%A7%E5%92%8C%E5%8F%AF%E7%94%A8%E6%80%A7-p2">[IMP] C.I.A.: 机密性, 完整性和可用性 [P2]</a></li><li><a href="#imp-aaa-%E4%BF%9D%E8%AF%81-%E7%9C%9F%E5%AE%9E%E6%80%A7-%E5%8C%BF%E5%90%8D-p6">[IMP] A.A.A.: 保证, 真实性, 匿名 [P6]</a></li><li><a href="#%E5%A8%81%E8%83%81%E4%B8%8E%E6%94%BB%E5%87%BB">威胁与攻击</a></li><li><a href="#%E5%8D%81%E5%A4%A7%E5%AE%89%E5%85%A8%E5%8E%9F%E5%88%99">十大安全原则</a></li></ul></li><li><a href="#imp-12-%E5%9B%9B%E7%A7%8D%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9-p11">[IMP] 1.2 四种访问控制模型的优缺点 [P11]</a></li><li><a href="#imp-13-%E5%8A%A0%E5%AF%86%E7%9A%84%E6%A6%82%E5%BF%B5-p16">[IMP] 1.3 加密的概念 [P16]</a><ul><li><a href="#%E5%8A%A0%E5%AF%86">加密</a></li><li><a href="#%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D">数字签名</a></li><li><a href="#%E5%8A%A0%E5%AF%86%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0">加密散列函数</a></li><li><a href="#%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6">数字证书</a></li></ul></li><li><a href="#14-%E5%8F%AF%E7%94%A8%E6%80%A7-%E5%AF%86%E7%A0%81-%E5%AD%97%E5%85%B8%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86-%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6">1.4 可用性 密码 字典攻击原理 社会工程学</a><ul><li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7">可用性</a></li><li><a href="#imp-%E5%AF%86%E7%A0%81%E5%8F%8A%E5%AD%97%E5%85%B8%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86-p27">[IMP] 密码及字典攻击原理 [P27]</a></li><li><a href="#%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B">社会工程</a></li></ul></li></ul></li><li><a href="#chapter-2-%E7%89%A9%E7%90%86%E5%AE%89%E5%85%A8">Chapter 2 物理安全</a><ul><li><a href="#%E5%BC%B9%E5%AD%90%E9%94%81">弹子锁</a></li><li><a href="#%E7%94%B5%E5%AD%90%E5%AF%86%E7%A0%81%E9%94%81">电子密码锁</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E6%8A%80%E6%9C%AF">常用的身份验证技术</a></li><li><a href="#imp-sim-%E5%8D%A1%E5%AE%89%E5%85%A8%E5%8F%8A%E6%8C%91%E6%88%98%E5%93%8D%E5%BA%94%E5%8D%8F%E8%AE%AE">[IMP] SIM 卡安全及挑战响应协议</a></li><li><a href="#%E9%92%88%E5%AF%B9%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E7%9B%B4%E6%8E%A5%E6%94%BB%E5%87%BB">针对计算机的直接攻击</a></li><li><a href="#%E9%92%88%E5%AF%B9-atm-%E7%9A%84%E6%94%BB%E5%87%BB">针对 ATM 的攻击</a></li></ul></li><li><a href="#chapter-3-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E5%85%A8">Chapter 3 操作系统的安全</a><ul><li><a href="#%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%89%E5%85%A8">进程的安全</a></li><li><a href="#%E5%86%85%E5%AD%98%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E5%85%A8">内存和文件系统的安全</a></li><li><a href="#imp-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8-p97">[IMP] 应用程序安全 [P97]</a></li></ul></li><li><a href="#chapter-4-%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6">Chapter 4 恶意软件</a><ul><li><a href="#%E5%86%85%E9%83%A8%E6%94%BB%E5%87%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%96%B9%E5%BC%8F">内部攻击的基本方式</a></li><li><a href="#imp-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%97%85%E6%AF%92-%E6%9C%A8%E9%A9%AC%E5%92%8C%E8%A0%95%E8%99%AB-p120">[IMP] 计算机病毒, 木马和蠕虫 [P120]</a></li><li><a href="#rootkits">Rootkits</a></li><li><a href="#%E9%9B%B6%E6%97%A5%E6%94%BB%E5%87%BB">零日攻击</a></li><li><a href="#%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C">僵尸网络</a></li><li><a href="#%E5%85%A5%E4%BE%B5%E9%9A%90%E7%A7%81%E8%BD%AF%E4%BB%B6">入侵隐私软件</a></li></ul></li><li><a href="#imp-chapter-5-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-i">[IMP] Chapter 5 网络安全 I</a><ul><li><a href="#%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E5%88%86%E5%B1%82">互联网的分层</a></li><li><a href="#%E4%BB%A5%E5%A4%AA%E7%BD%91%E7%9A%84%E6%A6%82%E5%BF%B5">以太网的概念</a></li><li><a href="#imp-arp-%E6%AC%BA%E9%AA%97-p155">[IMP] ARP 欺骗 [P155]</a></li><li><a href="#imp-ip-%E5%8D%8F%E8%AE%AE%E4%B8%8E-icmp-%E5%8D%8F%E8%AE%AE-p157">[IMP] IP 协议与 ICMP 协议 [P157]</a></li><li><a href="#imp-ip-%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97-p161">[IMP] IP 地址欺骗 [P161]</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%8C%85%E5%97%85%E6%8E%A2">数据包嗅探</a></li><li><a href="#%E4%BC%A0%E8%BE%93%E5%B1%82%E5%8D%8F%E8%AE%AE">传输层协议</a></li><li><a href="#imp-tcp-%E4%BC%9A%E8%AF%9D%E5%8A%AB%E6%8C%81-p168">[IMP] TCP 会话劫持 [P168]</a></li><li><a href="#imp-%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB-p170">[IMP] 拒绝服务攻击 [P170]</a></li><li><a href="#imp-ip-%E5%9C%B0%E5%9D%80%E5%9B%9E%E6%BA%AF-p175">[IMP] IP 地址回溯 [P175]</a></li></ul></li><li><a href="#imp-chapter-6-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-ii-p180">[IMP] Chapter 6 网络安全 II [P180]</a><ul><li><a href="#imp-dns-%E5%8E%9F%E7%90%86-p183">[IMP] DNS 原理 [P183]</a></li><li><a href="#imp-dns-%E6%94%BB%E5%87%BB-p185">[IMP] DNS 攻击 [P185]</a></li><li><a href="#%E9%98%B2%E7%81%AB%E5%A2%99%E6%8A%80%E6%9C%AF">防火墙技术</a></li><li><a href="#imp-%E9%9A%A7%E9%81%93-p195">[IMP] 隧道 [P195]</a><ul><li><a href="#imp-%E5%AE%89%E5%85%A8%E7%9A%84-shell-p196">[IMP] 安全的 Shell [P196]</a></li><li><a href="#imp-ipsec-p197">[IMP] IPSec [P197]</a></li></ul></li><li><a href="#%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91%E7%BB%9C">虚拟专用网络</a></li><li><a href="#%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B">入侵检测</a></li></ul></li><li><a href="#chapter-7-web-%E5%AE%89%E5%85%A8">Chapter 7 Web 安全</a><ul><li><a href="#%E7%BD%91%E7%BB%9C%E9%92%93%E9%B1%BC">网络钓鱼</a></li><li><a href="#imp-xss-%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC-p239">[IMP] XSS (跨站脚本) [P239]</a></li><li><a href="#%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0">跨站请求伪造</a></li><li><a href="#imp-sql-%E6%B3%A8%E5%85%A5-p251">[IMP] SQL 注入 [P251]</a></li></ul></li><li><a href="#chapter-8-%E5%8A%A0%E5%AF%86-%E5%AF%86%E7%A0%81%E5%AD%A6%E6%A6%82%E8%BF%B0">Chapter 8 加密 (密码学概述)</a><ul><li><a href="#%E5%AF%B9%E5%AF%86%E7%A0%81%E7%B3%BB%E7%BB%9F%E6%94%BB%E5%87%BB%E7%9A%84%E7%B1%BB%E5%9E%8B">对密码系统攻击的类型</a></li><li><a href="#%E6%9B%BF%E6%8D%A2%E5%AF%86%E7%A0%81%E5%92%8C%E9%A2%91%E7%8E%87%E5%88%86%E6%9E%90">替换密码和频率分析</a></li><li><a href="#%E4%B8%80%E6%AC%A1%E4%B8%80%E5%AF%86-otp">一次一密 (OTP)</a></li><li><a href="#%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81">分组密码</a></li><li><a href="#aes-%E7%AE%97%E6%B3%95">AES 算法</a></li><li><a href="#%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%BC%8F">分组密码的操作模式</a></li><li><a href="#%E6%B5%81%E5%AF%86%E7%A0%81">流密码</a></li><li><a href="#%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80">数论基础</a><ul><li><a href="#%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95-%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95">辗转相除法 (欧几里得算法)</a></li><li><a href="#%E8%B4%B9%E9%A9%AC%E5%AE%9A%E7%90%86%E5%92%8C%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86">费马定理和欧拉定理</a></li></ul></li><li><a href="#rsa-%E7%AE%97%E6%B3%95">RSA 算法</a></li><li><a href="#%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0-%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0">散列函数 (哈希函数)</a></li><li><a href="#%E7%94%9F%E6%97%A5%E6%94%BB%E5%87%BB">生日攻击</a></li><li><a href="#%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E7%A0%81">消息认证码</a></li></ul></li><li><a href="#chapter-9-%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%AE%9E%E8%B7%B5">Chapter 9 安全模型与实践</a><ul><li><a href="#kerberos-%E6%9E%B6%E6%9E%84">Kerberos 架构</a></li><li><a href="#kerberos-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">Kerberos 身份验证</a></li></ul></li></ul></li></ul><h1 id="计算机安全导论-复习与总结"><a class="markdownIt-Anchor" href="#计算机安全导论-复习与总结"></a> 计算机安全导论 复习与总结</h1><h2 id="chapter-1-简介"><a class="markdownIt-Anchor" href="#chapter-1-简介"></a> Chapter 1 简介</h2><h3 id="11-基本概念"><a class="markdownIt-Anchor" href="#11-基本概念"></a> 1.1 基本概念</h3><h4 id="imp-cia-机密性-完整性和可用性-p2"><a class="markdownIt-Anchor" href="#imp-cia-机密性-完整性和可用性-p2"></a> [IMP] C.I.A.: 机密性, 完整性和可用性 [P2]</h4><ul><li>机密性 (congfidentiality): 避免未授权信息的泄露, 涉及数据的保护 (加密, 身份验证, 授权, 物理安全等)</li><li>完整性 (integrity): 不能以未授权的方式改变信息的属性</li><li>可用性 (avaliability): 对任何授权用户都可以及时地访问和修改信息</li></ul><h4 id="imp-aaa-保证-真实性-匿名-p6"><a class="markdownIt-Anchor" href="#imp-aaa-保证-真实性-匿名-p6"></a> [IMP] A.A.A.: 保证, 真实性, 匿名 [P6]</h4><ul><li>保证 (assurance): 在计算机系统中如何管理和提供信任, 例如策略 权限 保护等<ul><li>信任管理 (trust management)</li><li>软件工程</li></ul></li><li>真实性 (authenticity): 能够确定由人或系统发布的声明, 策略, 权限等是名副其实的能力<ul><li>通过数字签名实现</li></ul></li><li>匿名 (anonymity): 不保存任何足够辨识的个人信息</li></ul><h4 id="威胁与攻击"><a class="markdownIt-Anchor" href="#威胁与攻击"></a> 威胁与攻击</h4><p>类型: 窃听, 修改, 拒绝服务 (服务或信息访问的中断或退化), 冒充 (例如钓鱼), 抵赖 (对承诺或数据接收的否认, 是一种对于保证的攻击)</p><h4 id="十大安全原则"><a class="markdownIt-Anchor" href="#十大安全原则"></a> 十大安全原则</h4><ul><li>机制的经济性</li><li>故障安全默认值</li><li>完全仲裁: 检查每一次访问是否满足保护方案</li><li>开放式设计: 安全只依赖于密钥的保密, 可由多方检查系统</li><li>特权分离</li><li>最小特权</li><li>最少公共机制: 多用户时共享机制最小化, 也就是尽可能独立</li><li>心里可接受: 接口和用户的预期一致</li><li>工作因素: 绕过安全机制的代价应与攻击者的资源相比较<ul><li>大概是类似 workload factor 的意思, 就是说复杂度要合适, 不能过度保护</li></ul></li><li>记录危害</li></ul><h3 id="imp-12-四种访问控制模型的优缺点-p11"><a class="markdownIt-Anchor" href="#imp-12-四种访问控制模型的优缺点-p11"></a> [IMP] 1.2 四种访问控制模型的优缺点 [P11]</h3><p>最小权限原则: 限制用户只能访问或修改与他们相关的信息</p><ul><li>访问控制矩阵 (Access Control Matrix)<ul><li>每一行是主体 (用户, 组, 或者可以执行操作的其他实体)</li><li>每一列是客体 (文件, 目录等需要定义访问权限的其他任何实体)</li><li>单元格中为权限, 例如读 写 执行等</li><li><strong>优点</strong><ul><li>快速直接确定任何主体-客体的访问控制权限</li><li>简单直观</li></ul></li><li><strong>缺点</strong><ul><li>矩阵可能很大</li></ul></li></ul></li><li>访问控制列表 (<strong>ACL</strong>, Access Control List)<ul><li>以客体为中心, 每个客体拥有一个列表, 记录了所有对该客体拥有访问权限的主体</li><li>类似将矩阵按照列拆分</li><li><strong>优点</strong><ul><li>大小较小 (尤其是和访问控制矩阵相比)</li><li>对安全的系统, 可以将 ACL 保存为客体的元数据</li></ul></li><li><strong>缺点</strong><ul><li>除了遍历客体, 否则无法从主体查询该主体的所有访问权限</li></ul></li></ul></li><li>权能 (capablity)<ul><li>以主体为中心, 记录该主体拥有访问权限的客体</li><li>类似将矩阵按照行拆分</li><li><strong>优点</strong><ul><li>大小较小</li></ul></li><li><strong>缺点</strong><ul><li>没有与客体直接关联</li></ul></li></ul></li><li>基于角色的访问控制 (RBAC, Role-Based Access Control)<ul><li>管理员定义角色, 然后指定角色的访问控制权限 (而不是直接指定主体的)</li><li>然后将主体分配到不同的角色 (可以是多个角色)</li><li>角色间可以有层级结构</li><li><strong>优点</strong><ul><li>记录的规则总数少, 效率高</li></ul></li><li><strong>缺点</strong><ul><li>现有操作系统尚未实现</li></ul></li></ul></li></ul><h3 id="imp-13-加密的概念-p16"><a class="markdownIt-Anchor" href="#imp-13-加密的概念-p16"></a> [IMP] 1.3 加密的概念 [P16]</h3><h4 id="加密"><a class="markdownIt-Anchor" href="#加密"></a> 加密</h4><p>允许双方在不安全的通道上建立保密的通信, 即进行明文和密文间的可逆变换</p><p>加密和解密使用相同密钥的方案称为对称密码系统或共享密钥密码系统, 例如 AES, DES 等 (密钥较短, 速度较快)</p><p>公钥密码系统: 使用公钥加密, 使用私钥解密; 公钥公开, 私钥解密, 例如 RSA (密钥较长, 速度较慢)</p><h4 id="数字签名"><a class="markdownIt-Anchor" href="#数字签名"></a> 数字签名</h4><p>利用公钥密码系统, 可以将消息 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 和私钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">S_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 作为解密算法的输入, 然后将解密算法的输出和公钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">P_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 作为加密算法的输入得到消息 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>. 任何拥有私钥的人都可以做到这点.</p><p>由此, 若作者 A 欲证明其为消息 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 的作者, 可以先使用私钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">S_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 对消息解密, 得到的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 即为 M 的数字签名. 接收者可以使用 A 的公钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">S_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 再次加密 S, 如果正确则应当得到 M. 由于只有 A 拥有私钥 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">P_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 因此接收者可以确定 M 的作者一定为 A.</p><p>这种方法的唯一缺点: 签名和明文至少等长, 无法实用</p><h4 id="加密散列函数"><a class="markdownIt-Anchor" href="#加密散列函数"></a> 加密散列函数</h4><blockquote><p>不知道为啥要加个加密, 注意散列函数<strong>不是加密, 因为散列不可逆</strong></p></blockquote><p>散列函数: 单向的, 不可逆, 即不能由输出倒推输入</p><p>对某信息产生的散列值也称作摘要 (digest), 摘要一般都比原消息要短. 通过对消息的摘要进行数字签名更加高效, 而且可以防止中间人攻击 (MITM Attack) 和篡改 (很难找到两个摘要一样的信息)</p><p>消息认证码 (Message Authication Code, MAC): 可以对通过不安全信道交换的信息提供完整性保护</p><h4 id="数字证书"><a class="markdownIt-Anchor" href="#数字证书"></a> 数字证书</h4><p>数字证书: 由证书颁发机构 (Certificate Authority, CA) 颁发, 能将公钥和公钥拥有者的身份信息绑定在一起.</p><p>为了验证证书本身的可信性, 证书本身带有对自己的数字签名, 我们也需要保存 CA 的公钥用来验证.</p><h3 id="14-可用性-密码-字典攻击原理-社会工程学"><a class="markdownIt-Anchor" href="#14-可用性-密码-字典攻击原理-社会工程学"></a> 1.4 可用性 密码 字典攻击原理 社会工程学</h3><h4 id="可用性"><a class="markdownIt-Anchor" href="#可用性"></a> 可用性</h4><p>安全解决方案应该是高效的, 因为用户不喜欢慢的系统</p><h4 id="imp-密码及字典攻击原理-p27"><a class="markdownIt-Anchor" href="#imp-密码及字典攻击原理-p27"></a> [IMP] 密码及字典攻击原理 [P27]</h4><p>字典攻击: 大多数容易记住的密码属于一个很小的集合, 因此可以通过收集常用的密码作为尝试的集合进行枚举</p><h4 id="社会工程"><a class="markdownIt-Anchor" href="#社会工程"></a> 社会工程</h4><p>利用人们内心的弱点攻破安全解决方案.</p><ul><li>假托: 伪装成另外一个人</li><li>诱饵: 例如散布免费但装有攻击程序的 U 盘等</li><li>相等补偿 (对等交换): 利用不想白占便宜的心理</li></ul><h2 id="chapter-2-物理安全"><a class="markdownIt-Anchor" href="#chapter-2-物理安全"></a> Chapter 2 物理安全</h2><h3 id="弹子锁"><a class="markdownIt-Anchor" href="#弹子锁"></a> 弹子锁</h3><p>上下弹子在同一直线上, 但并没连接在一起. 通过钥匙让所有上下弹子中间的缝隙对齐即可开锁. 详细的看书.</p><p><img src="20211230231444.png" alt="弹子锁"></p><h3 id="电子密码锁"><a class="markdownIt-Anchor" href="#电子密码锁"></a> 电子密码锁</h3><p>通过使用电磁铁或电机来操作锁, 开锁信号可由电子密码, 磁条卡, 智能卡, RFID标签, 生物识别等给出.</p><h3 id="常用的身份验证技术"><a class="markdownIt-Anchor" href="#常用的身份验证技术"></a> 常用的身份验证技术</h3><p>条形码: 一维的和二维的 (条的和方的)</p><p>磁条卡: 三条磁道 (分别是个人信息, 卡号以及未使用), 可以被直接复制</p><p>智能卡: 可以内带芯片, 便宜的可能只有存储器, 可能通过差分功耗分析泄露密钥 (不同操作消耗的功率不同)</p><p>SIM 卡: Subscriber Identity Module Card, 客户识别模块卡, 用于手机的智能卡, 标识了用户的身份和联系方式</p><p>RFID: 无线射频识别, 自带一个线圈作为天线, 可用于商品标签或护照等, 可使用跳码进行认证<br>生物特征识别: 特征需要满足普遍性, 独特性, 永久性和可收集性, 通过将特征量化为特征向量并和预先存储的参考向量比较完成识别</p><h3 id="imp-sim-卡安全及挑战响应协议"><a class="markdownIt-Anchor" href="#imp-sim-卡安全及挑战响应协议"></a> [IMP] SIM 卡安全及挑战响应协议</h3><ol><li>手机向本地基站发送 IMSI (国际移动客户身份, International Mobile Subscriber Identity)</li><li>基站检查数据库是否存在该 IMSI, 若存在则向手机发送128位随机数</li><li>手机使用存储在 SIM 卡中的 128 位密钥对随机数加密, 算法为 A3, 密文发送回基站</li><li>基站执行相同的计算, 若两个密文匹配, 则验证成功</li><li>SIM 卡通过 A8 算法生成 64 位密钥</li><li>此后所有的数据交换使用 A5 算法加密</li></ol><blockquote><p>A3 A5 A8 均为非公开的算法 (违背了开放式设计的原则), 较旧的 SIM 卡通过 COMP128-1 实现它们, 但均已被逆向工程攻破; 新版的称为 COMP128-2, 尚未被攻破</p></blockquote><p><img src="20220102171006.png" alt="GSM"></p><h3 id="针对计算机的直接攻击"><a class="markdownIt-Anchor" href="#针对计算机的直接攻击"></a> 针对计算机的直接攻击</h3><ul><li>环境攻击和事故: 电力, 温度, 短路 (水灾)</li><li>窃听: 搭线窃听 (光纤可以抵御)</li><li>射频辐射: 利用逸散的电磁波</li><li>光辐射</li><li>声音辐射: 例如按键声</li><li>硬件键盘记录器: 连接在键盘和计算机之间, 复制键盘输入的内容</li></ul><h3 id="针对-atm-的攻击"><a class="markdownIt-Anchor" href="#针对-atm-的攻击"></a> 针对 ATM 的攻击</h3><ul><li>黎巴嫩圈套: 将薄膜套插入卡槽, 欺骗客户发生了吞卡</li><li>分离器: 在卡槽上增加复制装置, 复制客户的卡片</li></ul><h2 id="chapter-3-操作系统的安全"><a class="markdownIt-Anchor" href="#chapter-3-操作系统的安全"></a> Chapter 3 操作系统的安全</h2><h3 id="进程的安全"><a class="markdownIt-Anchor" href="#进程的安全"></a> 进程的安全</h3><ul><li>从开始到结束的传递信任</li><li>监控, 管理和日志: 事件日志, 进程查看器等</li></ul><h3 id="内存和文件系统的安全"><a class="markdownIt-Anchor" href="#内存和文件系统的安全"></a> 内存和文件系统的安全</h3><ul><li>虚拟内存的安全: 虚拟内存保存了内存的信息, 但位于外部的硬盘上</li><li>身份验证: 盐的概念, 原理<ul><li>原理: 引入与用户ID相关的随机数作为哈希函数的输入值来增加搜索空间的大小</li><li>方法: 存储用户ID, ID 的盐值, 密码和盐值整体的哈希值</li></ul></li></ul><h3 id="imp-应用程序安全-p97"><a class="markdownIt-Anchor" href="#imp-应用程序安全-p97"></a> [IMP] 应用程序安全 [P97]</h3><ul><li>DLL 注入: 使用动态链接的程序依赖外部的动态链接库 (dll或者so文件), 因此可以通过共享库向程序注入代码</li><li>算术溢出: 利用补码表示时, 负数过小可能会溢出为很大的正数</li><li>缓冲区溢出攻击: 利用向长度限制不受检查的缓冲区写入大量数据来覆写内存, 进而修改代码或获得控制权限<ul><li>栈溢出 (覆写返回地址或在栈中插入指令串 (常称为 shellcode))</li><li>NOP 指令滑动</li><li>返回到 libc (利用加载的 libc 库中的函数进行攻击)</li><li>堆溢出</li></ul></li><li>格式化字符串攻击 (只给 printf 函数提供格式化字符串这一个参数, 这样它会把栈上的数据作为其余的参数, 原理见 <a href="https://signalshore.github.io/blog/Stack-Frames-in-x86.html">x86 栈帧</a>)</li><li>竞争条件</li></ul><h2 id="chapter-4-恶意软件"><a class="markdownIt-Anchor" href="#chapter-4-恶意软件"></a> Chapter 4 恶意软件</h2><h3 id="内部攻击的基本方式"><a class="markdownIt-Anchor" href="#内部攻击的基本方式"></a> 内部攻击的基本方式</h3><ul><li>后门: 程序中隐藏的功能或命令</li><li>逻辑炸弹: 根据特定的条件触发而已操作</li><li>防御方式<ul><li>避免单点故障, 不只让一个人负责重要系统</li><li>代码交叉检查</li><li>归档, 日志和报告</li><li>限制权限和授权</li><li>物理安全</li><li>监控员工与机器的行为</li></ul></li></ul><h3 id="imp-计算机病毒-木马和蠕虫-p120"><a class="markdownIt-Anchor" href="#imp-计算机病毒-木马和蠕虫-p120"></a> [IMP] 计算机病毒, 木马和蠕虫 [P120]</h3><ul><li>病毒四个阶段: 潜伏, 繁殖, 触发, 行动</li><li>病毒类型<ul><li>文件病毒 (程序病毒): 修改文件包含的对象代码</li><li>宏病毒 (文档病毒): 利用编辑器的宏功能, 当打开文档时启动病毒, 可以感染其他文档</li><li>引导区病毒: 修改引导区的代码, 这样每次系统启动或重启时都会运行病毒</li></ul></li><li>病毒防御<ul><li>特征码: 计算已知病毒的数字指纹, 然后对所有文件进行模式匹配</li><li>检测与隔离</li></ul></li><li>木马: 表面上执行有用的任务, 但会隐形地执行攻击任务</li><li>蠕虫: 不是计算机病毒, 不会感染其他程序, 通过传播自己的副本来扩散</li></ul><h3 id="rootkits"><a class="markdownIt-Anchor" href="#rootkits"></a> Rootkits</h3><ul><li>特别的, 隐形的恶意软件</li><li>通过修改系统程序或系统本身来防止检测<ul><li>例如使用钩子函数 (修改特定的函数)</li></ul></li><li>可以通过对系统文件进行校验来检测</li></ul><h3 id="零日攻击"><a class="markdownIt-Anchor" href="#零日攻击"></a> 零日攻击</h3><blockquote><p>就是经常看到的 0-day attack</p></blockquote><ul><li>利用此前未知或未公开的脆弱性进行攻击</li><li>特征码不能识别, 需要启发式的检测方法</li></ul><h3 id="僵尸网络"><a class="markdownIt-Anchor" href="#僵尸网络"></a> 僵尸网络</h3><ul><li>大量的被恶意软件控制的计算机组成的网络</li></ul><h3 id="入侵隐私软件"><a class="markdownIt-Anchor" href="#入侵隐私软件"></a> 入侵隐私软件</h3><ul><li>目标是用户的隐私或其他有价值的信息</li><li>例如广告软件, 间谍软件等</li></ul><h2 id="imp-chapter-5-网络安全-i"><a class="markdownIt-Anchor" href="#imp-chapter-5-网络安全-i"></a> [IMP] Chapter 5 网络安全 I</h2><h3 id="互联网的分层"><a class="markdownIt-Anchor" href="#互联网的分层"></a> 互联网的分层</h3><p>IP 的五层和 OSI 的七层, 直接看计网的图</p><p><img src="20210616190804.png" alt="Layers"></p><h3 id="以太网的概念"><a class="markdownIt-Anchor" href="#以太网的概念"></a> 以太网的概念</h3><p>既是指所用的物理介质 (通常来说是线缆), 也指链路层协议标准 IEEE 802.3</p><h3 id="imp-arp-欺骗-p155"><a class="markdownIt-Anchor" href="#imp-arp-欺骗-p155"></a> [IMP] ARP 欺骗 [P155]</h3><p>ARP 概念见 <a href="https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/#arp">计网复习-ARP</a></p><p>对于攻击目标的 ARP 请求, 如果我们能够在真正的目标计算机回应前抢先回复自己的 MAC 地址, 就可以修改攻击目标的 IP-MAC 映射表, 进而截获它的数据包, 由此可以进行中间人攻击.</p><ul><li>利用的 ARP 协议无身份验证的缺陷</li><li>可用静态 ARP 表防御 (提前指定好 IP-MAC 映射关系)</li></ul><h3 id="imp-ip-协议与-icmp-协议-p157"><a class="markdownIt-Anchor" href="#imp-ip-协议与-icmp-协议-p157"></a> [IMP] IP 协议与 ICMP 协议 [P157]</h3><p>详细的参见 <a href="https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/#chapter-20-ip%E5%8D%8F%E8%AE%AE">计网复习-IP</a> 和 <a href="https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/#icmp">计网复习</a></p><p>IP 协议:</p><ul><li>在网络层</li><li>尽力转发</li><li>存在子网掩码的概念</li></ul><p>ICMP 协议:</p><ul><li>网际控制消息协议</li><li>主要用于网络诊断消息</li><li>包含回显请求, 回显响应, 超时 (到达 TTL 限制, 数据包已不能继续传递), 目的不可达等</li><li>ping, tracert 依赖 ICMP 协议</li></ul><h3 id="imp-ip-地址欺骗-p161"><a class="markdownIt-Anchor" href="#imp-ip-地址欺骗-p161"></a> [IMP] IP 地址欺骗 [P161]</h3><ul><li>操作系统基本都提供了使用任意 IP 头信息发送报文的接口</li><li>IP 欺骗时, 发起者不能直接接收到返回的报文<ul><li>因为他的 IP 地址是伪造的</li><li>不过对于一些场合, 例如拒绝服务攻击没啥影响, 因为这时我们也不关心返回的内容</li></ul></li><li>可以通过配置路由器来阻止<ul><li>例如阻止转发源地址在域内, 但实际地址在域外的数据包</li></ul></li></ul><h3 id="数据包嗅探"><a class="markdownIt-Anchor" href="#数据包嗅探"></a> 数据包嗅探</h3><ul><li>由于大多数 IP 数据包没有加密, 因此可以进行嗅探 (获得同一网络下的流量)</li><li>网络接口在混杂模式下运行时, 会保留所有的帧而不检查 MAC 地址</li><li>使用交换机缩小网段可以缓解嗅探攻击</li></ul><h3 id="传输层协议"><a class="markdownIt-Anchor" href="#传输层协议"></a> 传输层协议</h3><p><a href="https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/#tcp-imp">TCP</a> 和 <a href="https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/#udp">UDP</a>, 细节看链接</p><p>TCP:</p><ul><li>Transmission Control Protocol, 传输控制协议</li><li>有流量控制, 通过滑动窗口协议实现</li><li>有拥塞控制</li><li>连接有状态, 有重传</li></ul><p>UDP:</p><ul><li>User Datagram Protocol, 用户数据报协议</li><li>无流量控制</li><li>无拥塞控制</li><li>连接无状态, 无重传</li></ul><h3 id="imp-tcp-会话劫持-p168"><a class="markdownIt-Anchor" href="#imp-tcp-会话劫持-p168"></a> [IMP] TCP 会话劫持 [P168]</h3><ul><li>会话欺骗: 创建伪造的会话<ul><li>尝试预测服务器给出的 SYN+ACK (第二次握手) 中的序列号, 然后作为 ACK (第三次握手) 的确认号, 并配合 IP 地址伪造</li><li>如果成功, 可以以受害者的 IP 地址的身份和服务器建立连接</li><li>由于初始序列号的产生是可预测的, 因此攻击是可能的</li></ul></li><li>盲注入: 使用 IP 伪造, 无法接受回应, 但可以使用请求者的 IP 地址对应的身份执行命令</li><li>ACK 风暴: 盲注入后双方会尝试同步, 会循环发送大量 ACK</li><li>完全会话劫持: 利用嗅探获取序列号, 可以配合 ARP 欺骗实现中间人攻击</li></ul><h3 id="imp-拒绝服务攻击-p170"><a class="markdownIt-Anchor" href="#imp-拒绝服务攻击-p170"></a> [IMP] 拒绝服务攻击 [P170]</h3><blockquote><p>Denial of Service, DoS, 拒绝服务攻击</p></blockquote><p>利用连接容量有限的特点, 发起大量连接使得服务器无法运行</p><p>可以配合 IP 地址伪造</p><h3 id="imp-ip-地址回溯-p175"><a class="markdownIt-Anchor" href="#imp-ip-地址回溯-p175"></a> [IMP] IP 地址回溯 [P175]</h3><ul><li>尝试确定数据包的真实来源 (因为源 IP 可能是伪造的)</li><li>利用数据包标记: 每个路由器都是概率性地 (或确定性地) 对数据包做出标记<ul><li>这样, 若被最接近受害者路由器标记的概率为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span>, 则被上一层标记的概率应当为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p \times (1-p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></li><li>通过比例递推可以确定路径</li></ul></li><li>实际中能够实现的很少, 因为实际上是在网络层解决网络层的认证问题</li></ul><blockquote><p>想想也是, 这成功听起来就是概率性的</p></blockquote><h2 id="imp-chapter-6-网络安全-ii-p180"><a class="markdownIt-Anchor" href="#imp-chapter-6-网络安全-ii-p180"></a> [IMP] Chapter 6 网络安全 II [P180]</h2><h3 id="imp-dns-原理-p183"><a class="markdownIt-Anchor" href="#imp-dns-原理-p183"></a> [IMP] DNS 原理 [P183]</h3><blockquote><p>DNS, Domain Name System, 域名系统</p></blockquote><ul><li>DNS 用来实现域名 (例如 <a href="http://www.example.com">www.example.com</a>) 和 IP 地址 (<code>93.184.216.34</code> 或者 <code>2606:2800:220:1:248:1893:25c8:1946</code>, 后者是 IPv6 地址) 间的映射<ul><li>后者到前者称为反向查询</li></ul></li><li>DNS 是分层的, 从上往下是根域名服务器, 权威域名服务器, 非权威域名服务器</li><li>查询过程 (以 <a href="http://www.example.com">www.example.com</a> 为例, 递归方式):<ul><li>首先, 客户端和自己保存的 DNS 服务器 S 查询 (通常是 ISP 分配的, 也可手动指定)</li><li>S 检查缓存, 如果有且没过期直接返回, 否则开始递归查询</li><li>S 首先向根域名服务器发送 DNS 查询, 得到 .com 的权威域名服务器的地址</li><li>S 继续向 .com 的域名服务器查询 <a href="http://example.com">example.com</a>, 得到 <a href="http://example.com">example.com</a> 域名服务器的地址</li><li>S 继续查询, 得到 <a href="http://www.example.com">www.example.com</a> 的地址</li><li>S 缓存这个来之不易的结果, 然后给客户端返回</li></ul></li></ul><h3 id="imp-dns-攻击-p185"><a class="markdownIt-Anchor" href="#imp-dns-攻击-p185"></a> [IMP] DNS 攻击 [P185]</h3><ul><li>将正确的域名指向错误的 IP 地址</li><li>DNS 缓存中毒: 欺骗并使其缓存错误的结果<ul><li>例如要针对 x.y 域名进行攻击:<ul><li>首先对 DNS 服务器发送查询 x.y 的请求</li><li>利用 IP 地址伪造, 伪装成权威域名服务器的源地址, 向 DNS 服务器发送恶意的 IP 地址 p, p 是一个恶意的 DNS 服务器, 会把地址解析到钓鱼网站等</li><li>DNS 服务器缓存了错误的结果, 现在对于 y 的请求都会被 p 操控</li><li>利用了 DNS 协议无身份验证的缺陷 (后来有了 DNSSec)</li></ul></li><li>对客户端也可发动</li></ul></li></ul><h3 id="防火墙技术"><a class="markdownIt-Anchor" href="#防火墙技术"></a> 防火墙技术</h3><ul><li>防火墙对数据包的处理方式: 接受, 丢弃 (不允许通过且无失败指示), 拒绝 (不允许通过且有失败提示)</li><li>无状态防火墙: 只针对当前正在处理的数据包, 不维护任何上下文<ul><li>开销小, 实现简单, 不能区分当前数据包是否是对前一个特定数据报的响应</li></ul></li><li>有状态防火墙: 记录每个连接的信息<ul><li>可以实行更严格的管控, 可以实现深度数据包检测</li></ul></li></ul><h3 id="imp-隧道-p195"><a class="markdownIt-Anchor" href="#imp-隧道-p195"></a> [IMP] 隧道 [P195]</h3><ul><li>在客户端和服务器端自动加解密</li><li>不需要修改应用程序</li><li>增加了 IP 协议栈的开销</li></ul><h4 id="imp-安全的-shell-p196"><a class="markdownIt-Anchor" href="#imp-安全的-shell-p196"></a> [IMP] 安全的 Shell [P196]</h4><blockquote><p>Secure Shell, SSH, 即安全的 Shell</p></blockquote><ul><li>建立了一个安全的隧道</li><li>建立方式:<ul><li>客户端通过 TCP 连接到服务器, 交换连接信息 (加密算法, 协议版本等)</li><li>进行密钥交换, 创建共享的秘密会话密钥 (注意不是加密算法), 并加密之后所有的通信 (通常用块加密, 例如 AES, Blowfish 等)</li><li>服务器向客户端发送可接受的身份验证方法, 客户端进行尝试<ul><li>如果是公钥认证, 客户端向服务器发送自己保存的公钥</li><li>服务器检查该公钥是否在自己存储的已授权的密钥列表中<ul><li>如果不在则要求客户端换个公钥 (这个公钥不是对这台服务器的)</li><li>如果在, 则使用公钥加密挑战 (一个随机的字符串)</li><li>客户端使用私钥解密挑战, 并向服务器返回响应</li><li>若两者结果一致, 则身份验证成功, 服务器允许客户端访问</li></ul></li></ul></li></ul></li></ul><h4 id="imp-ipsec-p197"><a class="markdownIt-Anchor" href="#imp-ipsec-p197"></a> [IMP] IPSec [P197]</h4><ul><li>配合 IPv6, 但是 IPv4 也可使用</li><li>两种模式: 传输模式, 隧道模式<ul><li>传输模式: 在原数据包的有效载荷前插入 IPSec 头信息, 只对有效载荷进行加密或验证</li><li>隧道模式: 构建新的数据包, 将 IPSec 头信息和整个原数据包作为新数据包的有效载荷<ul><li>常用于创建 VPN</li></ul></li></ul></li></ul><h3 id="虚拟专用网络"><a class="markdownIt-Anchor" href="#虚拟专用网络"></a> 虚拟专用网络</h3><blockquote><p>Virtual Private Network, VPN</p></blockquote><ul><li>远程访问 VPN: 允许在互联网另一端的用户访问内网</li><li>站点到站点的 VPN: 安全地桥接两个网络</li><li>结合隧道技术, 可以对数据进行封装与加密, 避免防火墙的检测<ul><li>但防火墙仍然可以直接阻断</li></ul></li></ul><h3 id="入侵检测"><a class="markdownIt-Anchor" href="#入侵检测"></a> 入侵检测</h3><blockquote><p>入侵检测系统, IDS, Intrusion Detection System</p></blockquote><ul><li>实时地检测威胁</li><li>传统的网络入侵检测: 位于边界, 基于流量和内容</li><li>基于协议的入侵检测系统: 专门检测特定协议的恶意行为</li><li>基于主机的入侵检测系统: 检测单个主机上的活动</li><li>存在误报和漏报</li></ul><h2 id="chapter-7-web-安全"><a class="markdownIt-Anchor" href="#chapter-7-web-安全"></a> Chapter 7 Web 安全</h2><h3 id="网络钓鱼"><a class="markdownIt-Anchor" href="#网络钓鱼"></a> 网络钓鱼</h3><ul><li>利用用户不会仔细检查网页的特点, 创建与真实页面十分相似的虚假页面</li><li>伪造的 URL 一般与真实网站不同 (除非对 DNS 或缓存进行攻击), 但十分相似 (利用 Unicode 中相似的字符) -&gt; URL 混淆</li><li>点击劫持: 看上去是 A 的超链接, 但实际指向 B</li><li>利用媒体内容的脆弱性 (例如 Flash, ActiveX 控件 和 Java Applet)</li></ul><h3 id="imp-xss-跨站脚本-p239"><a class="markdownIt-Anchor" href="#imp-xss-跨站脚本-p239"></a> [IMP] XSS (跨站脚本) [P239]</h3><blockquote><p>cross-Site Scripting, XSS</p></blockquote><ul><li>通过未经过滤的输入向网站上注入代码<ul><li>利用 JavaScript</li></ul></li><li>持久性 XSS: 攻击者注入的代码会在网站上保留一段时间, 且对其他用户可见</li><li>非持久性 XSS: 注入的代码不会持久保留</li><li>可以窃取用户的 Cookie, 重定向到恶意网站等</li><li>通过过滤和检测可以防御</li></ul><h3 id="跨站请求伪造"><a class="markdownIt-Anchor" href="#跨站请求伪造"></a> 跨站请求伪造</h3><blockquote><p>CSRF, Cross-Site Request Foegery</p></blockquote><ul><li>利用网站信任的特定用户</li><li>让受害者在不知情的情况下在恶意网站上执行命令, 然后恶意网站向受攻击的网站发送恶意请求</li></ul><h3 id="imp-sql-注入-p251"><a class="markdownIt-Anchor" href="#imp-sql-注入-p251"></a> [IMP] SQL 注入 [P251]</h3><ul><li>利用拼接 SQL 查询时不对某些字段的值进行校验的漏洞, 构造能获取 (或修改) 其他信息的查询</li><li>可以删库跑路, 还可以绕过身份验证</li><li>可以检查输入是否为合法的值, 并去除危险字符 (例如引号和斜杠等) 来防御</li></ul><h2 id="chapter-8-加密-密码学概述"><a class="markdownIt-Anchor" href="#chapter-8-加密-密码学概述"></a> Chapter 8 加密 (密码学概述)</h2><h3 id="对密码系统攻击的类型"><a class="markdownIt-Anchor" href="#对密码系统攻击的类型"></a> 对密码系统攻击的类型</h3><ul><li>唯密文攻击: 已拥有一个或多个使用相同的密钥加密的密文</li><li>已知明文攻击: 已拥有一个或多个使用相同的密钥的明文-密文对</li><li>选择明文攻击: 可以选择一个或多个明文, 根据相同的密钥得到各自对应的密文<ul><li>离线选择明文攻击: 必须事先选择好所有的明文</li><li>自适应选择明文攻击: 可以以迭代的形式逐个选择明文</li></ul></li><li>选择密文攻击: 选择一个或多个使用相同密钥得到的密文, 得到各自对应的明文<ul><li>同样有离线和自适应的版本</li></ul></li></ul><h3 id="替换密码和频率分析"><a class="markdownIt-Anchor" href="#替换密码和频率分析"></a> 替换密码和频率分析</h3><ul><li>替换密码: 将每个字母按规律替换为其他字母<ul><li>例如凯撒密码</li><li>若替换单位是字母组, 则为多字母替换密码, 替换规律称为替换盒, 或称 <strong>S 盒</strong></li></ul></li><li>维吉尼亚密码: 利用密钥决定不同字母替换时的偏移量<ul><li>例如密钥为<code>XYZ</code>, 则分别用<code>X</code> <code>Y</code> <code>Z</code>三行的偏移量进行替换</li><li>同样是替换密码 (相当于按照密钥长度分段, 段内的不同字母间是偏移量不同的凯撒密码, 但<strong>段间偏移量的模式相同</strong>)</li><li>如果密文中出现了相同的模式, 则根据重复部分间隔的长度可以推断出可能的密钥长度, 进而按照凯撒密码进行破解</li></ul></li><li>频率分析: 不同字母在文本中出现的概率通常不等</li></ul><h3 id="一次一密-otp"><a class="markdownIt-Anchor" href="#一次一密-otp"></a> 一次一密 (OTP)</h3><blockquote><p>OTP, One-Time Pad, 一次性密码本 (注意不是一次性密码 Password, 这是不同的概念)</p></blockquote><ul><li>如果能做到以下两点, 则无法进行频率分析<ul><li>密钥块的长度与明文长度相等 (单次加密不需要反复循环使用同一个密钥)</li><li>每次的偏移量完全随机, 即密钥不重复</li></ul></li><li>这就是一次性密码<strong>本</strong></li><li>弱点: 必须要求密钥完全不重用</li></ul><h3 id="分组密码"><a class="markdownIt-Anchor" href="#分组密码"></a> 分组密码</h3><blockquote><p>Block Cipher, 也称作块密码</p></blockquote><p>将明文划分为固定大小的分组 (如果最后一个分组长度不够, 通常会用特定算法补齐, 例如<code>PKCS5</code>, <code>PKCS7</code> 等), 然后对分组进行操作</p><h3 id="aes-算法"><a class="markdownIt-Anchor" href="#aes-算法"></a> AES 算法</h3><blockquote><p>AES, Advanced Encryption Standard, 高级加密标准</p></blockquote><ul><li><strong>是分组密码</strong>, 分组大小固定为 128 位</li><li>密钥长度可以是 128, 192 或者 256 位</li><li>一共有十轮处理, 每轮包含四步:<ul><li>S-盒替换</li><li>置换 (移动行)</li><li>矩阵乘法 (打乱列)</li><li>使用从密钥派生的轮密钥进行异或</li></ul></li><li>为了加速计算, 使用了查找表实现从字节到整数的映射<ul><li>存在定时攻击的可能: Cache 会保存存储表中使用了的表项, 这时访问这些表项比访问不在 Cache 中的快</li><li>可以让 AES 的执行时间固定来防御定时攻击</li></ul></li><li>仅有旁路攻击 (侧信道攻击) 是对 AES 的实际攻击</li></ul><h3 id="分组密码的操作模式"><a class="markdownIt-Anchor" href="#分组密码的操作模式"></a> 分组密码的操作模式</h3><ul><li>电子密码本模式 (ECB): Electronic CodeBook mode<ul><li>对每个分组进行独立加密</li><li>优点: 简单, 可允许分组丢失</li><li>缺点: 相同的分组加密后的内容相同, 分组数量较多时会泄露明文的模式</li></ul></li><li>密码分组链接 (CBC): Cipher-Block Chaining mode<ul><li>第一个分组先和初始化向量 (Initialization Vector, IV) 异或, 然后再加密; 此后的每一个分组先和上一个分组的密文异或再加密</li><li>优点: 不会泄露明文的模式, 可允许分组丢失</li><li>缺点: 必须顺序加密 (但是可以并行解密, 因为异或依赖的是密文)</li></ul></li><li>密码反馈 (CFB): Cipher FeedBack mode<ul><li>类似 CBC, 但是先加密前一个密文, 然后再和这个明文分组异或作为密文</li><li>优点: 比 CBC 快</li></ul></li><li>输出反馈 (OFB): Output FeedBack mode<ul><li>从初始化向量开始, 加密后作为下一个向量; 每一级的明文和对应的向量异或作为密文</li><li>优点: 能容忍密文丢失, 如果能有向量序列则加解密均可并行</li></ul></li><li>计数器模式 (CTR): CounTeR mode<ul><li>类似 OFB, 从一个随机种子 s 开始, 第 i 个偏移向量是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub><mo>=</mo><msub><mi>E</mi><mi>k</mi></msub><mo stretchy="false">(</mo><mi>s</mi><mo>+</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V_i = E_k(s+i-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>, 明文和向量异或后作为密文</li><li>优点: 向量的生成和加解密均可并行, 可容忍分组丢失</li></ul></li></ul><h3 id="流密码"><a class="markdownIt-Anchor" href="#流密码"></a> 流密码</h3><ul><li>将明文看作字符串或者二进制位串, 然后逐字符或逐位进行加密 (简单的异或即可)</li><li>为了防止密钥穷举, 使用和明文一样长的密钥流</li><li>重点在于如何从有限长度的密钥中产生任意长度的密钥流, 例如使用线性同余发生器</li></ul><h3 id="数论基础"><a class="markdownIt-Anchor" href="#数论基础"></a> 数论基础</h3><h4 id="辗转相除法-欧几里得算法"><a class="markdownIt-Anchor" href="#辗转相除法-欧几里得算法"></a> 辗转相除法 (欧几里得算法)</h4><ul><li>用来计算两个数 a b 的最大公约数 (GCD, Greatest Common Divisor)</li><li>原理: 两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数, 即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd(a, b) = gcd(b, a \mod b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span></li><li>步骤:<ul><li>设 a &gt; b, 判断 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>b</mi><mo>=</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">a \mod b == 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 是否成立<ul><li>若否, 则让 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>=</mo><mi>a</mi><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>b</mi></mrow><annotation encoding="application/x-tex">b = a \mod b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span></span></span></span>, a 为 b 的初值</li><li>若是, 则 b 为 GCD</li></ul></li></ul></li></ul><h4 id="费马定理和欧拉定理"><a class="markdownIt-Anchor" href="#费马定理和欧拉定理"></a> 费马定理和欧拉定理</h4><ul><li>费马小定理: 设 p 为素数, g 为小于 p 的任意正整数, 则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>g</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>p</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">g^{p-1} \mod p = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li>欧拉定理: x, n 为任意正整数, 且互质, 则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mrow><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x^{\Phi(n)} \mod n = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Φ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Φ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 称作欧拉函数, 它的值等于 “不大于 n 的范围中的素数的个数”</li><li>欧拉定理是费马小定理的扩展</li></ul></li></ul><h3 id="rsa-算法"><a class="markdownIt-Anchor" href="#rsa-算法"></a> RSA 算法</h3><ul><li>密钥产生:<ul><li>公钥: 选择两个大素数 p q, 令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mo>×</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">n = p \times q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>, 选择一个和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Φ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 互质的数 e, 计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d = e^{-1} \mod \Phi(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Φ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>, 则公钥为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>e</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(e, n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 对<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mn>1</mn></msub></mfrac><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mn>2</mn></msub></mfrac><mo stretchy="false">)</mo><mo>⋯</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><msub><mi>p</mi><mi>n</mi></msub></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Phi(n) = n(1-\frac{1}{p_1})(1-\frac{1}{p_2})\cdots(1-\frac{1}{p_n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Φ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.326216em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span>, 其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">p_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为 n 的质因子</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>×</mo><mi>e</mi><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≡</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d\times e \mod \Phi(n) \equiv 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Φ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li>n 的二进制长度即为位数, 通常为 1024 或者 2048 位</li><li>实际中 e 常取值 65537</li></ul></li><li>私钥: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n, d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span> 对为私钥</li></ul></li><li>加密过程: 设明文为 M, 密文为 C, 则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><msup><mi>M</mi><mi>e</mi></msup><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">C = M^e \mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span></li><li>解密过程: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mo>=</mo><msup><mi>C</mi><mi>d</mi></msup><mspace></mspace><mspace width="0.6666666666666666em"></mspace><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">M = C^d \mod n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span><span class="mord mathrm">o</span><span class="mord mathrm">d</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span></li></ul><h3 id="散列函数-哈希函数"><a class="markdownIt-Anchor" href="#散列函数-哈希函数"></a> 散列函数 (哈希函数)</h3><ul><li>将输入 (通常称为"消息") 映射到固定长度的输出字符串, 同时提供确定性, 单向性和抗冲突性</li><li>抗冲突性: 由于输出长度可以大于输出长度, 所以必定存在冲突<ul><li>强抗冲突性: 很难构造两个不同的输入, 使得输出一样</li><li>弱抗冲突性: 很难构造一个输入, 使得输出等于一个已知的输入的输出</li></ul></li><li>存在针对 MD5 的攻击, 对于两个不同的输入可以构造两个后缀, 使得两组 (消息+后缀) 的哈希值一样</li></ul><h3 id="生日攻击"><a class="markdownIt-Anchor" href="#生日攻击"></a> 生日攻击</h3><ul><li>用来攻击哈希函数</li><li>对于输出为 b 位的哈希函数 H, 可能的输出有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">2^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span></span></span> 种</li><li>但如果生成大量的随机消息并计算散列值, 则找到两条散列值一样的消息实际上和两个人生日一样的原理相同</li><li>所以尝试的消息数可以降低到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>b</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{b/2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mtight">/</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></li><li>因此, 通常根据输出大小的一半来考虑加密散列函数的安全, 例如输出为 256 位的 H 安全性是 128 位</li></ul><p>具体来说, 对于输出为 b 位的哈希函数 H, 可能的输出有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>=</mo><msup><mn>2</mn><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">m = 2^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span></span></span> 种</p><p>则攻击者生成的第 i 个消息与前面 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 条消息冲突的概率为 $$1-\frac{i-1}{m}$$</p><p>在 k 轮后, 仍然没有冲突的概率为 $$F_k = (1-\frac{1}{m}) + (1-\frac{2}{m}) + \dots + (1-\frac{k-1}{m})$$</p><p>考虑到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mi>x</mi><mo>≈</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><annotation encoding="application/x-tex">1-x \approx e^{-x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.48312em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span>, 则 $$F_k \approx e ^{-(\frac{1}{m} + \frac{2}{m} + \dots + \frac{k-1}{m})} = e^{\frac{k(k-1)}{m}}$$</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>k</mi></msub><mo>=</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">F_k = 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>, 即成功概率达到一半时, 代入上式得 $$k \approx 1.17 \sqrt{m}$$</p><p>而 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>m</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">m</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span> 的二进制位数是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>b</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{b}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>, 也就是输出位数的一半, 证明了生日攻击的存在</p><h3 id="消息认证码"><a class="markdownIt-Anchor" href="#消息认证码"></a> 消息认证码</h3><blockquote><p>消息认证码, Message Authentication Code, 和 MAC 地址没关系</p></blockquote><ul><li>确保不安全信道所传输的消息的完整性和机密性</li><li>普通的哈希函数不能直接用作消息认证函数<ul><li>设密钥为 K, 消息为 M, 将 (K||M), (M||K), (K||M||K) 作为输入都是不安全的</li></ul></li><li>基于哈希函数的消息认证码 (HMAC) 可以解决<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>K</mi><mo>⊕</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>H</mi><mo stretchy="false">(</mo><mi>K</mi><mo>⊕</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>M</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(K \oplus A || H(K \oplus B || M))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>, 其中 A B 为常数</li><li>安全性等价于底层使用的哈希函数 H 的安全性</li></ul></li><li>哈希链: 从随机数 r 开始重复进行密码学哈希计算<ul><li>得到的序列是伪随机的</li><li>可用作一次一密的密码 (One Time Password)</li><li>推广可得哈希树</li></ul></li><li>验证链: 作为增量数据的验证方案<ul><li>设 x 为认证码, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x_{n+1} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mi>H</mi><mo stretchy="false">(</mo><msub><mi>P</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext>&nbsp;</mtext><mi>i</mi><mo>∈</mo><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_i = H(P_i||x_{x+1}), where \ i \in (n, \dots , 1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace">&nbsp;</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li><li>首先传输签名 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>然后传输数据包 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>P</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(P_i, x_{i+1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, P 为信息, 每个数据包包含下一个包的哈希值</li><li>每个哈希值的完整性需要余下的哈希值作为保证</li><li>常数级开销 (每个明文一次哈希)</li></ul></li></ul><h2 id="chapter-9-安全模型与实践"><a class="markdownIt-Anchor" href="#chapter-9-安全模型与实践"></a> Chapter 9 安全模型与实践</h2><h3 id="kerberos-架构"><a class="markdownIt-Anchor" href="#kerberos-架构"></a> Kerberos 架构</h3><ul><li>票据:<ul><li>票据授予票据 (Ticket-Granting Ticket, TGT): 用户和会话密钥的全局标识符</li><li>服务票据 (Service Ticket): 对用户的请求进行验证, 确定用户能否使用特定服务</li></ul></li><li>使用独立的, 受信任的第三方作为密钥分发中心 (Key Distribution Center, KDC), 包含两部分<ul><li>身份验证服务器 (Authentication Server, AS), 保存着用户和服务密钥, 对用户提供的密码进行哈希得到用户的密钥</li><li>票据授予服务器 (Ticket-Granting Server, TGS)</li><li>两部分独立</li></ul></li><li>旨在对整个网络进行集中的身份验证, 即使 KDC 被入侵用户密码仍然保密 (只保存了密码的哈希)</li></ul><h3 id="kerberos-身份验证"><a class="markdownIt-Anchor" href="#kerberos-身份验证"></a> Kerberos 身份验证</h3><p><img src="20220106183216.png" alt="Kerberos Authentication"></p><ul><li>除了最开始的请求没有明文信息, 不过这个请求本身也不包含敏感信息</li><li>所有的票据都有时间戳, 可以抗重放攻击</li><li><strong>优点</strong>: 在不安全的网络中仍然安全, 抗重放攻击, 使用对称加密 (更高效)</li><li><strong>缺点</strong>: 存在单点故障的可能 (KDC 挂了整个系统就无法工作了), 需要同步时钟 (票据都有时间戳)</li></ul>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</category>
      
      <category domain="https://horizonchaser.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AE%89%E5%85%A8%E5%AF%BC%E8%AE%BA/">计算机安全导论</category>
      
      <category domain="https://horizonchaser.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/">密码学</category>
      
      
      <comments>https://horizonchaser.github.io/2022/03/10/Computer%20Security%20Introduction%20Review/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>长安杯2021 Writeup</title>
      <link>https://horizonchaser.github.io/2021/10/26/%E9%95%BF%E5%AE%89%E6%9D%AF2021-Writeup/</link>
      <guid>https://horizonchaser.github.io/2021/10/26/%E9%95%BF%E5%AE%89%E6%9D%AF2021-Writeup/</guid>
      <pubDate>Tue, 26 Oct 2021 23:26:23 GMT</pubDate>
      
      <description>长安杯2021的wp</description>
      
      
      
      <content:encoded><![CDATA[<p>20211024 长安杯的 WP</p><p><s>又是学到很多的一次</s></p><p>晚些时候会更新</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81/">电子取证</category>
      
      <category domain="https://horizonchaser.github.io/tags/writeup/">writeup</category>
      
      <category domain="https://horizonchaser.github.io/tags/2021/">2021</category>
      
      
      <comments>https://horizonchaser.github.io/2021/10/26/%E9%95%BF%E5%AE%89%E6%9D%AF2021-Writeup/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSAPP 第三章 笔记</title>
      <link>https://horizonchaser.github.io/2021/08/31/CSAPP-Chap3-%E7%AC%94%E8%AE%B0/</link>
      <guid>https://horizonchaser.github.io/2021/08/31/CSAPP-Chap3-%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Tue, 31 Aug 2021 21:41:22 GMT</pubDate>
      
      <description>CSAPP 第三章的笔记, 包括初级汇编</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>CSAPP 采用的是 x64 ATT 汇编, 然而平时用的 IDA 什么的都是 MASM 汇编… 有点头大<br>话说回来, 都会肯定不是坏事… 大概</p></blockquote><!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} --><!-- code_chunk_output --><ul><li><a href="#%E7%BC%96%E8%AF%91-%E6%B1%87%E7%BC%96%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96">编译 汇编与反汇编</a><ul><li><a href="#%E7%BC%96%E8%AF%91">编译</a></li><li><a href="#%E5%8F%8D%E6%B1%87%E7%BC%96">反汇编</a></li></ul></li><li><a href="#%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E5%88%9D%E6%AD%A5">汇编语言 初步</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F">数据格式</a></li><li><a href="#%E5%85%B3%E4%BA%8E-lea-%E6%8C%87%E4%BB%A4">关于 LEA 指令</a></li><li><a href="#%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD">条件判断</a><ul><li><a href="#cmp-%E6%8C%87%E4%BB%A4">CMP 指令</a></li><li><a href="#test-%E6%8C%87%E4%BB%A4">TEST 指令</a></li></ul></li><li><a href="#switch-%E7%9A%84%E5%AE%9E%E7%8E%B0">switch 的实现</a></li></ul></li><li><a href="#%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92">调用过程间的数据传递</a><ul><li><a href="#%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB">缓冲区溢出攻击</a><ul><li><a href="#%E4%B8%80%E4%B8%AA%E5%A4%B1%E8%B4%A5%E7%9A%84%E4%BE%8B%E5%AD%90">一个失败的例子</a></li></ul></li><li><a href="#%E5%AF%B9%E6%8A%97%E6%8E%AA%E6%96%BD">对抗措施</a></li></ul></li></ul><!-- /code_chunk_output --><h1 id="编译-汇编与反汇编"><a class="markdownIt-Anchor" href="#编译-汇编与反汇编"></a> 编译 汇编与反汇编</h1><h2 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h2><p><code>gcc -Og -o [output file] [source files]</code></p><p>包括四个步骤: 预处理, 编译, 汇编, 链接</p><ul><li><strong>预处理</strong><ul><li>把 <code>#</code> 开头的预处理指令展开, 比如头文件展开, 宏展开</li><li>处理完了也是 <code>*.c</code> 或者 <code>*.cpp</code></li><li><code>gcc -E [source files] -o [output file]</code></li></ul></li><li><strong>编译</strong><ul><li>把预处理完的源代码转化成汇编代码</li><li>对于 <code>gcc</code>, 默认是 ATT 格式, 用 <code>-masm=intel</code> 指定采用 Intel 格式</li><li><code>gcc -S &lt;source&gt;.c -o &lt;output&gt;.s</code></li></ul></li><li><strong>汇编</strong><ul><li>把汇编代码转为二进制的目标文件</li><li><code>gcc -c &lt;source&gt;.c -o &lt;output&gt;.o</code></li></ul></li><li><strong>链接</strong><ul><li>将该目标文件与其他目标文件、库文件、启动文件等链接起来生成可执行文件</li><li><code>gcc &lt;object&gt;.o -o &lt;executable&gt;</code></li></ul></li></ul><h2 id="反汇编"><a class="markdownIt-Anchor" href="#反汇编"></a> 反汇编</h2><p>用 <code>objdump</code></p><ul><li><code>-d &lt;file(s)&gt;</code>: 将代码段反汇编</li><li><code>-S &lt;file(s)&gt;</code>: 将代码段反汇编的同时，将反汇编代码与源代码交替显示<ul><li>编译时需要使用-g- 参数，生成调试信息</li></ul></li><li><code>-C &lt;file(s)&gt;</code>: 将C++符号名逆向解析</li><li><code>-l &lt;file(s)&gt;</code>: 反汇编代码中插入文件名和行号</li><li><code>-j section &lt;file(s)&gt;</code>: 仅反汇编指定的section</li></ul><h1 id="汇编语言-初步"><a class="markdownIt-Anchor" href="#汇编语言-初步"></a> 汇编语言 初步</h1><h2 id="数据格式"><a class="markdownIt-Anchor" href="#数据格式"></a> 数据格式</h2><blockquote><p>为什么一个字是两字节?</p><p>实际上, 一个字并不一定是两个字节 - 比如 ARM 的 NEON 指令集下, 一个字就是 32 位 (四字节). 但是在 x86/x64 环境下, 一个字规定为两字节, 从 8086 开始就是这样了<br>另外, 一个字节也不一定是 8 位…</p><p>Reference: <a href="https://stackoverflow.com/questions/28066462/how-many-bits-is-a-word">StackOverflow</a></p></blockquote><table><thead><tr><th>名称</th><th>长度 (字节)</th><th>ATT格式后缀</th><th>MASM中的类型</th></tr></thead><tbody><tr><td>字节</td><td>1</td><td>b</td><td>BYTE</td></tr><tr><td>字</td><td>2</td><td>w</td><td>WORD</td></tr><tr><td>双字</td><td>4</td><td>l</td><td>DWORD</td></tr><tr><td>四字</td><td>8</td><td>q</td><td>QWORD</td></tr></tbody></table><h2 id="关于-lea-指令"><a class="markdownIt-Anchor" href="#关于-lea-指令"></a> 关于 LEA 指令</h2><p><code>lea</code> 指令名为 “加载有效地址” (load effective address), 实际上也可以进行简单的四则运算 (利用那些繁杂但必要的寻址方式).</p><p>相对于使用多条<code>add</code> <code>sub</code>指令, 简单的四则运算用 <code>lea</code> 显然更便捷 - 这个时候和地址计算就没任何关系了</p><blockquote><p>这点坑了我半天</p></blockquote><h2 id="条件判断"><a class="markdownIt-Anchor" href="#条件判断"></a> 条件判断</h2><h3 id="cmp-指令"><a class="markdownIt-Anchor" href="#cmp-指令"></a> CMP 指令</h3><p>和 <code>SUB</code> 进行的运算一样, 但不改变操作数寄存器的值</p><h3 id="test-指令"><a class="markdownIt-Anchor" href="#test-指令"></a> TEST 指令</h3><p>和 <code>AND</code> 进行的运算一样, 但不改变操作数寄存器的值</p><p>所以 <code>test %rax, %rax</code> 这类两个操作数相同的指令可以用来<strong>判断其值的正负</strong></p><h2 id="switch-的实现"><a class="markdownIt-Anchor" href="#switch-的实现"></a> switch 的实现</h2><p>在分支较多且数值较为接近的时候<strong>可能</strong>会采用跳转表</p><h1 id="调用过程间的数据传递"><a class="markdownIt-Anchor" href="#调用过程间的数据传递"></a> 调用过程间的数据传递</h1><p>在 x86-64 中, 前六个参数可以通过寄存器传递, 从左到右顺序为 <code>rdi rsi rdx rcx r8~r15</code></p><p><code>rbx rbp r12~r15</code> 为<strong>被调用者保存的寄存器</strong>, 也就是被调用者需要保证在被调用前后这些寄存器的值不变; 其他所有寄存器 (<code>rbp</code> 除外) 为调用者保存的寄存器, 也就是说, 被调用者可以修改这些寄存器的值, 因此调用者在调用其他函数前应先由自己保护好它们.</p><p>如果参数多于六个 <s>(什么函数会这么写啊…)</s>, 剩下的参数按照从左到右的顺序依次压入栈中 (记得保证对齐), 然后再把调用者的返回地址入栈即可.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plain">     Bottom<br>     (HIGH)<br>+---------------+---------+<br>|               |         v<br>|  parameters   |     Frame of<br>|     7~n       |      caller<br>+---------------+         ^<br>|  return addr  |         |<br>+---------------+---------+<br>|               |         |<br>|    saved      |         |<br>|  regesiters   |         |<br>|  (rbp rbx..)  |         |<br>|               |<br>+---------------+         |<br>|               |         v<br>|  local vars   |     Frame of<br>|               |      callee<br>+---------------+         ^<br>|               |         |<br>| para for next |         |<br>|   function    |         |<br>|               |         |<br>+---------------+---------+<br>      Top<br>     (LOW)<br></code></pre></td></tr></tbody></table></figure><p>另外, 当参数为数组, 或函数中使用到了参数的地址, 这些参数也会保存在栈中, 例如下图</p><p><img src="20210903234411.png" alt="demo"></p><blockquote><p>根据书上的说法, 当参数为结构体时也会将其保存到栈中, 但根据测试对于较为简单的结构体, 编译器仍然会将其保存到寄存器中, 参见 <a href="https://godbolt.org/z/ax8666aGn">GodBolt的结果</a></p></blockquote><p>注意, <strong>这些保存到栈中的参数, 和 调用者的返回地址 都属于调用者的栈帧</strong></p><h2 id="缓冲区溢出攻击"><a class="markdownIt-Anchor" href="#缓冲区溢出攻击"></a> 缓冲区溢出攻击</h2><p>我们注意到, 返回地址在局部变量的 “上方” (指较高地址的位置), 所以如果我们通过对局部变量进行构造好的且足够长的赋值, 就有可能把返回地址覆盖掉. 这样, 当函数返回时就会跳转到我们指定的地址, 实现控制.</p><p>容易想到, 一种简单的溢出是利用 <code>gets()</code> 函数没有指定最大长度的漏洞 - 它会一直从标准输入流中读取, 直到遇到回车. 同时, 如果我们能够输入汇编指令的话, 就可以让处理器跳转到我们自己的指令!</p><p>我们精心构造的这种输入, 一般被称作 <code>shellcode</code>.</p><h3 id="一个失败的例子"><a class="markdownIt-Anchor" href="#一个失败的例子"></a> 一个失败的例子</h3><p>来看下面一段代码.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> {<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">64</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"What's your name?"</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, name);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello, %s!\n"</span>, name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>在这里, <code>scanf</code> 会接受一个字符串的输入, 并保存到 <code>name</code> 中. 如果输入足够长, 那就可以将返回地址覆盖掉. 把它另存为 <code>victim.c</code>, 编译一下, 拿 <code>objdump</code> 反汇编看看.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">0000000000401156 &lt;main&gt;:<br>  401156:       f3 0f 1e fa             endbr64 <br>  40115a:       55                      push   rbp<br>  40115b:       48 89 e5                mov    rbp,rsp<br>  40115e:       48 83 ec 40             sub    rsp,0x40<br>  401162:       48 8d 45 c0             lea    rax,[rbp-0x40]<br>  401166:       48 89 c6                mov    rsi,rax<br>  401169:       48 8d 3d 94 0e 00 00    lea    rdi,[rip+0xe94]        # 402004 &lt;_IO_stdin_used+0x4&gt;<br>  401170:       b8 00 00 00 00          mov    eax,0x0<br>  401175:       e8 e6 fe ff ff          call   401060 &lt;__isoc99_scanf@plt&gt;<br>  40117a:       48 8d 45 c0             lea    rax,[rbp-0x40]<br>  40117e:       48 89 c6                mov    rsi,rax<br>  401181:       48 8d 3d 7f 0e 00 00    lea    rdi,[rip+0xe7f]        # 402007 &lt;_IO_stdin_used+0x7&gt;<br>  401188:       b8 00 00 00 00          mov    eax,0x0<br>  40118d:       e8 be fe ff ff          call   401050 &lt;printf@plt&gt;<br>  401192:       b8 00 00 00 00          mov    eax,0x0<br>  401197:       c9                      leave  <br>  401198:       c3                      ret    <br>  401199:       0f 1f 80 00 00 00 00    nop    DWORD PTR [rax+0x0]<br></code></pre></td></tr></tbody></table></figure><p>可以看到, <code>sub rsp,0x40</code> 这条指令, 为 <code>name</code> 数组在栈上开辟了 64 字节大小的空间. 由此我们可以画出栈上的空间分配情况, 如下图</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plain">+--------------+<br>|     ...      |<br>+--------------+<br>|              |<br>|  return addr |<br>|              |<br>+--------------+ &lt;-- RSP should points here before ret<br>|              |<br>|   prev rbp   | &lt;-- 8 bytes long<br>|              |<br>+--------------+ &lt;-- RBP should points here<br>|     ...      |<br>+--------------+<br>|              |<br>|   name[64]   |<br>|              |<br>+--------------+ &lt;-- RBP-0x40<br></code></pre></td></tr></tbody></table></figure><p>用 <code>gdb</code> 调试一下, 确认我们的猜想对不对. 首先, <code>gdb -q ./victim</code> 启动调试, 然后 <code>b *main</code>, 在 <code>main</code> 函数的第一条指令下断点, <code>r</code> 开始运行.</p><p><img src="20210904201815.png" alt="gdb pic"></p><p>可以看到, 这时 <code>RSP = 0x7fffffffde58</code>, 在下一条 <code>RBP</code> 入栈后会变为 <code>de50</code>. 用 <code>p &amp;name[0]</code> 查看 <code>name</code> 数组的地址, 发现是 <code>0x7fffffffde10</code>. 由此确认, 返回地址与 <code>name[0]</code> 之间的长度为 <code>0x48 == 72</code> 字节.</p><p>接下来构造 <code>shellcode</code>, 我们的目标是输出一个字符串 <code>Hack!</code>, 写出如下的汇编代码:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ASM">[section .text]<br>        global _start<br><br>_start:<br>        jmp END<br>BEGIN:<br>        mov rax, 1<br>        mov rdi, 1<br>        pop rsi         ; addr of string popped to RSI as arg of syscall<br>        mov rdx, 5<br>        syscall<br><br>        mov rax, 0x3c<br>        mov rdi, 0<br>        syscall<br>END:<br>        call BEGIN      ; addr of string pushed into stack<br>        DB "Hack!"<br></code></pre></td></tr></tbody></table></figure><p>编译 <code>nasm -f elf64 shell.asm</code>, 链接 <code>ld -s -o shell shell.o</code>, 然后 <code>objdump -d shell -M intel</code> 提取二进制的机器码:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ASM">Disassembly of section .text:<br><br>0000000000401000 &lt;.text&gt;:<br>  401000:       eb 1e                   jmp    0x401020<br>  401002:       b8 01 00 00 00          mov    eax,0x1<br>  401007:       bf 01 00 00 00          mov    edi,0x1<br>  40100c:       5e                      pop    rsi<br>  40100d:       ba 05 00 00 00          mov    edx,0x5<br>  401012:       0f 05                   syscall <br>  401014:       b8 3c 00 00 00          mov    eax,0x3c<br>  401019:       bf 00 00 00 00          mov    edi,0x0<br>  40101e:       0f 05                   syscall <br>  401020:       e8 dd ff ff ff          call   0x401002<br>  401025:       48 61                   rex.W (bad) <br>  401027:       63 6b 21                movsxd ebp,DWORD PTR [rbx+0x21]<br></code></pre></td></tr></tbody></table></figure><p>这份 shellcode 的长度只有 42 字节, 因此我们还需要再填充 30 字节的数据, 之后才是用来覆盖返回地址的 <code>&amp;name[0]</code>. 因为其中有很多不可打印的字符, 所以我们用 python 把它输出到一个文件, 然后从文件作为输入.</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -c 'print ("\xeb\x1e\xb8\x01\x00\x00\x00\xbf\x01\x00\x00\x00\x5e\xba\x05\x00\x00\x00\x0f\x05\xb8\x3c\x00\x00\x00\xbf\x00\x00\x00\x00\x0f\x05\xe8\xdd\xff\xff\xff\x48\x61\x63\x6b\x21" + "\xdb"*30 + "\x10\xde\xff\xff\xff\x7f\x00\x00")' &gt; shellcode<br></code></pre></td></tr></tbody></table></figure><blockquote><p>注意小端序</p></blockquote><p>这次尝试以失败告终, 已经确定成功覆盖了栈中之前保存的 <code>RBP</code>, 理论上返回地址也已经被覆盖, 但是就是无法跳转, 报告段错误… 看下图的 <code>EBP</code> 的值 (为了确定不是 x86-64 的问题, 使用 x86 重新编译了一次, shellcode 也重新写了一份)</p><p><img src="20210904214722.png" alt="failed-try😭"></p><blockquote><p>大概是还有保护措施没有关掉…</p></blockquote><blockquote><p>关于 x86 系列栈指针寄存器的演进历史, 参见 <a href="https://stackoverflow.com/a/31425990/13804105">StackOverflow</a></p></blockquote><h2 id="对抗措施"><a class="markdownIt-Anchor" href="#对抗措施"></a> 对抗措施</h2><p>//TODO</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</category>
      
      <category domain="https://horizonchaser.github.io/tags/CSAPP/">CSAPP</category>
      
      
      <comments>https://horizonchaser.github.io/2021/08/31/CSAPP-Chap3-%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CS Network Review and Summary</title>
      <link>https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/</link>
      <guid>https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/</guid>
      <pubDate>Sun, 13 Jun 2021 20:47:19 GMT</pubDate>
      
      <description>2021期末计网复习总结</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="说明-食用方法"><a class="markdownIt-Anchor" href="#说明-食用方法"></a> 说明 &amp; 食用方法</h1><p>按照计网老师发的提纲从书上总结的重点</p><p>标题后标有 <code>[IMP]</code> 的为提纲上加粗的, 大概就是重点中的重点了吧<br><s>前面的几章还没标</s></p><p>当前进度: 27 / 27 章, 100.0%<br><s>计划在 06/22 完成所有内容</s><br>已在 06/22 完成</p><p>CC-BY-<strong>NC</strong>-SA 4.0<br>修订: 2021/06/22 Rev-1</p><!-- @import "[TOC]" {cmd="toc" depthFrom=1 depthTo=6 orderedList=false} --><!-- code_chunk_output --><ul><li><a href="#%E8%AF%B4%E6%98%8E--%E9%A3%9F%E7%94%A8%E6%96%B9%E6%B3%95">说明 &amp; 食用方法</a></li><li><a href="#part-1-%E6%A6%82%E8%BF%B0">Part 1 概述</a><ul><li><a href="#chapter-1-%E7%BB%AA%E8%AE%BA">Chapter 1 绪论</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E7%9A%84%E6%A6%82%E5%BF%B5">数据通信的概念</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E6%B5%81-imp">数据流 [IMP]</a></li><li><a href="#%E8%BF%9E%E6%8E%A5%E7%B1%BB%E5%9E%8B">连接类型</a></li><li><a href="#%E7%89%A9%E7%90%86%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84">物理拓扑结构</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E5%88%86%E7%B1%BB-imp">网络分类 [IMP]</a></li><li><a href="#%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%A0%87%E5%87%86-imp">协议和标准 [IMP]</a><ul><li><a href="#%E5%8D%8F%E8%AE%AE%E4%B8%89%E8%A6%81%E7%B4%A0">协议三要素</a></li><li><a href="#%E6%A0%87%E5%87%86">标准</a></li></ul></li></ul></li><li><a href="#chapter-2-%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B">Chapter 2 网络模型</a><ul><li><a href="#osi%E6%A8%A1%E5%9E%8B-imp">OSI模型 [IMP]</a><ul><li><a href="#%E5%88%86%E5%B1%82%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%B1%82%E9%97%B4%E8%BF%9E%E6%8E%A5">分层的概念与层间连接</a></li><li><a href="#%E5%90%84%E5%B1%82%E5%8A%9F%E8%83%BD">各层功能</a><ul><li><a href="#%E7%89%A9%E7%90%86%E5%B1%82">物理层</a><ul><li><a href="#%E5%8A%9F%E8%83%BD">功能</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82">数据链路层</a><ul><li><a href="#%E5%8A%9F%E8%83%BD-1">功能</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C%E5%B1%82">网络层</a><ul><li><a href="#%E5%8A%9F%E8%83%BD-2">功能</a></li></ul></li><li><a href="#%E4%BC%A0%E8%BE%93%E5%B1%82">传输层</a><ul><li><a href="#%E5%8A%9F%E8%83%BD-3">功能</a></li></ul></li><li><a href="#%E4%BC%9A%E8%AF%9D%E5%B1%82">会话层</a></li><li><a href="#%E8%A1%A8%E7%A4%BA%E5%B1%82">表示层</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%B1%82">应用层</a></li></ul></li></ul></li><li><a href="#tcpip-%E5%8D%8F%E8%AE%AE%E6%97%8F-imp">TCP/IP 协议族 [IMP]</a><ul><li><a href="#%E5%90%84%E5%B1%82%E5%8A%9F%E8%83%BD-1">各层功能</a><ul><li><a href="#%E4%B8%BB%E6%9C%BA%E5%88%B0%E7%BD%91%E7%BB%9C%E5%B1%82">主机到网络层</a></li><li><a href="#%E4%BA%92%E8%81%94%E7%BD%91%E5%B1%82">互联网层</a></li><li><a href="#%E4%BC%A0%E8%BE%93%E5%B1%82-1">传输层</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%B1%82-1">应用层</a></li></ul></li></ul></li><li><a href="#%E5%9C%B0%E5%9D%80%E4%B8%8E%E5%AF%BB%E5%9D%80-imp">地址与寻址 [IMP]</a><ul><li><a href="#%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80">物理地址</a></li><li><a href="#%E9%80%BB%E8%BE%91%E5%9C%B0%E5%9D%80">逻辑地址</a></li><li><a href="#%E7%AB%AF%E5%8F%A3%E5%9C%B0%E5%9D%80">端口地址</a></li><li><a href="#%E4%B8%93%E7%94%A8%E5%9C%B0%E5%9D%80">专用地址</a></li></ul></li></ul></li></ul></li><li><a href="#part-2-%E7%89%A9%E7%90%86%E5%B1%82%E4%B8%8E%E4%BB%8B%E8%B4%A8">Part 2 物理层与介质</a><ul><li><a href="#chapter-3-%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7">Chapter 3 数据与信号</a><ul><li><a href="#%E5%85%B3%E4%BA%8E%E9%A2%91%E7%8E%87-%E9%A2%91%E5%9F%9F%E4%B8%8E%E5%B8%A6%E5%AE%BD">关于频率, 频域与带宽</a></li><li><a href="#%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E4%B8%8E%E4%BC%A0%E8%BE%93">数字信号与传输</a><ul><li><a href="#%E6%AF%94%E7%89%B9%E7%8E%87">比特率</a></li><li><a href="#%E4%BD%8D%E9%95%BF">位长</a></li><li><a href="#%E4%BC%A0%E8%BE%93">传输</a><ul><li><a href="#%E5%9F%BA%E5%B8%A6%E4%BC%A0%E8%BE%93">基带传输</a><ul><li><a href="#%E5%AE%BD%E5%B8%A6%E5%AE%BD%E7%9A%84%E4%BD%8E%E9%80%9A%E9%80%9A%E9%81%93">宽带宽的低通通道</a></li><li><a href="#%E6%9C%89%E9%99%90%E5%B8%A6%E5%AE%BD%E7%9A%84%E4%BD%8E%E9%80%9A%E9%80%9A%E9%81%93">有限带宽的低通通道</a></li></ul></li><li><a href="#%E5%AE%BD%E5%B8%A6%E4%BC%A0%E8%BE%93">宽带传输</a></li></ul></li><li><a href="#%E4%BC%A0%E8%BE%93%E5%87%8F%E6%8D%9F-imp">传输减损 [IMP]</a><ul><li><a href="#%E8%A1%B0%E5%87%8F">衰减</a><ul><li><a href="#%E5%88%86%E8%B4%9D">分贝</a></li></ul></li><li><a href="#%E5%A4%B1%E7%9C%9F">失真</a></li><li><a href="#%E5%99%AA%E5%A3%B0">噪声</a><ul><li><a href="#%E4%BF%A1%E5%99%AA%E6%AF%94">信噪比</a></li></ul></li></ul></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E9%80%9F%E7%8E%87%E9%99%90%E5%88%B6-imp">数据速率限制 [IMP]</a><ul><li><a href="#%E6%97%A0%E5%99%AA%E5%A3%B0%E9%80%9A%E9%81%93-%E5%A5%88%E5%A5%8E%E6%96%AF%E7%89%B9%E6%AF%94%E7%89%B9%E7%8E%87">无噪声通道: 奈奎斯特比特率</a></li><li><a href="#%E6%9C%89%E5%99%AA%E5%A3%B0%E9%80%9A%E9%81%93-%E9%A6%99%E5%86%9C%E5%AE%B9%E9%87%8F%E5%AE%9A%E7%90%86">有噪声通道: 香农容量定理</a></li><li><a href="#%E6%80%BB%E7%BB%93-imp">总结 [IMP]</a></li></ul></li><li><a href="#%E6%80%A7%E8%83%BD">性能</a><ul><li><a href="#%E5%B8%A6%E5%AE%BD">带宽</a></li><li><a href="#%E5%90%9E%E5%90%90%E9%87%8F">吞吐量</a></li><li><a href="#%E5%BB%B6%E8%BF%9F">延迟</a><ul><li><a href="#%E4%BC%A0%E6%92%AD%E6%97%B6%E9%97%B4">传播时间</a></li><li><a href="#%E4%BC%A0%E8%BE%93%E6%97%B6%E9%97%B4">传输时间</a></li><li><a href="#%E6%8E%92%E9%98%9F%E6%97%B6%E9%97%B4">排队时间</a></li><li><a href="#%E5%A4%84%E7%90%86%E5%BB%B6%E8%BF%9F">处理延迟</a></li></ul></li><li><a href="#%E5%B8%A6%E5%AE%BD%E4%B8%8E%E5%BB%B6%E8%BF%9F%E7%9A%84%E4%B9%98%E7%A7%AF">带宽与延迟的乘积</a></li></ul></li></ul></li><li><a href="#chapter-4-%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93">Chapter 4 数字传输</a><ul><li><a href="#%E7%BA%BF%E8%B7%AF%E7%BC%96%E7%A0%81">线路编码</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0%E4%B8%8E%E4%BF%A1%E5%8F%B7%E5%85%83%E7%B4%A0-imp">数据元素与信号元素 [IMP]</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E9%80%9F%E7%8E%87%E4%B8%8E%E4%BF%A1%E5%8F%B7%E9%80%9F%E7%8E%87">数据速率与信号速率</a></li></ul></li><li><a href="#%E5%9F%BA%E7%BA%BF%E5%81%8F%E7%A7%BB">基线偏移</a></li><li><a href="#%E8%87%AA%E5%90%8C%E6%AD%A5">自同步</a></li></ul></li><li><a href="#%E7%BA%BF%E8%B7%AF%E7%BC%96%E7%A0%81-imp">线路编码 [IMP]</a><ul><li><a href="#nrz-%E4%B8%8D%E5%BD%92%E9%9B%B6%E7%BC%96%E7%A0%81">NRZ (不归零编码)</a><ul><li><a href="#nrz-l-%E4%B8%8E-nrz-i">NRZ-L 与 NRZ-I</a></li></ul></li><li><a href="#rz-%E5%BD%92%E9%9B%B6%E7%BC%96%E7%A0%81">RZ (归零编码)</a></li><li><a href="#%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81-%E5%92%8C-%E5%B7%AE%E5%88%86%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81">曼彻斯特编码 和 差分曼彻斯特编码</a><ul><li><a href="#%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81">曼彻斯特编码</a></li><li><a href="#%E5%B7%AE%E5%88%86%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81">差分曼彻斯特编码</a></li></ul></li><li><a href="#ami-%E5%92%8C-%E4%BC%AA%E4%B8%89%E5%85%83%E7%BC%96%E7%A0%81">AMI 和 伪三元编码</a></li><li><a href="#%E5%A4%9A%E7%94%B5%E5%B9%B3%E4%B8%8E%E5%A4%9A%E7%BA%BF%E8%B7%AF%E7%BC%96%E7%A0%81">多电平与多线路编码</a></li><li><a href="#%E7%BA%BF%E8%B7%AF%E7%BC%96%E7%A0%81-%E6%80%BB%E7%BB%93">线路编码 总结</a></li></ul></li><li><a href="#%E5%9D%97%E7%BC%96%E7%A0%81">块编码</a></li><li><a href="#%E6%89%B0%E7%A0%81">扰码</a></li><li><a href="#%E8%84%89%E5%86%B2%E7%A0%81%E8%B0%83%E5%88%B6-pcm">脉冲码调制 (PCM)</a><ul><li><a href="#%E9%87%87%E6%A0%B7">采样</a></li><li><a href="#%E9%87%8F%E5%8C%96">量化</a><ul><li><a href="#%E9%87%8F%E5%8C%96%E8%AF%AF%E5%B7%AE">量化误差</a></li></ul></li><li><a href="#%E7%BC%96%E7%A0%81">编码</a></li><li><a href="#delta-%E8%B0%83%E5%88%B6">Delta 调制</a></li></ul></li><li><a href="#%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%BC%8F-imp">传输模式 [IMP]</a><ul><li><a href="#%E4%B8%B2%E8%A1%8C%E4%B8%8E%E5%B9%B6%E8%A1%8C">串行与并行</a></li><li><a href="#%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5">同步与异步</a></li></ul></li></ul></li><li><a href="#chapter-5-%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93">Chapter 5 模拟传输</a><ul><li><a href="#%E6%AF%94%E7%89%B9%E7%8E%87%E5%92%8C%E6%B3%A2%E7%89%B9%E7%8E%87-imp">比特率和波特率 [IMP]</a></li><li><a href="#%E5%B9%85%E7%A7%BB%E9%94%AE%E6%8E%A7-ask-imp">幅移键控 (ASK) [IMP]</a></li><li><a href="#%E9%A2%91%E7%A7%BB%E9%94%AE%E6%8E%A7-fsk-imp">频移键控 (FSK) [IMP]</a></li><li><a href="#%E7%9B%B8%E7%A7%BB%E9%94%AE%E6%8E%A7-psk-imp">相移键控 (PSK) [IMP]</a><ul><li><a href="#%E4%BA%8C%E8%BF%9B%E5%88%B6psk-bpsk">二进制PSK (BPSK)</a></li><li><a href="#%E6%AD%A3%E4%BA%A4psk-qpsk">正交PSK (QPSK)</a></li><li><a href="#%E6%98%9F%E5%BA%A7%E5%9B%BE">星座图</a></li></ul></li><li><a href="#%E6%AD%A3%E4%BA%A4%E6%8C%AF%E5%B9%85%E8%B0%83%E5%88%B6-qam-imp">正交振幅调制 (QAM) [IMP]</a></li><li><a href="#%E6%A8%A1%E6%8B%9F%E4%BF%A1%E5%8F%B7%E8%B0%83%E5%88%B6">模拟信号调制</a></li></ul></li><li><a href="#chapter-6-%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8">Chapter 6 带宽利用</a><ul><li><a href="#fdm-%E9%A2%91%E5%88%86%E5%A4%8D%E7%94%A8-imp">FDM (频分复用) [IMP]</a></li><li><a href="#tdm-%E6%97%B6%E5%88%86%E5%A4%8D%E7%94%A8-imp">TDM (时分复用) [IMP]</a><ul><li><a href="#%E5%90%8C%E6%AD%A5-tdm">同步 TDM</a><ul><li><a href="#t-1-%E5%B8%A7-imp">T-1 帧 [IMP]</a></li><li><a href="#e-%E7%BA%BF%E8%B7%AF">E 线路</a></li></ul></li><li><a href="#%E7%BB%9F%E8%AE%A1-tdm">统计 TDM</a></li></ul></li><li><a href="#wdm-%E6%B3%A2%E5%88%86%E5%A4%8D%E7%94%A8">WDM (波分复用)</a></li><li><a href="#%E6%89%A9%E9%A2%91">扩频</a><ul><li><a href="#%E8%B7%B3%E9%A2%91%E6%89%A9%E9%A2%91-fhss">跳频扩频 (FHSS)</a></li><li><a href="#%E7%9B%B4%E6%8E%A5%E5%BA%8F%E5%88%97%E6%89%A9%E9%A2%91">直接序列扩频</a></li></ul></li></ul></li><li><a href="#chapter-7-%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8">Chapter 7 传输介质</a><ul><li><a href="#%E6%9C%89%E5%90%91%E4%BB%8B%E8%B4%A8">有向介质</a><ul><li><a href="#%E5%8F%8C%E7%BB%9E%E7%BA%BF-imp">双绞线 [IMP]</a></li><li><a href="#%E5%90%8C%E8%BD%B4%E7%BA%BF%E7%BC%86">同轴线缆</a></li><li><a href="#%E5%85%89%E7%BA%A4">光纤</a></li></ul></li><li><a href="#%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1">无线通信</a></li></ul></li><li><a href="#chapter-8-%E4%BA%A4%E6%8D%A2">Chapter 8 交换</a><ul><li><a href="#%E7%94%B5%E8%B7%AF%E4%BA%A4%E6%8D%A2-imp">电路交换 [IMP]</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E6%8A%A5%E4%BA%A4%E6%8D%A2-imp">数据报交换 [IMP]</a></li><li><a href="#%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C-imp">虚电路网络 [IMP]</a><ul><li><a href="#%E7%BC%96%E5%9D%80">编址</a></li><li><a href="#%E8%BF%9E%E6%8E%A5%E5%BB%BA%E7%AB%8B">连接建立</a></li><li><a href="#%E8%BF%9E%E6%8E%A5%E6%8B%86%E9%99%A4">连接拆除</a></li><li><a href="#%E5%BB%B6%E8%BF%9F-1">延迟</a></li></ul></li><li><a href="#%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%BB%93%E6%9E%84">交换机结构</a></li><li><a href="#chapter-9-%E4%BD%BF%E7%94%A8%E7%94%B5%E8%AF%9D%E7%BD%91%E5%92%8C%E6%9C%89%E7%BA%BF%E7%94%B5%E8%A7%86%E7%BD%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93">Chapter 9 使用电话网和有线电视网进行数据传输</a><ul><li><a href="#%E4%BF%A1%E4%BB%A4%E7%9A%84%E6%A6%82%E5%BF%B5-imp">信令的概念 [IMP]</a></li><li><a href="#%E8%B0%83%E5%88%B6%E4%B8%8E%E8%A7%A3%E8%B0%83">调制与解调</a></li><li><a href="#adsl-%E9%9D%9E%E5%AF%B9%E7%A7%B0%E6%95%B0%E5%AD%97%E7%94%A8%E6%88%B7%E7%BA%BF%E8%B7%AF">ADSL (非对称数字用户线路)</a></li></ul></li></ul></li></ul></li><li><a href="#part-3-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82">Part 3 数据链路层</a><ul><li><a href="#chapter-10-%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99">Chapter 10 检错与纠错</a><ul><li><a href="#%E5%B7%AE%E9%94%99%E7%9A%84%E7%B1%BB%E5%9E%8B">差错的类型</a></li><li><a href="#%E5%9D%97%E7%BC%96%E7%A0%81-1">块编码</a></li><li><a href="#%E7%BA%A0%E9%94%99">纠错</a><ul><li><a href="#%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB">汉明距离</a></li><li><a href="#%E6%9C%80%E5%B0%8F%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB-imp">最小汉明距离 [IMP]</a></li></ul></li><li><a href="#%E7%BA%BF%E6%80%A7%E5%9D%97%E7%BC%96%E7%A0%81">线性块编码</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C">简单奇偶校验</a></li><li><a href="#%E4%BA%8C%E7%BB%B4%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C">二维奇偶校验</a></li><li><a href="#%E6%B1%89%E6%98%8E%E7%BC%96%E7%A0%81">汉明编码</a></li></ul></li><li><a href="#%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C-crc">循环冗余校验 (CRC)</a><ul><li><a href="#%E8%AE%A1%E7%AE%97-imp">计算 [IMP]</a><ul><li><a href="#%E5%A4%9A%E9%A1%B9%E5%BC%8F%E9%99%A4%E6%B3%95">多项式除法</a></li></ul></li><li><a href="#%E5%B7%AE%E9%94%99%E6%A3%80%E6%B5%8B%E8%83%BD%E5%8A%9B">差错检测能力</a><ul><li><a href="#%E5%8D%95%E4%B8%AA%E4%BD%8D%E5%B7%AE%E9%94%99">单个位差错</a></li><li><a href="#%E4%B8%A4%E4%B8%AA%E7%8B%AC%E7%AB%8B%E7%9A%84%E5%8D%95%E4%B8%AA%E4%BD%8D%E5%B7%AE%E9%94%99">两个独立的单个位差错</a></li><li><a href="#%E5%A5%87%E6%95%B0%E4%B8%AA%E5%B7%AE%E9%94%99">奇数个差错</a></li><li><a href="#%E7%AA%81%E5%8F%91%E6%80%A7%E5%B7%AE%E9%94%99">突发性差错</a></li><li><a href="#%E8%A1%A8%E7%8E%B0%E8%BE%83%E5%A5%BD%E7%9A%84%E7%94%9F%E6%88%90%E5%A4%9A%E9%A1%B9%E5%BC%8F">表现较好的生成多项式</a></li></ul></li></ul></li><li><a href="#%E6%A0%A1%E9%AA%8C%E5%92%8C">校验和</a></li></ul></li><li><a href="#chapter-11-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6">Chapter 11 数据链路控制</a><ul><li><a href="#%E6%88%90%E5%B8%A7">成帧</a><ul><li><a href="#%E9%9D%A2%E5%90%91%E5%AD%97%E7%AC%A6%E5%8D%8F%E8%AE%AE">面向字符协议</a></li><li><a href="#%E9%9D%A2%E5%90%91%E4%BD%8D%E5%8D%8F%E8%AE%AE">面向位协议</a></li></ul></li><li><a href="#%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6">流量控制与差错控制</a></li><li><a href="#%E5%8D%8F%E8%AE%AE">协议</a><ul><li><a href="#%E6%97%A0%E5%99%AA%E5%A3%B0%E9%80%9A%E9%81%93">无噪声通道</a></li><li><a href="#%E6%9C%89%E5%99%AA%E5%A3%B0%E9%80%9A%E9%81%93">有噪声通道</a><ul><li><a href="#%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85-arq-imp">停止等待 ARQ [IMP]</a></li><li><a href="#%E5%90%8E%E9%80%80-n-%E5%B8%A7-arq-imp">后退 N 帧 ARQ [IMP]</a></li><li><a href="#%E9%80%89%E6%8B%A9%E6%80%A7%E9%87%8D%E5%A4%8D-arq-imp">选择性重复 ARQ [IMP]</a></li></ul></li></ul></li><li><a href="#hdlc-%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6-imp">HDLC (高级数据链路控制) [IMP]</a></li><li><a href="#%E7%82%B9%E5%88%B0%E7%82%B9%E5%8D%8F%E8%AE%AE-ppp">点到点协议 (PPP)</a></li></ul></li><li><a href="#chapter-12-%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE">Chapter 12 多路访问</a><ul><li><a href="#%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE">随机访问</a><ul><li><a href="#aloha">ALOHA</a><ul><li><a href="#%E7%BA%AF-aloha">纯 ALOHA</a></li><li><a href="#%E6%97%B6%E9%9A%99-aloha">时隙 ALOHA</a></li></ul></li><li><a href="#csma-%E8%BD%BD%E6%B3%A2%E4%BE%A6%E5%90%AC%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE-imp">CSMA (载波侦听多路访问) [IMP]</a><ul><li><a href="#%E6%8C%81%E7%BB%AD%E6%96%B9%E6%B3%95">持续方法</a></li><li><a href="#csmacd-%E5%B8%A6%E5%86%B2%E7%AA%81%E6%A3%80%E6%B5%8B%E7%9A%84-%E8%BD%BD%E6%B3%A2%E4%BE%A6%E5%90%AC%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE">CSMA/CD (带冲突检测的 载波侦听多路访问)</a></li><li><a href="#csmaca-%E5%B8%A6%E5%86%B2%E7%AA%81%E9%81%BF%E5%85%8D%E7%9A%84-%E8%BD%BD%E6%B3%A2%E4%BE%A6%E5%90%AC%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE">CSMA/CA (带冲突避免的 载波侦听多路访问)</a><ul><li><a href="#%E5%B8%A7%E9%97%B4%E9%97%B4%E9%9A%94-ifs">帧间间隔 (IFS)</a></li><li><a href="#%E7%AB%9E%E4%BA%89%E7%AA%97%E5%8F%A3">竞争窗口</a></li><li><a href="#%E7%A1%AE%E8%AE%A4">确认</a></li></ul></li></ul></li></ul></li><li><a href="#%E5%8F%97%E6%8E%A7%E8%AE%BF%E9%97%AE">受控访问</a><ul><li><a href="#%E9%A2%84%E7%BA%A6">预约</a></li><li><a href="#%E8%BD%AE%E8%AF%A2">轮询</a></li><li><a href="#%E4%BB%A4%E7%89%8C%E4%BC%A0%E9%80%92">令牌传递</a></li></ul></li></ul></li><li><a href="#chapter-13-%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%E4%BB%A5%E5%A4%AA%E7%BD%91">Chapter 13 有线局域网：以太网</a><ul><li><a href="#ieee-%E6%A0%87%E5%87%86">IEEE 标准</a></li><li><a href="#%E6%A0%87%E5%87%86%E4%BB%A5%E5%A4%AA%E7%BD%91%E7%9A%84mac%E5%AD%90%E5%B1%82">标准以太网的MAC子层</a><ul><li><a href="#%E5%B8%A7%E6%A0%BC%E5%BC%8F-imp">帧格式 [IMP]</a></li><li><a href="#mac-%E5%9C%B0%E5%9D%80-imp">MAC 地址 [IMP]</a></li><li><a href="#csmacd-%E6%9C%80%E7%9F%AD%E5%B8%A7%E9%95%BF-imp">CSMA/CD 最短帧长 [IMP]</a></li><li><a href="#%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81">编码与解码</a></li><li><a href="#%E6%A0%87%E5%87%86%E4%BB%A5%E5%A4%AA%E7%BD%91%E7%9A%84%E5%88%86%E7%B1%BB">标准以太网的分类</a></li></ul></li><li><a href="#%E6%A1%A5%E6%8E%A5%E4%BB%A5%E5%A4%AA%E7%BD%91">桥接以太网</a></li><li><a href="#%E4%BA%A4%E6%8D%A2%E5%BC%8F%E4%BB%A5%E5%A4%AA%E7%BD%91">交换式以太网</a></li><li><a href="#%E5%85%A8%E5%8F%8C%E5%B7%A5%E4%BB%A5%E5%A4%AA%E7%BD%91">全双工以太网</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E4%BB%A5%E5%A4%AA%E7%BD%91">快速以太网</a></li><li><a href="#%E5%8D%83%E5%85%86%E4%BB%A5%E5%A4%AA%E7%BD%91">千兆以太网</a></li><li><a href="#%E6%80%BB%E7%BA%BF%E5%9E%8B%E4%BB%A5%E5%A4%AA%E7%BD%91%E7%9A%84%E4%BF%A1%E9%81%93%E5%88%A9%E7%94%A8%E7%8E%87%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90">总线型以太网的信道利用率简单分析</a></li></ul></li><li><a href="#chapter-14-%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91">Chapter 14 无线局域网</a><ul><li><a href="#ieee-80211-imp">IEEE 802.11 [IMP]</a></li><li><a href="#%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84">体系结构</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%9C%8D%E5%8A%A1%E9%9B%86-bss">基本服务集 (BSS)</a></li><li><a href="#%E6%89%A9%E5%B1%95%E6%9C%8D%E5%8A%A1%E9%9B%86-ess">扩展服务集 (ESS)</a></li><li><a href="#%E7%AB%99%E7%82%B9%E7%B1%BB%E5%9E%8B">站点类型</a></li></ul></li><li><a href="#mac%E5%B1%82-imp">MAC层 [IMP]</a><ul><li><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E5%8A%9F%E8%83%BD-dcf">分布式协调功能 (DCF)</a></li><li><a href="#%E7%82%B9%E5%8D%8F%E8%B0%83%E5%8A%9F%E8%83%BD-pcf">点协调功能 (PCF)</a></li><li><a href="#%E5%B8%A7%E6%A0%BC%E5%BC%8F-imp-1">帧格式 [IMP]</a></li><li><a href="#%E5%AF%BB%E5%9D%80%E6%9C%BA%E5%88%B6">寻址机制</a></li><li><a href="#%E9%9A%90%E8%97%8F%E7%AB%99%E7%82%B9-imp">隐藏站点 [IMP]</a></li><li><a href="#%E6%9A%B4%E9%9C%B2%E7%AB%99%E7%82%B9-imp">暴露站点 [IMP]</a></li><li><a href="#%E7%89%A9%E7%90%86%E5%B1%82-imp">物理层 [IMP]</a></li></ul></li></ul></li><li><a href="#chapter-15-%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91">Chapter 15 连接局域网、主干网和虚拟局域网</a><ul><li><a href="#%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87-imp">连接设备 [IMP]</a><ul><li><a href="#%E6%97%A0%E6%BA%90%E9%9B%86%E7%BA%BF%E5%99%A8">无源集线器</a></li><li><a href="#%E4%B8%AD%E7%BB%A7%E5%99%A8">中继器</a></li><li><a href="#%E6%9C%89%E6%BA%90%E9%9B%86%E7%BA%BF%E5%99%A8">有源集线器</a></li><li><a href="#%E7%BD%91%E6%A1%A5">网桥</a><ul><li><a href="#%E9%80%8F%E6%98%8E%E7%BD%91%E6%A1%A5">透明网桥</a></li><li><a href="#%E6%BA%90%E8%B7%AF%E7%94%B1%E7%BD%91%E6%A1%A5">源路由网桥</a></li></ul></li><li><a href="#%E4%BA%8C%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA">二层交换机</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a></li><li><a href="#%E4%B8%89%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA">三层交换机</a></li><li><a href="#%E7%BD%91%E5%85%B3">网关</a></li></ul></li><li><a href="#%E5%86%B2%E7%AA%81%E5%9F%9F%E4%B8%8E%E5%B9%BF%E6%92%AD%E5%9F%9F-imp">冲突域与广播域 [IMP]</a><ul><li><a href="#%E5%86%B2%E7%AA%81%E5%9F%9F">冲突域</a></li><li><a href="#%E5%B9%BF%E6%92%AD%E5%9F%9F">广播域</a></li></ul></li><li><a href="#vlan-%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91">VLAN (虚拟局域网)</a></li></ul></li><li><a href="#chapter-16-%E6%97%A0%E7%BA%BF-wan%E7%A7%BB%E5%8A%A8%E7%94%B5%E8%AF%9D%E5%92%8C%E5%8D%AB%E6%98%9F%E7%BD%91%E7%BB%9C">Chapter 16 无线 WAN：移动电话和卫星网络</a></li><li><a href="#chapter-17-%E5%B9%BF%E5%9F%9F%E7%BD%91-sonetsdh">Chapter 17 广域网 SONET/SDH</a></li><li><a href="#chapter-18-%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8C-atm">Chapter 18 虚电路网络：帧中继和 ATM</a><ul><li><a href="#%E5%B8%A7%E4%B8%AD%E7%BB%A7">帧中继</a><ul><li><a href="#%E7%89%B9%E5%BE%81-imp">特征 [IMP]</a></li><li><a href="#%E6%B0%B8%E4%B9%85%E4%BA%A4%E6%8D%A2%E8%99%9A%E7%94%B5%E8%B7%AF-pvc">永久交换虚电路 (PVC)</a></li><li><a href="#%E4%BA%A4%E6%8D%A2%E8%99%9A%E7%94%B5%E8%B7%AF-svc">交换虚电路 (SVC)</a></li><li><a href="#%E5%B8%A7%E7%BB%93%E6%9E%84">帧结构</a></li></ul></li><li><a href="#atm-%E5%BC%82%E6%AD%A5%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%BC%8F">ATM (异步传输模式)</a><ul><li><a href="#%E7%89%B9%E5%BE%81">特征</a></li><li><a href="#%E7%BB%93%E6%9E%84-imp">结构 [IMP]</a></li></ul></li></ul></li></ul></li><li><a href="#part-4-%E7%BD%91%E7%BB%9C%E5%B1%82">Part 4 网络层</a><ul><li><a href="#chapter-19-%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80-imp">Chapter 19 逻辑寻址 [IMP]</a><ul><li><a href="#ipv4-%E5%9C%B0%E5%9D%80">IPv4 地址</a><ul><li><a href="#%E5%88%86%E7%B1%BB%E5%AF%BB%E5%9D%80">分类寻址</a></li><li><a href="#%E6%97%A0%E7%B1%BB%E5%AF%BB%E5%9D%80">无类寻址</a><ul><li><a href="#%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84">层次结构</a></li></ul></li><li><a href="#nat-%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">NAT (网络地址转换)</a></li></ul></li><li><a href="#ipv6-%E5%9C%B0%E5%9D%80">IPv6 地址</a></li></ul></li><li><a href="#chapter-20-ip%E5%8D%8F%E8%AE%AE">Chapter 20 IP协议</a><ul><li><a href="#%E7%BD%91%E9%99%85%E4%BA%92%E8%BF%9E">网际互连</a></li><li><a href="#ipv4">IPv4</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F-imp">数据报格式 [IMP]</a></li><li><a href="#mtu-%E6%9C%80%E5%A4%A7%E4%BC%A0%E8%BE%93%E5%8D%95%E5%85%83-%E4%B8%8E%E5%88%86%E6%AE%B5">MTU (最大传输单元) 与分段</a></li></ul></li><li><a href="#ipv6">IPv6</a><ul><li><a href="#%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F-imp-1">数据报格式 [IMP]</a></li></ul></li><li><a href="#ipv4-ipv6-%E5%A4%B4%E9%83%A8%E5%AF%B9%E6%AF%94">IPv4 IPv6 头部对比</a></li><li><a href="#ipv4-ipv6-%E6%B7%B7%E5%90%88">IPv4 IPv6 混合</a></li></ul></li><li><a href="#chapter-21-%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD">Chapter 21 地址映射、差错报告和多播</a><ul><li><a href="#arp">ARP</a><ul><li><a href="#%E6%A6%82%E5%BF%B5-imp">概念 [IMP]</a></li><li><a href="#%E5%88%86%E7%BB%84%E6%A0%BC%E5%BC%8F">分组格式</a></li><li><a href="#%E6%93%8D%E4%BD%9C">操作</a><ul><li><a href="#%E6%B5%81%E7%A8%8B">流程</a></li></ul></li></ul></li><li><a href="#dhcp">DHCP</a></li><li><a href="#icmp">ICMP</a><ul><li><a href="#%E6%A6%82%E5%BF%B5-imp-1">概念 [IMP]</a></li><li><a href="#%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F-imp">报文格式 [IMP]</a></li><li><a href="#%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A-imp">差错报告 [IMP]</a></li><li><a href="#%E6%9F%A5%E8%AF%A2%E6%8A%A5%E6%96%87">查询报文</a></li></ul></li><li><a href="#igmp">IGMP</a></li></ul></li><li><a href="#chapter-22-%E4%BC%A0%E9%80%92%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9">Chapter 22 传递、转发和路由选择</a><ul><li><a href="#%E8%BD%AC%E5%8F%91%E6%8A%80%E6%9C%AF">转发技术</a></li><li><a href="#%E8%BD%AC%E5%8F%91%E8%BF%87%E7%A8%8B">转发过程</a></li><li><a href="#%E5%9C%B0%E5%9D%80%E8%81%9A%E5%90%88-imp">地址聚合 [IMP]</a></li><li><a href="#%E6%9C%80%E9%95%BF%E6%8E%A9%E7%A0%81%E5%8C%B9%E9%85%8D-imp">最长掩码匹配 [IMP]</a></li></ul></li></ul></li><li><a href="#part-5-%E4%BC%A0%E8%BE%93%E5%B1%82">Part 5 传输层</a><ul><li><a href="#chapter-23-udptcp-%E5%92%8C-sctp">Chapter 23 UDP、TCP 和 SCTP</a><ul><li><a href="#%E7%AB%AF%E5%8F%A3-imp">端口 [IMP]</a></li><li><a href="#udp">UDP</a><ul><li><a href="#%E6%A6%82%E5%BF%B5">概念</a></li><li><a href="#udp-%E7%9A%84%E7%86%9F%E7%9F%A5%E7%AB%AF%E5%8F%A3-imp">UDP 的熟知端口 [IMP]</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E6%8A%A5%E7%BB%93%E6%9E%84">数据报结构</a></li><li><a href="#%E6%A0%A1%E9%AA%8C%E5%92%8C-imp">校验和 [IMP]</a></li></ul></li><li><a href="#tcp-imp">TCP [IMP]</a><ul><li><a href="#%E6%A6%82%E5%BF%B5%E4%B8%8E%E7%89%B9%E7%82%B9">概念与特点</a></li><li><a href="#%E6%AE%B5%E6%A0%BC%E5%BC%8F">段格式</a></li><li><a href="#%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B">连接的建立</a></li><li><a href="#%E8%BF%9E%E6%8E%A5%E7%BB%88%E6%AD%A2">连接终止</a><ul><li><a href="#%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B">三次挥手</a></li><li><a href="#%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B">四次挥手</a></li></ul></li><li><a href="#%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6">差错控制</a><ul><li><a href="#%E6%A0%A1%E9%AA%8C%E5%92%8C-1">校验和</a></li><li><a href="#%E7%A1%AE%E8%AE%A4-1">确认</a></li><li><a href="#%E9%87%8D%E4%BC%A0">重传</a></li></ul></li><li><a href="#tcp-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6">TCP 拥塞控制</a></li><li><a href="#tcp-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6-imp">TCP 流量控制 [IMP]</a></li></ul></li></ul></li><li><a href="#chapter-24-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%92%8C%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F">Chapter 24 拥塞控制和服务质量</a><ul><li><a href="#%E5%90%9E%E5%90%90%E9%87%8F%E5%92%8C%E5%BB%B6%E8%BF%9F-imp">吞吐量和延迟 [IMP]</a></li><li><a href="#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6-imp">拥塞控制 [IMP]</a><ul><li><a href="#%E5%BC%80%E7%8E%AF%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6">开环拥塞控制</a></li><li><a href="#%E9%97%AD%E7%8E%AF%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6">闭环拥塞控制</a></li></ul></li></ul></li></ul></li><li><a href="#part-6-%E5%BA%94%E7%94%A8%E5%B1%82">Part 6 应用层</a><ul><li><a href="#chapter-25-%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F">Chapter 25 域名系统</a><ul><li><a href="#%E5%9F%9F%E5%90%8D%E7%A9%BA%E9%97%B4-imp">域名空间 [IMP]</a></li><li><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90-imp">客户端服务器模式的域名解析 [IMP]</a></li><li><a href="#dns-%E6%8A%A5%E6%96%87">DNS 报文</a></li></ul></li><li><a href="#chapter-26-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93">Chapter 26 远程登录、电子邮件和文件传输</a><ul><li><a href="#telnet">TELNET</a></li><li><a href="#%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6">电子邮件</a><ul><li><a href="#%E6%9E%84%E6%9E%B6">构架</a></li><li><a href="#mime-imp">MIME [IMP]</a></li><li><a href="#smtp-imp">SMTP [IMP]</a></li><li><a href="#pop3-%E5%92%8C-imap4-imp">POP3 和 IMAP4 [IMP]</a></li></ul></li><li><a href="#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93">文件传输</a><ul><li><a href="#ftp-imp">FTP [IMP]</a></li></ul></li></ul></li><li><a href="#chapter-27-%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B8%8E%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">Chapter 27 万维网与超文本传输协议</a><ul><li><a href="#url-imp">URL [IMP]</a></li><li><a href="#http">HTTP</a><ul><li><a href="#%E6%A6%82%E5%BF%B5-imp-2">概念 [IMP]</a></li><li><a href="#%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84-imp">报文结构 [IMP]</a></li><li><a href="#http-%E6%93%8D%E4%BD%9C">HTTP 操作</a></li></ul></li></ul></li></ul></li></ul><!-- /code_chunk_output --><h1 id="part-1-概述"><a class="markdownIt-Anchor" href="#part-1-概述"></a> Part 1 概述</h1><h2 id="chapter-1-绪论"><a class="markdownIt-Anchor" href="#chapter-1-绪论"></a> Chapter 1 绪论</h2><h3 id="数据通信的概念"><a class="markdownIt-Anchor" href="#数据通信的概念"></a> 数据通信的概念</h3><ul><li>四个关键因素: 传递性 准确性 及时性 抖动性</li><li>五个组成部分: 报文 发送方 接收方 传输介质 协议</li></ul><h3 id="数据流-imp"><a class="markdownIt-Anchor" href="#数据流-imp"></a> 数据流 [IMP]</h3><ul><li>单工: 通信是单方向的</li><li>半双工: 通信是双向的, 但不能同时收发</li><li>全双工: 双向通信, 可同时收发</li></ul><h3 id="连接类型"><a class="markdownIt-Anchor" href="#连接类型"></a> 连接类型</h3><ul><li>点到点: 两设备间的专用线路</li><li>多点连接: 两台以上的设备共用单一链路</li></ul><h3 id="物理拓扑结构"><a class="markdownIt-Anchor" href="#物理拓扑结构"></a> 物理拓扑结构</h3><ul><li>网状: 任意两设备间都有专用的点到点线路, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>台设备需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n*(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">∗</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 条双工链路</li><li>星型: 每台设备仅拥有一条与中央控制器 (被称为集线器, hub) 相连的点到点线路</li><li>总线: 用一条较长的线缆作为主干来连接网络上的所有设备, 各设备通过引出线连接到主干</li><li>环状: 每台设备只与两侧设备有一条专用的点到点连接, 信号以一个方向在环中传输, 每台设备均有中继器 (可再生并转发收到的所有信号)</li><li>混合型</li></ul><h3 id="网络分类-imp"><a class="markdownIt-Anchor" href="#网络分类-imp"></a> 网络分类 [IMP]</h3><ul><li>局域网 (local area network, LAN): 小范围内的共享, 例如一间办公室或一所学校, 通常仅采用一种传输介质</li><li>广域网 (wide area network, WAN):<ul><li>交换广域网: 将不同的网络连接起来, 通常包含至少一个网际互联设备 (例如路由器)</li><li>点到点广域网: 将一台设备连接到广域网, 例如 ISP (Internet service provider, 网络服务提供商) 提供的网络服务</li></ul></li><li>城域网 (metropolitian area network, MAN): 规模介于 LAN 和 WAN 之间, 覆盖范围通常是一个乡镇 / 城市</li></ul><h3 id="协议和标准-imp"><a class="markdownIt-Anchor" href="#协议和标准-imp"></a> 协议和标准 [IMP]</h3><h4 id="协议三要素"><a class="markdownIt-Anchor" href="#协议三要素"></a> 协议三要素</h4><ul><li>语法: 数据的结构或格式, 即数据是以何种顺序表示的</li><li>语义: 每一个位片段的含义, 即如何理解每一个位置上的位的含义</li><li>时序: 报文发送的时间和发送的速率</li></ul><h4 id="标准"><a class="markdownIt-Anchor" href="#标准"></a> 标准</h4><ul><li>事实标准: 未经团体或组织承认但已经在广泛使用中的标准</li><li>法定标准: 有官方认可的组织制定的标准</li></ul><h2 id="chapter-2-网络模型"><a class="markdownIt-Anchor" href="#chapter-2-网络模型"></a> Chapter 2 网络模型</h2><p><img src="20210616190804.png" alt="Model"></p><h3 id="osi模型-imp"><a class="markdownIt-Anchor" href="#osi模型-imp"></a> OSI模型 [IMP]</h3><p>OSI (Open System Interconnection, 开放系统互连) 模型, <strong>不是协议, 也不是 ISO 那个组织</strong></p><h4 id="分层的概念与层间连接"><a class="markdownIt-Anchor" href="#分层的概念与层间连接"></a> 分层的概念与层间连接</h4><ul><li>对等过程: 设备间同一层次的通信过程, 例如物理层 - 物理层, 传输层 - 传输层</li><li>层间接口: 每层的接口都定义了本层向上下两层提供的服务, 无关层内的具体实现, 便于修改</li><li>封装: 第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 层的分组中的数据部分是第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 层的完整分组, 后者被 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 层视为一个完整的数据单元, 不关心内部结构</li></ul><h4 id="各层功能"><a class="markdownIt-Anchor" href="#各层功能"></a> 各层功能</h4><h5 id="物理层"><a class="markdownIt-Anchor" href="#物理层"></a> 物理层</h5><p><strong>负责位从一个节点到另一个节点的传递</strong>, 定义了接口和介质的物理特性, <strong>不对数据进行任何改动</strong></p><h6 id="功能"><a class="markdownIt-Anchor" href="#功能"></a> 功能</h6><ul><li>位的表示 (把0 1转换为对应种类的信号)</li><li>传输速率 (发送位的速度, 每一位持续的时间)</li><li>位同步, 线路配置, 物理拓扑结构, 传输方式等等</li></ul><h5 id="数据链路层"><a class="markdownIt-Anchor" href="#数据链路层"></a> 数据链路层</h5><p><strong>负责帧从一个节点 (node, 通常也被称作一跳, one hop)到下一个节点 (即下一跳) 的传递, 在同一个网络内部</strong>, 将物理层变为可靠的链路</p><h6 id="功能-2"><a class="markdownIt-Anchor" href="#功能-2"></a> 功能</h6><ul><li>成帧: 将来自网络层的位流分割为帧 (frame)</li><li>物理寻址: <strong>在本地网络范围内</strong>, 按照网络设备的物理地址寻找接收者, 例如 MAC 地址</li><li>流量控制: 协调发送速率, 防止过载</li><li>差错控制: 检测与重发损坏与丢失的帧, 并防止重复的帧</li><li>访问控制: 并发访问同一条链路时决定访问的顺序</li></ul><h5 id="网络层"><a class="markdownIt-Anchor" href="#网络层"></a> 网络层</h5><p><strong>负责将各个分组从源地址传送到目的地址 (源端到目的端, 即端到端), 可以跨网络传送</strong>, 但不保证报文间的到达顺序 - <s>所以叫网络层(个人理解)</s></p><h6 id="功能-3"><a class="markdownIt-Anchor" href="#功能-3"></a> 功能</h6><ul><li>逻辑寻址: 与物理寻址相对, 可以跨网络</li><li>路由选择: 提供在网络间传递分组的路径</li></ul><h5 id="传输层"><a class="markdownIt-Anchor" href="#传输层"></a> 传输层</h5><p><strong>负责报文的进程到进程传递</strong>, 保证报文间的<strong>顺序</strong>与内容正确并提供给相应的进程</p><h6 id="功能-4"><a class="markdownIt-Anchor" href="#功能-4"></a> 功能</h6><ul><li>服务点寻址: 也叫端口寻址, 把报文送到对应端口的进程中</li><li>分段和组装: 将进程发来的长报文进行切分并标上序号, 保证数据的顺序正确且不会丢失</li><li>连接控制: 传输层可以是面向连接或者无连接的, 对前者在数据开始传输前需要建立连接</li><li>流量控制: 和数据链路层类似, 但是是端口到端口级别的</li><li>差错控制: 和数据链路层类似, 但是是端口到端口级别的</li></ul><h5 id="会话层"><a class="markdownIt-Anchor" href="#会话层"></a> 会话层</h5><p>负责对话控制 (半双工或者全双工) 与同步 (增加检查点以便快速恢复)</p><h5 id="表示层"><a class="markdownIt-Anchor" href="#表示层"></a> 表示层</h5><p>负责翻译, 压缩与加密数据, 是两个系统间交换信息的语义和语法</p><h5 id="应用层"><a class="markdownIt-Anchor" href="#应用层"></a> 应用层</h5><p><strong>使用户可以访问网络</strong>, 提供了服务支持, 例如文件传输, 邮件服务, 虚拟终端等</p><h3 id="tcpip-协议族-imp"><a class="markdownIt-Anchor" href="#tcpip-协议族-imp"></a> TCP/IP 协议族 [IMP]</h3><p>TCP/IP 协议族在 OSI 模型之前开发, 有四个层次, 两者并不严格对应</p><h4 id="各层功能-2"><a class="markdownIt-Anchor" href="#各层功能-2"></a> 各层功能</h4><h5 id="主机到网络层"><a class="markdownIt-Anchor" href="#主机到网络层"></a> 主机到网络层</h5><p><strong>相当于 OSI 的物理层和数据链路层</strong>, TCP/IP 支持所有的标准与专用协议, 没有在这一层进行任何定义</p><h5 id="互联网层"><a class="markdownIt-Anchor" href="#互联网层"></a> 互联网层</h5><p><strong>相当于 OSI 的网络层</strong>, TCP/IP 支持网际协议 (即IP), 后者使用四个支持协议: ARP, RARP, ICMP, IGMP</p><ul><li>IP: 网际协议, 是无连接, 不可靠的尽力传递服务, 无差错检测</li><li>ARP: 逻辑地址 -&gt; 物理地址</li><li>RARP: 物理地址 -&gt; 逻辑地址</li><li>ICMP: 因特网控制报文协议</li><li>IGMP: 因特网组报文协议, 实现一个报文同时发送给一组接收者</li></ul><h5 id="传输层-2"><a class="markdownIt-Anchor" href="#传输层-2"></a> 传输层</h5><p><strong>相当于 OSI 的传输层</strong>, 有三个协议: TCP ,UDP 和 SCTP (流传输控制协议)<br>TCP 是有连接的可靠的流传输协议, UDP 无连接, 不可靠</p><h5 id="应用层-2"><a class="markdownIt-Anchor" href="#应用层-2"></a> 应用层</h5><p><strong>相当于 OSI 的会话层, 表示层和应用层</strong>, 常见的 FTP, HTTP, SMTP 等协议在这一层</p><h3 id="地址与寻址-imp"><a class="markdownIt-Anchor" href="#地址与寻址-imp"></a> 地址与寻址 [IMP]</h3><p>地址有物理地址, 逻辑地址, 端口地址, 专用地址</p><h4 id="物理地址"><a class="markdownIt-Anchor" href="#物理地址"></a> 物理地址</h4><p><strong>在物理层+数据链路层</strong>, 最低级的地址, 在本地网络中有效, 不同种类网络可能不同</p><h4 id="逻辑地址"><a class="markdownIt-Anchor" href="#逻辑地址"></a> 逻辑地址</h4><p><strong>在网络层</strong>, 与物理地址<strong>无关</strong>, 唯一定义了因特网的一台主机<br>跳到跳时<strong>物理地址改变</strong> (因为通过了不同的网络设备的中继), 但是<strong>逻辑地址不变</strong> (因为预期的收发者对应的主机不变)</p><blockquote><p>在多数协议中, 逻辑源地址在逻辑目的地址之前, 和物理地址刚好相反</p></blockquote><h4 id="端口地址"><a class="markdownIt-Anchor" href="#端口地址"></a> 端口地址</h4><p><strong>在传输层</strong>, 端口对应主机上的进程, 显然在跳到跳传递时端口地址也不变</p><h4 id="专用地址"><a class="markdownIt-Anchor" href="#专用地址"></a> 专用地址</h4><p><strong>在网络层</strong>, 例如电子邮件地址, 统一资源定位符 (URL, 例如网址)<br>由发送计算机转换成对应的端口地址和逻辑地址</p><h1 id="part-2-物理层与介质"><a class="markdownIt-Anchor" href="#part-2-物理层与介质"></a> Part 2 物理层与介质</h1><p>最核心的两个公式 - 波长 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>, 波速 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>, 周期 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>, 频率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 之间的关系</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mo>=</mo><mi>v</mi><mo>×</mo><mi>T</mi><mo>=</mo><mfrac><mi>v</mi><mi>f</mi></mfrac></mrow><annotation encoding="application/x-tex">\lambda = v \times T = \frac{v}{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>=</mo><mfrac><mn>1</mn><mi>f</mi></mfrac></mrow><annotation encoding="application/x-tex">T = \frac{1}{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>国际单位制下的量级表示</p><table><thead><tr><th>词头</th><th>单位</th><th>词头</th><th>单位</th></tr></thead><tbody><tr><td>毫 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></td><td>千 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">10^{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>微 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>6</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></td><td>兆 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">10^{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>纳 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>9</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span></td><td>吉 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^{9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>皮 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>12</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></td><td>太 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">10^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></td></tr></tbody></table><h2 id="chapter-3-数据与信号"><a class="markdownIt-Anchor" href="#chapter-3-数据与信号"></a> Chapter 3 数据与信号</h2><h3 id="关于频率-频域与带宽"><a class="markdownIt-Anchor" href="#关于频率-频域与带宽"></a> 关于频率, 频域与带宽</h3><p>通过傅里叶分析, 可以将任何复合信号分解为一系列正弦波</p><p>对于周期复合信号, 正弦波的频率是离散的; 对于非周期复合信号, 正弦波的频率是连续的</p><p>将分解后得到的正弦波系列表示到 频率 - 振幅 图上, 即得频域图</p><p>复合信号包含的频率范围称为带宽, 即信号最高频率与最低频率的差值</p><h3 id="数字信号与传输"><a class="markdownIt-Anchor" href="#数字信号与传输"></a> 数字信号与传输</h3><p>数字信号是<strong>带宽无穷大</strong>的复合模拟信号, 每一个电平可以表示多个位</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">每</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">电</mi><mi mathvariant="normal">平</mi><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">位</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">量</mi><mo>=</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mrow><mi mathvariant="normal">电</mi><mi mathvariant="normal">平</mi><mi mathvariant="normal">数</mi></mrow></mrow><annotation encoding="application/x-tex">每个电平表示的位的数量 = \log_2{电平数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">量</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">数</span></span></span></span></span></span></p><h4 id="比特率"><a class="markdownIt-Anchor" href="#比特率"></a> 比特率</h4><p>一秒钟内发送的位数, 以 bps 表示</p><h4 id="位长"><a class="markdownIt-Anchor" href="#位长"></a> 位长</h4><p>一个位在传输介质上的持续时间</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">位</mi><mi mathvariant="normal">长</mi><mo>=</mo><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">度</mi><mo>×</mo><mi mathvariant="normal">位</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">持</mi><mi mathvariant="normal">续</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow><annotation encoding="application/x-tex">位长 = 传播速度 \times 位的持续时间</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">长</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">度</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">持</span><span class="mord cjk_fallback">续</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span></span></span></p><h4 id="传输"><a class="markdownIt-Anchor" href="#传输"></a> 传输</h4><h5 id="基带传输"><a class="markdownIt-Anchor" href="#基带传输"></a> 基带传输</h5><p>通过通道<strong>直接</strong>发送数字信号, 不转换为模拟信号, <strong>需要一个下限频率为0的低通通道</strong></p><h6 id="宽带宽的低通通道"><a class="markdownIt-Anchor" href="#宽带宽的低通通道"></a> 宽带宽的低通通道</h6><p>基本可以保持数字信号的形状, 例如同轴电缆和光纤</p><h6 id="有限带宽的低通通道"><a class="markdownIt-Anchor" href="#有限带宽的低通通道"></a> 有限带宽的低通通道</h6><p>发送的数字信号需要近似成模拟信号,比特率为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 的数字信号传输最小需要的带宽 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">B_{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 满足</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><mfrac><mi>N</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">B_{min} = \frac{N}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>通过增加更多谐波可以更好地近似</p><h5 id="宽带传输"><a class="markdownIt-Anchor" href="#宽带传输"></a> 宽带传输</h5><p>通过调制把数字信号转换成模拟信号传输, 可以使用带通通道 (带宽不从零开始的通道)</p><h4 id="传输减损-imp"><a class="markdownIt-Anchor" href="#传输减损-imp"></a> 传输减损 [IMP]</h4><h5 id="衰减"><a class="markdownIt-Anchor" href="#衰减"></a> 衰减</h5><p>能量的损失, 可以使用放大器来补偿</p><h6 id="分贝"><a class="markdownIt-Anchor" href="#分贝"></a> 分贝</h6><p>定义了信号损失或者增益的相对强度, 可以直接加减, 若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为信号在两点处的<strong>功率</strong>, 则</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>B</mi><mo>=</mo><mn>10</mn><mo>∗</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><mfrac><msub><mi>P</mi><mn>2</mn></msub><msub><mi>P</mi><mn>1</mn></msub></mfrac></mrow><annotation encoding="application/x-tex">dB = 10 * \log_{10}\frac{P_2}{P_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>需要记住的结论:</p><ul><li>衰减为负, 放大为正</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>3</mn><mi>d</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">-3dB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>d</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">3dB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 衰减说明信号的功率衰减了一半</li></ul><p>分贝有时候也被用作以毫瓦计量信号功率的单位, 这时称作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><msub><mi>B</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">dB_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><msub><mi>B</mi><mi>m</mi></msub><mo>=</mo><mn>10</mn><mo>×</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><msub><mi>P</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">dB_m = 10 \times \log_{10}P_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h5 id="失真"><a class="markdownIt-Anchor" href="#失真"></a> 失真</h5><p>信号改变了形态或形状, 产生在有不同频率成分的复合信号中</p><h5 id="噪声"><a class="markdownIt-Anchor" href="#噪声"></a> 噪声</h5><p>信号在传输过程中被掺杂的非信号成分</p><h6 id="信噪比"><a class="markdownIt-Anchor" href="#信噪比"></a> 信噪比</h6><p>信号功率与噪声功率的比值, 用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">SNR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 表示</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">平</mi><mi mathvariant="normal">均</mi><mi mathvariant="normal">信</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">功</mi><mi mathvariant="normal">率</mi></mrow><mrow><mi mathvariant="normal">平</mi><mi mathvariant="normal">均</mi><mi mathvariant="normal">噪</mi><mi mathvariant="normal">声</mi><mi mathvariant="normal">功</mi><mi mathvariant="normal">率</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">SNR = \frac{平均信号功率}{平均噪声功率}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.363em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">均</span><span class="mord cjk_fallback">噪</span><span class="mord cjk_fallback">声</span><span class="mord cjk_fallback">功</span><span class="mord cjk_fallback">率</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">均</span><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">功</span><span class="mord cjk_fallback">率</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>使用分贝单位描述信噪比, 被称为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mi>d</mi><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{SNR}_{dB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mi>d</mi><mi>B</mi></mrow></msub><mo>=</mo><mn>10</mn><mo>×</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow></mrow><annotation encoding="application/x-tex">{SNR}_{dB} = 10 \times \log_{10}{SNR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></span></span></p><h3 id="数据速率限制-imp"><a class="markdownIt-Anchor" href="#数据速率限制-imp"></a> 数据速率限制 [IMP]</h3><p>取决于三个因素: 有效带宽, 使用的信号电平数, 信道的质量 (噪声有多大)</p><p>下面 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 表示带宽, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 表示比特率, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 表示使用的信号电平的数量, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">SNR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 表示信噪比</p><h4 id="无噪声通道-奈奎斯特比特率"><a class="markdownIt-Anchor" href="#无噪声通道-奈奎斯特比特率"></a> 无噪声通道: 奈奎斯特比特率</h4><p>对无噪声通道, 奈奎斯特比特率公式给出了理论上的最大比特率:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>=</mo><mn>2</mn><mo>×</mo><mi>B</mi><mo>×</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>L</mi></mrow><annotation encoding="application/x-tex">N = 2 \times B \times \log_{2}L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">L</span></span></span></span></span></p><p>在带宽一定时, 通过增加 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 可以提高传输速率, 但会让接收方难以区分, 降低可靠性</p><h4 id="有噪声通道-香农容量定理"><a class="markdownIt-Anchor" href="#有噪声通道-香农容量定理"></a> 有噪声通道: 香农容量定理</h4><p>香农容量定理给出了有噪声通道的通道容量:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">通</mi><mi mathvariant="normal">道</mi><mi mathvariant="normal">容</mi><mi mathvariant="normal">量</mi><mo>=</mo><mi>B</mi><mo>×</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>S</mi><mi>N</mi><mi>R</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">通道容量 = B \times \log_{2}{(1 + SNR)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">道</span><span class="mord cjk_fallback">容</span><span class="mord cjk_fallback">量</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></span></span></p><p>公式与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 无关, 说明无论使用多少电平都无法获得超过通道容量的数据传输速率</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">SNR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 很大时, 有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi><mo>≈</mo><mi>S</mi><mi>N</mi><mi>R</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">SNR \approx SNR+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 所以通道容量可化简为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">通</mi><mi mathvariant="normal">道</mi><mi mathvariant="normal">容</mi><mi mathvariant="normal">量</mi><mo>=</mo><mi>B</mi><mo>×</mo><mfrac><msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mtext>&nbsp;</mtext><mtext mathvariant="bold">dB</mtext><mtext>&nbsp;</mtext></mrow></msub><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">通道容量 = B \times \frac{ {SNR}_\textbf{ {dB} } }{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">道</span><span class="mord cjk_fallback">容</span><span class="mord cjk_fallback">量</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord textbf mtight">&nbsp;</span><span class="mord mtight"><span class="mord textbf mtight">d</span><span class="mord textbf mtight">B</span></span><span class="mord textbf mtight">&nbsp;</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>注意此时使用的是 <strong>SNR <sub>dB</sub></strong></p><h4 id="总结-imp"><a class="markdownIt-Anchor" href="#总结-imp"></a> 总结 [IMP]</h4><p>香农定理给出数据传输速率的上限, 奈奎斯特公式给出所需的信号电平数</p><h3 id="性能"><a class="markdownIt-Anchor" href="#性能"></a> 性能</h3><h4 id="带宽"><a class="markdownIt-Anchor" href="#带宽"></a> 带宽</h4><p>可以指两个东西: 以频率衡量, 或以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">bps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span></span></span></span> 衡量<br>前者表明通道的频率范围, 后者表明每秒能发送的位数</p><h4 id="吞吐量"><a class="markdownIt-Anchor" href="#吞吐量"></a> 吞吐量</h4><p>衡量通过网络发送数据的快慢, 必定小于等于带宽</p><h4 id="延迟"><a class="markdownIt-Anchor" href="#延迟"></a> 延迟</h4><p>第一个位从源端到最后一个位 (即整个报文) 到达目的端的时间, 由四部分组成</p><h5 id="传播时间"><a class="markdownIt-Anchor" href="#传播时间"></a> 传播时间</h5><p>介质中一个位从源端到目标的时间</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">距</mi><mi mathvariant="normal">离</mi></mrow><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">度</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">传播时间 = \frac{距离}{传播速度}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.363em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">度</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">距</span><span class="mord cjk_fallback">离</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h5 id="传输时间"><a class="markdownIt-Anchor" href="#传输时间"></a> 传输时间</h5><p>报文的第一个位与最后一个位离开发送方的时间, 也就是发送方把报文加载到介质上所用的时间</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">输</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">报</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">长</mi><mi mathvariant="normal">度</mi></mrow><mrow><mi mathvariant="normal">带</mi><mi mathvariant="normal">宽</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">传输时间 = \frac{报文长度}{带宽}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.363em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">宽</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">报</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">长</span><span class="mord cjk_fallback">度</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h5 id="排队时间"><a class="markdownIt-Anchor" href="#排队时间"></a> 排队时间</h5><p>网络上每个中间设备在收到本报文后, 处理本报文前的时间 (因为有其他先到的报文等待处理)</p><h5 id="处理延迟"><a class="markdownIt-Anchor" href="#处理延迟"></a> 处理延迟</h5><p>接收者处理报文所用的时间 (书上不知道为啥没写这点…)</p><h4 id="带宽与延迟的乘积"><a class="markdownIt-Anchor" href="#带宽与延迟的乘积"></a> 带宽与延迟的乘积</h4><p>充满整个链路的位的个数</p><h2 id="chapter-4-数字传输"><a class="markdownIt-Anchor" href="#chapter-4-数字传输"></a> Chapter 4 数字传输</h2><h3 id="线路编码"><a class="markdownIt-Anchor" href="#线路编码"></a> 线路编码</h3><h4 id="数据元素与信号元素-imp"><a class="markdownIt-Anchor" href="#数据元素与信号元素-imp"></a> 数据元素与信号元素 [IMP]</h4><ul><li>数据元素: 表示信息的最小实体, 即位</li><li>信号元素: 发送的最小单元</li></ul><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>: 每个信号元素承载的数据元素的数量</p><h5 id="数据速率与信号速率"><a class="markdownIt-Anchor" href="#数据速率与信号速率"></a> 数据速率与信号速率</h5><ul><li>数据速率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> : 每秒发送的数据元素的数量, 单位是 <em>每秒位 (bps)</em>, 也称作<strong>比特率</strong></li><li>信号速率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> : 每秒发送的信号元素的数量, 单位是 <em>波特 (baud)</em>, 也称作调制速率, <strong>波特率</strong></li><li>情形因子 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> : 会根据每种情形改变</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>c</mi><mo>×</mo><mi>N</mi><mo>×</mo><mfrac><mn>1</mn><mi>r</mi></mfrac><mtext>&nbsp;&nbsp;</mtext><mi>b</mi><mi>a</mi><mi>u</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">S = c \times N \times \frac{1}{r} \ \ baud</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace">&nbsp;</span><span class="mspace">&nbsp;</span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">u</span><span class="mord mathdefault">d</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><mi>c</mi><mo>×</mo><mi>N</mi><mo>×</mo><mfrac><mn>1</mn><mi>r</mi></mfrac></mrow><annotation encoding="application/x-tex">B_{min} = c \times N \times \frac{1}{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>注意第二个公式和奈奎斯特公式的关系 (可以相互推导, 书 p69 中间 例4.2)</p><h4 id="基线偏移"><a class="markdownIt-Anchor" href="#基线偏移"></a> 基线偏移</h4><ul><li>基线偏移: 接收方通过计算接收的信号的功率平均值 (即"基线") 来确定高低电平, 连续的 0 或者 1 会影响基线</li><li>直流成分: 信号中的电平保持一定时间的恒定时, 会产生很低的频率, 近似直流 (DC)</li></ul><h4 id="自同步"><a class="markdownIt-Anchor" href="#自同步"></a> 自同步</h4><p>通过在信号中添加能提示接收方的定时信息来实现双方的时钟同步</p><h3 id="线路编码-imp"><a class="markdownIt-Anchor" href="#线路编码-imp"></a> 线路编码 [IMP]</h3><p><img src="20210615193504.png" alt="编码方案"></p><h4 id="nrz-不归零编码"><a class="markdownIt-Anchor" href="#nrz-不归零编码"></a> NRZ (不归零编码)</h4><p>1 为正电平, 0 为零电平, 因为在位中间电平不为零而得名</p><h5 id="nrz-l-与-nrz-i"><a class="markdownIt-Anchor" href="#nrz-l-与-nrz-i"></a> NRZ-L 与 NRZ-I</h5><p><img src="20210615193725.png" alt="NRZ-L/I"></p><p>NRZ-L 中电平决定位的值, NRZ-I 中每一个周期的电平和前一个周期相比是否反转决定位的值</p><ul><li>基线偏移: 均有, 但 NRZ-I 中仅全 0 的序列会导致偏移</li><li>同步问题: 均有, 但 NRZ-I 中仅全 0 的序列会导致同步问题</li><li>直流成分: 均有</li><li>平均信号速率: 均为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mn>2</mn><mtext>&nbsp;</mtext><mrow><mi>B</mi><mi>d</mi></mrow></mrow><annotation encoding="application/x-tex">N/2 \ {Bd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord">2</span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">d</span></span></span></span></span></li></ul><blockquote><p>因为全 0 时 NRZ-I 的电平不变, 但全 1 时能一直反转</p></blockquote><h4 id="rz-归零编码"><a class="markdownIt-Anchor" href="#rz-归零编码"></a> RZ (归零编码)</h4><p><img src="20210615194511.png" alt="RZ"></p><p>在位中间信号必定归零, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">r = \frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h4 id="曼彻斯特编码-和-差分曼彻斯特编码"><a class="markdownIt-Anchor" href="#曼彻斯特编码-和-差分曼彻斯特编码"></a> 曼彻斯特编码 和 差分曼彻斯特编码</h4><p><img src="20210615194637.png" alt="Manchester/DiffMan"></p><ul><li>双向编码, 也称作两项编码</li><li>均有自同步信号</li><li>均无直流成分</li><li>平均信号速率: 均为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mtext>&nbsp;</mtext><mrow><mi>B</mi><mi>d</mi></mrow></mrow><annotation encoding="application/x-tex">N \ {Bd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">d</span></span></span></span></span></li></ul><h5 id="曼彻斯特编码"><a class="markdownIt-Anchor" href="#曼彻斯特编码"></a> 曼彻斯特编码</h5><ul><li>RZ 和 NRZ-L 思想组合而成</li><li>位中间的跳变提供了自同步信号</li></ul><h5 id="差分曼彻斯特编码"><a class="markdownIt-Anchor" href="#差分曼彻斯特编码"></a> 差分曼彻斯特编码</h5><ul><li>RZ 和 NRZ-I 思想组合而成</li><li>位中间的跳变提供了自同步信号</li></ul><h4 id="ami-和-伪三元编码"><a class="markdownIt-Anchor" href="#ami-和-伪三元编码"></a> AMI 和 伪三元编码</h4><p><img src="20210615195837.png" alt="AMI/Pseudo"></p><ul><li>双极性编码, 使用三种电平 (正, 负, 零)</li><li>0 和 1 其中一个电平固定为0, 另一个由交替的正负电平表示</li><li>AMI 没有直流成分 (因为长 0 的电平为零, 长 1 正负交替抵消了)</li><li>AMI 在长 0 序列中存在同步问题, 采用扰动解决</li><li>平均信号速率: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mn>2</mn><mtext>&nbsp;</mtext><mrow><mi>B</mi><mi>d</mi></mrow></mrow><annotation encoding="application/x-tex">N/2 \ {Bd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord">2</span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">d</span></span></span></span></span></li></ul><h4 id="多电平与多线路编码"><a class="markdownIt-Anchor" href="#多电平与多线路编码"></a> 多电平与多线路编码</h4><p>按老师给的 pdf 仅要求了解, 看书就行</p><h4 id="线路编码-总结"><a class="markdownIt-Anchor" href="#线路编码-总结"></a> 线路编码 总结</h4><p><img src="20210615200432.png" alt="Summary"></p><blockquote><p>Biphase: 双向, 即曼彻斯特编码 和 差分曼彻斯特编码</p></blockquote><h3 id="块编码"><a class="markdownIt-Anchor" href="#块编码"></a> 块编码</h3><p>按老师给的 pdf 仅要求了解, 看书就行</p><h3 id="扰码"><a class="markdownIt-Anchor" href="#扰码"></a> 扰码</h3><p>建议看书 😵, p79</p><h3 id="脉冲码调制-pcm"><a class="markdownIt-Anchor" href="#脉冲码调制-pcm"></a> 脉冲码调制 (PCM)</h3><p>将模拟信号转为数字信号的最常用方法, 分为三步: <strong>采样  量化  编码</strong></p><h4 id="采样"><a class="markdownIt-Anchor" href="#采样"></a> 采样</h4><p>也被称作 脉冲振幅调制 (PAM)</p><ul><li>采样率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">f_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> : 每隔 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">T_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 对模拟信号进行采样, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>S</mi></msub><mo>=</mo><mfrac><mn>1</mn><msub><mi>T</mi><mi>S</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">f_S = \frac{1}{T_S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.290413em;vertical-align:-0.44530499999999995em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44530499999999995em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>奈奎斯特采样定理: <strong>采样速率至少是信号所含最高频率的两倍</strong></li></ul><h4 id="量化"><a class="markdownIt-Anchor" href="#量化"></a> 量化</h4><ol><li>假定原始信号在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>V</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo separator="true">,</mo><msub><mi>V</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[V_{min}, V_{max}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 范围中</li><li>将范围等分为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 个区间 (称为量化等级), 每个区间的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span></span></span></span></li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi><mo>=</mo><mfrac><mrow><msub><mi>V</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>−</mo><msub><mi>V</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><mi>L</mi></mfrac></mrow><annotation encoding="application/x-tex">delta = \frac{V_{max} - V_{min}}{L}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">L</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ol start="3"><li>取每个区间的中点作为每个区间的量化值, 然后将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>L</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \sim L-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的量化值分配给这些区间</li><li>将样本的振幅近似为量化值</li></ol><blockquote><p>建议参考 p83 的例子</p></blockquote><h5 id="量化误差"><a class="markdownIt-Anchor" href="#量化误差"></a> 量化误差</h5><ul><li>任何一个样本的误差值都小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{delta}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>量化误差对信号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mi>d</mi><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{SNR}_{dB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的影响取决于量化级别 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 或每个样本的位数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">n_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mi>d</mi><mi>B</mi></mrow></msub><mo>=</mo><mn>6.02</mn><mtext>&nbsp;</mtext><msub><mi>n</mi><mi>b</mi></msub><mo>+</mo><mn>1.76</mn><mtext>&nbsp;&nbsp;</mtext><mi>d</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">{SNR}_{dB} = 6.02\ n_b + 1.76 \ \ dB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">6</span><span class="mord">.</span><span class="mord">0</span><span class="mord">2</span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">7</span><span class="mord">6</span><span class="mspace">&nbsp;</span><span class="mspace">&nbsp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></span></p><h4 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>=</mo><msub><mi>f</mi><mi>S</mi></msub><mo>×</mo><msub><mi>n</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">N = f_S \times n_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 为编码后的比特率</p><h4 id="delta-调制"><a class="markdownIt-Anchor" href="#delta-调制"></a> Delta 调制</h4><p>对量化后的信号, 调制器内的比较器把它和一个梯形的基准信号进行比较, 前者大则为 1, 反之为 0.</p><p>梯形基准信号来自于调制器自身的输出, 1 为上升, 0 为下降, 变化量即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span></span></span></span>, 经过延迟后送入比较器.</p><p>Delta 调制同样存在量化误差, 但是远小于 PCM 的误差.</p><h3 id="传输模式-imp"><a class="markdownIt-Anchor" href="#传输模式-imp"></a> 传输模式 [IMP]</h3><h4 id="串行与并行"><a class="markdownIt-Anchor" href="#串行与并行"></a> 串行与并行</h4><ul><li>并行: 利用多个通道, 每次发送多个位</li><li>串行: 仅需一个通道, 每次仅发送一个位, 可采用同步, 异步或等时传输</li></ul><h4 id="同步与异步"><a class="markdownIt-Anchor" href="#同步与异步"></a> 同步与异步</h4><ul><li>异步: 将位流组合成组 (通常称为字节), 需要起始位和停止位, 不需要关心时序</li><li>同步: 将位流组合成帧 (更长, 包含多个字节), 没有时隙, 起始位与停止位</li><li>等时: 数据以恒定速率到达</li></ul><h2 id="chapter-5-模拟传输"><a class="markdownIt-Anchor" href="#chapter-5-模拟传输"></a> Chapter 5 模拟传输</h2><p><img src="20210616184347.png" alt="AnalogTrans"></p><h3 id="比特率和波特率-imp"><a class="markdownIt-Anchor" href="#比特率和波特率-imp"></a> 比特率和波特率 [IMP]</h3><p>定义带宽为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></p><ul><li>比特率: 数据速率, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></li><li>波特率: 信号速率, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>N</mi><mo>×</mo><mfrac><mn>1</mn><mi>r</mi></mfrac><mtext>&nbsp;&nbsp;</mtext><mi mathvariant="normal">波</mi><mi mathvariant="normal">特</mi></mrow><annotation encoding="application/x-tex">S=N \times \frac{1}{r} \ \ 波特</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace">&nbsp;</span><span class="mspace">&nbsp;</span><span class="mord cjk_fallback">波</span><span class="mord cjk_fallback">特</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>=</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>L</mi><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>L</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">信</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">种</mi><mi mathvariant="normal">类</mi><mi mathvariant="normal">数</mi></mrow><annotation encoding="application/x-tex">r = \log_2{L},\  L为信号元素的种类数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">L</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">L</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">种</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">数</span></span></span></span></span></p><h3 id="幅移键控-ask-imp"><a class="markdownIt-Anchor" href="#幅移键控-ask-imp"></a> 幅移键控 (ASK) [IMP]</h3><p><img src="20210616184439.png" alt="ASK"></p><ul><li>仅通过改变信号的振幅来生成信号元素, 不改变频率 相位等</li><li>若仅有两个振幅, 则称为 BASK (二进制 ASK) 或 OOK (开关键控)</li><li>带宽: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>d</mi><mo stretchy="false">)</mo><mo>×</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">B=(1+d) \times S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d \in [0, 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> , 取决于调制和过滤处理</li><li>载波频率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">f_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 位于带宽中间</li></ul><h3 id="频移键控-fsk-imp"><a class="markdownIt-Anchor" href="#频移键控-fsk-imp"></a> 频移键控 (FSK) [IMP]</h3><p><img src="20210616184518.png" alt="FSK"></p><ul><li>使用多种频率, 一种振幅, 若相邻两信号元素间相位一致, 称为"相干", 反之为"非相干"</li><li>若仅有两个频率, 则称为 BFSK (二进制 FSK)</li><li>带宽: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>d</mi><mo stretchy="false">)</mo><mo>×</mo><mi>S</mi><mo>+</mo><mn>2</mn><mi>D</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">B=(1+d) \times S + 2Df</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>D</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">2Df</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 为两个载波频率之差, 最小即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> (此时两个段紧贴)</li></ul><h3 id="相移键控-psk-imp"><a class="markdownIt-Anchor" href="#相移键控-psk-imp"></a> 相移键控 (PSK) [IMP]</h3><h4 id="二进制psk-bpsk"><a class="markdownIt-Anchor" href="#二进制psk-bpsk"></a> 二进制PSK (BPSK)</h4><p><img src="20210616185709.png" alt="BPSK"></p><ul><li>仅使用两个不同的相位: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">0 \degree</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">°</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>180</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">180 \degree</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mord">0</span><span class="mord">°</span></span></span></span></li><li>带宽: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>d</mi><mo stretchy="false">)</mo><mo>×</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">B=(1+d) \times S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>, 和 BASK 一样, 但抗噪声能力更强</li></ul><h4 id="正交psk-qpsk"><a class="markdownIt-Anchor" href="#正交psk-qpsk"></a> 正交PSK (QPSK)</h4><ul><li>使用两个独立的 BPSK 调制, 一个同相一个正交 (即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>90</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">90\degree</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">0</span><span class="mord">°</span></span></span></span>)</li><li>带宽: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>d</mi><mo stretchy="false">)</mo><mo>×</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">B=(1+d) \times S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>, 和 BFSK 一样</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>r</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">L=4, \ r = 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></li></ul><h4 id="星座图"><a class="markdownIt-Anchor" href="#星座图"></a> 星座图</h4><p><img src="20210616190219.png" alt="Constellation"></p><ul><li>X 轴为同相成分振幅, Y 轴为正交成分振幅</li><li>与原点距离为总振幅, 与 X 轴正半轴夹角为相位</li></ul><h3 id="正交振幅调制-qam-imp"><a class="markdownIt-Anchor" href="#正交振幅调制-qam-imp"></a> 正交振幅调制 (QAM) [IMP]</h3><ul><li>结合了 ASK 和 PSK 的理念, 同时利用了振幅和相位的变化</li><li>最小带宽: 和 ASK, PSK 相同 (忘了的话往前看看)</li></ul><h3 id="模拟信号调制"><a class="markdownIt-Anchor" href="#模拟信号调制"></a> 模拟信号调制</h3><p>AM, FM, PM, 提纲完全没提, 自己看一下书 p99 ~ p102 就行</p><h2 id="chapter-6-带宽利用"><a class="markdownIt-Anchor" href="#chapter-6-带宽利用"></a> Chapter 6 带宽利用</h2><h3 id="fdm-频分复用-imp"><a class="markdownIt-Anchor" href="#fdm-频分复用-imp"></a> FDM (频分复用) [IMP]</h3><ul><li>在同一介质上使用不同的频率传输信号</li><li>是模拟复用技术 (直接发送的是模拟信号, 因此数字信号需要先调制)</li><li>在分离时通过特定频段的滤波器实现通道分离</li><li>复用的要求<ul><li>链路带宽大于要传输的信号带宽之和</li><li>载波信号之间的频率差必须能容纳调制信号的带宽 (不发生重叠)</li><li>载波频率不影响原始的数据频率</li></ul></li></ul><h3 id="tdm-时分复用-imp"><a class="markdownIt-Anchor" href="#tdm-时分复用-imp"></a> TDM (时分复用) [IMP]</h3><ul><li>数字化复用过程</li><li>每个连接占用链路的一个时间段</li></ul><h4 id="同步-tdm"><a class="markdownIt-Anchor" href="#同步-tdm"></a> 同步 TDM</h4><p><img src="20210617185037.png" alt="S-TDM"></p><ul><li>每个输入的数据流划分为多个数据单元</li><li>所有输入的数据单元按照顺序组合成一个帧, 每个数据单元占一个<strong>时隙</strong></li><li>若有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个输入, 一帧的持续时间为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>:<ul><li>一帧中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个时隙</li><li>每个时隙的持续时间是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">T/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathdefault">n</span></span></span></span></li><li>链路速率是每个连接数据速率的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 倍</li></ul></li><li>需要在每帧开始的时候添加一些用来同步的<strong>帧指示位</strong></li><li>缺点: 当某个连接无数据发送时会出现<strong>空时隙</strong></li></ul><h5 id="t-1-帧-imp"><a class="markdownIt-Anchor" href="#t-1-帧-imp"></a> T-1 帧 [IMP]</h5><ul><li>将 24 路语音信号通过 TDM 组合为 1 路</li><li>采样: 每秒 8000 次, 每样本 8 位</li><li>每秒发送 8000 帧, 链路带宽 1.544 Mbps</li></ul><p>帧大小: 193位, 其中 1 位用于同步</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover><mover><mn>24</mn><mo stretchy="true">⏞</mo></mover><mrow><mi mathvariant="normal">通</mi><mi mathvariant="normal">道</mi><mi mathvariant="normal">数</mi></mrow></mover><mo>×</mo><mover><mover><mn>8</mn><mo stretchy="true">⏞</mo></mover><mrow><mi mathvariant="normal">样</mi><mi mathvariant="normal">本</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">小</mi></mrow></mover><mo>+</mo><mover><mover><mn>1</mn><mo stretchy="true">⏞</mo></mover><mrow><mi mathvariant="normal">同</mi><mi mathvariant="normal">步</mi><mi mathvariant="normal">位</mi></mrow></mover><mo>=</mo><mn>193</mn></mrow><annotation encoding="application/x-tex">\overbrace{24}^{通道数} \times \overbrace{8}^{样本大小} + \overbrace{1}^{同步位} = 193</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.57577em;vertical-align:-0.08333em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.49244em;"><span style="top:-3.29244em;"><span class="pstrut" style="height:3.29244em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.29244em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">4</span></span></span><span class="svg-align" style="top:-3.74444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMinYMin slice"><path d="M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z"></path></svg></span><span class="brace-center" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMidYMin slice"><path d="M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z"></path></svg></span><span class="brace-right" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMaxYMin slice"><path d="M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z"></path></svg></span></span></span></span></span></span></span></span><span style="top:-4.78488em;"><span class="pstrut" style="height:3.29244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">通</span><span class="mord cjk_fallback mtight">道</span><span class="mord cjk_fallback mtight">数</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.57577em;vertical-align:-0.08333em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.49244em;"><span style="top:-3.29244em;"><span class="pstrut" style="height:3.29244em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.29244em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span class="svg-align" style="top:-3.74444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMinYMin slice"><path d="M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z"></path></svg></span><span class="brace-center" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMidYMin slice"><path d="M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z"></path></svg></span><span class="brace-right" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMaxYMin slice"><path d="M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z"></path></svg></span></span></span></span></span></span></span></span><span style="top:-4.78488em;"><span class="pstrut" style="height:3.29244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">样</span><span class="mord cjk_fallback mtight">本</span><span class="mord cjk_fallback mtight">大</span><span class="mord cjk_fallback mtight">小</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.49244em;vertical-align:0em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.49244em;"><span style="top:-3.29244em;"><span class="pstrut" style="height:3.29244em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.29244em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span class="svg-align" style="top:-3.74444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMinYMin slice"><path d="M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z"></path></svg></span><span class="brace-center" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMidYMin slice"><path d="M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z"></path></svg></span><span class="brace-right" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMaxYMin slice"><path d="M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z"></path></svg></span></span></span></span></span></span></span></span><span style="top:-4.78488em;"><span class="pstrut" style="height:3.29244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">同</span><span class="mord cjk_fallback mtight">步</span><span class="mord cjk_fallback mtight">位</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mord">3</span></span></span></span></span></p><p>带宽: 1.544 Mbps</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>193</mn><mtext>&nbsp;</mtext><mi>b</mi><mi>p</mi><mi>s</mi><mo>×</mo><mover><mover><mn>8000</mn><mo stretchy="true">⏞</mo></mover><mrow><mi mathvariant="normal">每</mi><mi mathvariant="normal">秒</mi><mi mathvariant="normal">帧</mi><mi mathvariant="normal">数</mi></mrow></mover><mo>=</mo><mn>1.544</mn><mtext>&nbsp;</mtext><mi>M</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">193 \ bps \times \overbrace{8000}^{每秒帧数} = 1.544 \ Mbps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mord">3</span><span class="mspace">&nbsp;</span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.49244em;vertical-align:0em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.49244em;"><span style="top:-3.29244em;"><span class="pstrut" style="height:3.29244em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.29244em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span><span class="svg-align" style="top:-3.74444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMinYMin slice"><path d="M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z"></path></svg></span><span class="brace-center" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMidYMin slice"><path d="M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z"></path></svg></span><span class="brace-right" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMaxYMin slice"><path d="M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z"></path></svg></span></span></span></span></span></span></span></span><span style="top:-4.78488em;"><span class="pstrut" style="height:3.29244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">每</span><span class="mord cjk_fallback mtight">秒</span><span class="mord cjk_fallback mtight">帧</span><span class="mord cjk_fallback mtight">数</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span><span class="mord">4</span><span class="mord">4</span><span class="mspace">&nbsp;</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span></span></span></span></span></p><h5 id="e-线路"><a class="markdownIt-Anchor" href="#e-线路"></a> E 线路</h5><p>T 线路的欧洲版本, 原理与概念相同, 但是容量不同</p><h4 id="统计-tdm"><a class="markdownIt-Anchor" href="#统计-tdm"></a> 统计 TDM</h4><p><img src="20210617191722.png" alt="Stat-TDM"></p><ul><li>循环检测每个输入, 若某输入无数据则不分配时隙 -&gt; 避免了空时隙</li><li>每个时隙需要添加地址, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个输入需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span> 位地址</li><li><strong>没有同步位, 因为统计 TDM 不依赖时间同步来拆分数据</strong></li><li>链路容量可以小于输入的带宽之和 (因为无数据就不分配时隙了)</li></ul><h3 id="wdm-波分复用"><a class="markdownIt-Anchor" href="#wdm-波分复用"></a> WDM (波分复用)</h3><p>以光线为介质, 通过不同波长的频率实现复用, 和 FDM 类似</p><h3 id="扩频"><a class="markdownIt-Anchor" href="#扩频"></a> 扩频</h3><h4 id="跳频扩频-fhss"><a class="markdownIt-Anchor" href="#跳频扩频-fhss"></a> 跳频扩频 (FHSS)</h4><p><img src="20210617192640.png" alt="FHSS"></p><ul><li>通过伪随机噪声在频率表中选择一个频率</li><li>在一段时间内 (称为跳), 将源信号使用选出的频率进行调制</li><li>伪随机噪声周期性重复</li><li>通过多频率FSK可以实现带宽共享</li></ul><h4 id="直接序列扩频"><a class="markdownIt-Anchor" href="#直接序列扩频"></a> 直接序列扩频</h4><p><img src="20210617193003.png" alt="DSSS"></p><ul><li>使用固定的扩频码对源信号进行调制</li><li>每个数据位使用扩频码的n位代替</li></ul><h2 id="chapter-7-传输介质"><a class="markdownIt-Anchor" href="#chapter-7-传输介质"></a> Chapter 7 传输介质</h2><h3 id="有向介质"><a class="markdownIt-Anchor" href="#有向介质"></a> 有向介质</h3><ul><li>在设备间提供通路的介质</li><li>包括双绞线, 同轴电缆, 光缆</li></ul><h4 id="双绞线-imp"><a class="markdownIt-Anchor" href="#双绞线-imp"></a> 双绞线 [IMP]</h4><ul><li>由两条导线缠绕在一起组成</li><li>通过缠绕可以保证两条线受到的外部影响 (例如噪声) 一致, 故绞合密度越高质量越高</li><li>分为非屏蔽双绞线 (UTP) 和屏蔽双绞线 (STP), 前者更常用, 后者用金属屏蔽层包裹每一对双绞线</li><li>最常用的连接器是 RJ45 (就是最常见的那个网线接头, 8根线)</li></ul><h4 id="同轴线缆"><a class="markdownIt-Anchor" href="#同轴线缆"></a> 同轴线缆</h4><p><img src="20210617210129.png" alt="CCable"></p><ul><li>仅使用中央的一根实心 (或者是多股绞合的金属丝) 导体, 外面有金属屏蔽层</li><li>使用 BNC 连接器, 带宽高但衰减大</li></ul><h4 id="光纤"><a class="markdownIt-Anchor" href="#光纤"></a> 光纤</h4><p><img src="20210617210412.png" alt="Fiber"></p><ul><li>通过传导光实现通信, 带宽很大</li><li>分为单模光纤和多模光纤<ul><li>单模: 光束接近水平, 几乎均沿中间传播</li><li>多模: 多个光束沿着不同路径, 依赖折射</li></ul></li></ul><h3 id="无线通信"><a class="markdownIt-Anchor" href="#无线通信"></a> 无线通信</h3><p><img src="20210617210557.png" alt="ElecSpectrum"></p><ul><li>无线电波: 3 kHz ~ 1 GHz, 大部分全方向</li><li>微波: 1 GHz ~ 300 GHz, 指向性强, 使用单向天线 (定向天线)</li><li>红外: 300 GHz ~ 400 THz, 视线传播, 太阳会干扰</li></ul><h2 id="chapter-8-交换"><a class="markdownIt-Anchor" href="#chapter-8-交换"></a> Chapter 8 交换</h2><h3 id="电路交换-imp"><a class="markdownIt-Anchor" href="#电路交换-imp"></a> 电路交换 [IMP]</h3><p><img src="20210617211550.png" alt="CircuitExchange"></p><p><img src="20210617211411.png" alt="CircuitExchange"></p><ul><li>在物理层, 由物理链路连接的一组交换机组成, 链路会被复用</li><li>在通信开始前要预先建立通道, 在整个传输过程中一直保留, 直到最后的拆除阶段</li><li>数据传输期间无需寻址, 建立时需要端到端的寻址</li><li>延迟:<ul><li>源计算机请求信息到目标计算机</li><li>目标计算机确认信息到源计算机</li><li>数据传输时间</li><li>拆除信息从一端到另一端的时间</li></ul></li></ul><h3 id="数据报交换-imp"><a class="markdownIt-Anchor" href="#数据报交换-imp"></a> 数据报交换 [IMP]</h3><p><img src="20210617212244.png" alt="DatagramExchange"></p><p><img src="20210617212312.png" alt="DatagramExchange"></p><ul><li>在网络层, <strong>是因特网在网络层采用的交换方法</strong></li><li>不需要建立连接, 也不需要拆除 (也被称作无连接网络, 交换机不保存连接信息), 按需分配资源, 先来先服务</li><li>各分组单独处理 (即使某个分组是某个多分组传输的一部分), 到达同一目的地的路径可能不一致<ul><li>可能会出现分组丢失或错序, 由上层协议负责修正</li></ul></li><li>交换机使用基于目的地址的路由表, 它记载了目的地址和交换机端口的对应关系</li><li>延迟:<ul><li>各交换机的排队与处理延迟</li><li>传输时间</li></ul></li></ul><h3 id="虚电路网络-imp"><a class="markdownIt-Anchor" href="#虚电路网络-imp"></a> 虚电路网络 [IMP]</h3><blockquote><p>建议看书, p143 ~ p147, 提纲仅作为总结</p></blockquote><ul><li>结合了电路交换与数据报交换</li><li>通常在数据链路层实现, 但未来可能变化</li><li>需要在数据传输前建立连接</li></ul><h4 id="编址"><a class="markdownIt-Anchor" href="#编址"></a> 编址</h4><ul><li>全局编址: 源端和目的端的地址, 广域网唯一</li><li>虚电路标识符: 仅在两交换机间有效, 作为帧前的标识符</li><li>交换机的表: 不是路由表, 有四列: 输入端口, 输入VCI, 输出端口, 输出VCI</li></ul><h4 id="连接建立"><a class="markdownIt-Anchor" href="#连接建立"></a> 连接建立</h4><p>设源端为 A, 目的端为 B</p><p><img src="20210617214418.png" alt="setup1"></p><ol><li>A 向交换机 1 发送建立连接帧</li><li>交换机1从端口1接受帧, 分配一个VCI, 通过路由表得到应发往端口3, 但输出VCI留空</li><li>交换机2~3相同</li></ol><p><img src="20210617214431.png" alt="setup2"></p><ol start="4"><li>B 收到建立连接帧, 给从 A 来的帧分配一个VCI, 发给交换机3</li><li>交换机3接受, 得到表中缺失的VCI项, 发给交换机2</li><li>交换机1~2相同, A 收到确认, 之后向 B 发送的帧使用交换机1指定的VCI, 连接建立</li></ol><h4 id="连接拆除"><a class="markdownIt-Anchor" href="#连接拆除"></a> 连接拆除</h4><p>同样是请求 - 确认两步</p><h4 id="延迟-2"><a class="markdownIt-Anchor" href="#延迟-2"></a> 延迟</h4><p>类似数据报交换, 建立 + 传输 + 拆除, 如果预留资源的话没有等待延迟</p><h3 id="交换机结构"><a class="markdownIt-Anchor" href="#交换机结构"></a> 交换机结构</h3><p>提纲没有, 看两眼书就行</p><h3 id="chapter-9-使用电话网和有线电视网进行数据传输"><a class="markdownIt-Anchor" href="#chapter-9-使用电话网和有线电视网进行数据传输"></a> Chapter 9 使用电话网和有线电视网进行数据传输</h3><h4 id="信令的概念-imp"><a class="markdownIt-Anchor" href="#信令的概念-imp"></a> 信令的概念 [IMP]</h4><blockquote><p>信令: 指为使通信网中各种设备协调运作，在设备之间传递的有关控制信息<br>- 来自维基百科</p></blockquote><p>简单来说, 信令就是用来控制设备的指令信息</p><ul><li>带内信令: 用和数据通信同一链路传递的信令</li><li>带外信令: 和数据通信用不同链路传递的信令, 是现代电话网采用的方式</li></ul><h4 id="调制与解调"><a class="markdownIt-Anchor" href="#调制与解调"></a> 调制与解调</h4><ul><li>调制: 从二进制数据生成带通模拟信号</li><li>解调: 👆 反过来</li><li>调制解调器: 调制器 + 解调器, modem</li></ul><h4 id="adsl-非对称数字用户线路"><a class="markdownIt-Anchor" href="#adsl-非对称数字用户线路"></a> ADSL (非对称数字用户线路)</h4><ul><li>属于 DSL 技术之一</li><li>下行速率比上行快 (所以是非对称)</li><li>需要调制解调器</li></ul><h1 id="part-3-数据链路层"><a class="markdownIt-Anchor" href="#part-3-数据链路层"></a> Part 3 数据链路层</h1><h2 id="chapter-10-检错与纠错"><a class="markdownIt-Anchor" href="#chapter-10-检错与纠错"></a> Chapter 10 检错与纠错</h2><h3 id="差错的类型"><a class="markdownIt-Anchor" href="#差错的类型"></a> 差错的类型</h3><ul><li>单个位差错: 在给定的数据单元中只有一个位出错</li><li>突发性差错: 在给定的数据单元中有两位或更多位出错</li></ul><h3 id="块编码-2"><a class="markdownIt-Anchor" href="#块编码-2"></a> 块编码</h3><p>把报文划分为块, 每个块有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 位, 并增加 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 个冗余位</p><p>总长度: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>k</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">n=k+r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 位的块称为码字</p><h3 id="纠错"><a class="markdownIt-Anchor" href="#纠错"></a> 纠错</h3><ul><li>向前纠错: 接收方利用冗余位推测正确的报文</li><li>重传: 检测出差错后要求发送方重发</li></ul><h4 id="汉明距离"><a class="markdownIt-Anchor" href="#汉明距离"></a> 汉明距离</h4><p>两个相同长度的字中对应位置的位不同的数量, 以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d(x,\ y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 表示</p><p>可以采用异或后计算 1 的个数求得</p><h4 id="最小汉明距离-imp"><a class="markdownIt-Anchor" href="#最小汉明距离-imp"></a> 最小汉明距离 [IMP]</h4><p>所有字两两组合求得的汉明距离的最小值</p><ul><li>为了检测最多 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> 个差错, 块编码中最小汉明距离一定满足 $d_{min} \ge s+1 $</li><li>为了纠正最多 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 个差错, 块编码中最小汉明距离一定满足 $d_{min} \ge 2t+1 $</li></ul><h3 id="线性块编码"><a class="markdownIt-Anchor" href="#线性块编码"></a> 线性块编码</h3><h4 id="简单奇偶校验"><a class="markdownIt-Anchor" href="#简单奇偶校验"></a> 简单奇偶校验</h4><p>添加一位, 使得码字中的 1 为偶数 (或奇数)</p><h4 id="二维奇偶校验"><a class="markdownIt-Anchor" href="#二维奇偶校验"></a> 二维奇偶校验</h4><p>每一行和每一列均进行一次奇偶校验, 同时角落上的那个按照列进行校验</p><p>四位差错可能检测不到</p><h4 id="汉明编码"><a class="markdownIt-Anchor" href="#汉明编码"></a> 汉明编码</h4><p>看计组书吧, 这里对计网来说不是重点</p><h3 id="循环冗余校验-crc"><a class="markdownIt-Anchor" href="#循环冗余校验-crc"></a> 循环冗余校验 (CRC)</h3><p>假设有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 位数据, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 位码字, 校验码有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n-k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 位</p><h4 id="计算-imp"><a class="markdownIt-Anchor" href="#计算-imp"></a> 计算 [IMP]</h4><ol><li><p>将数据字右侧补 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n-k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 位零</p></li><li><p>对 1 的结果除以除数</p><ul><li>因为是模 2 的二进制除法, 所以加减都等价于异或运算</li><li>若最左侧的位为 0, 则商 0, 否则商 1</li><li>每一步保留后 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 位, 然后最后一位从被除数中对应位置移下来</li></ul></li><li><p>当没有可移下来的位时, 计算完成, 余数即为结果</p></li></ol><p><img src="20210618003752.png" alt="CRC"></p><h5 id="多项式除法"><a class="markdownIt-Anchor" href="#多项式除法"></a> 多项式除法</h5><ul><li>每一项的幂次表示在二进制表示法中对应的位置, 若该项系数为 1 则对应位为 1</li><li>和上面的二进制算法本质一样</li><li>同样用异或代替加减法, 所以不会有负的系数</li></ul><h4 id="差错检测能力"><a class="markdownIt-Anchor" href="#差错检测能力"></a> 差错检测能力</h4><h5 id="单个位差错"><a class="markdownIt-Anchor" href="#单个位差错"></a> 单个位差错</h5><p>若 <strong>生成多项式至少两项</strong> 且 <strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">x^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>的系数为 1</strong>, 则所有的单个位差错均可检测</p><h5 id="两个独立的单个位差错"><a class="markdownIt-Anchor" href="#两个独立的单个位差错"></a> 两个独立的单个位差错</h5><p>若 生成多项式不能整除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>t</mi></msup><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x^t+1,\ t \in [1,\ n-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8768859999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>, 则所有独立的双差错均可检测</p><h5 id="奇数个差错"><a class="markdownIt-Anchor" href="#奇数个差错"></a> 奇数个差错</h5><p>若 生成多项式包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 则可检测所有的奇数个差错</p><h5 id="突发性差错"><a class="markdownIt-Anchor" href="#突发性差错"></a> 突发性差错</h5><ul><li>所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>≤</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">L \le r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 的突发性差错均可检测</li><li>所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><mi>r</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">L = r+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的突发性差错有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><msup><mrow><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">1-{(\frac{1}{2})}^{(r-1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.468008em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.123008em;"><span style="top:-3.298008em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> 的概率被检测</li><li>所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>&gt;</mo><mi>r</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">L &gt; r+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的突发性差错有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><msup><mrow><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><mi>r</mi></msup></mrow><annotation encoding="application/x-tex">1-{(\frac{1}{2})}^{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2444em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8994em;"><span style="top:-3.2980080000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span></span> 的概率被检测</li></ul><h5 id="表现较好的生成多项式"><a class="markdownIt-Anchor" href="#表现较好的生成多项式"></a> 表现较好的生成多项式</h5><ul><li>至少两项</li><li>包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">x^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></li><li>不能整除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>t</mi></msup><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x^t+1,\ t \in [1,\ n-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8768859999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></li><li>有因子 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul><h3 id="校验和"><a class="markdownIt-Anchor" href="#校验和"></a> 校验和</h3><p>核心是求和<strong>取反</strong></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 位的校验和计算方法</p><ul><li>报文按照 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 位划分为字</li><li>校验和设为 0, 每个字求和</li><li>对和求反码作为校验和</li></ul><p>接收方计算相同, 若得到的校验和为 0 说明校验成功</p><h2 id="chapter-11-数据链路控制"><a class="markdownIt-Anchor" href="#chapter-11-数据链路控制"></a> Chapter 11 数据链路控制</h2><h3 id="成帧"><a class="markdownIt-Anchor" href="#成帧"></a> 成帧</h3><ul><li>通过添加发送方和接收方地址, 将一条从源端到目的端的报文同其他报文分离开来</li><li>固定长度成帧: 通过帧的长度本身作为边界, 不需要分隔符</li><li>可变长度成帧: 需要规定每一帧的起始和结束, 分为面向字符协议和面向位协议</li></ul><h4 id="面向字符协议"><a class="markdownIt-Anchor" href="#面向字符协议"></a> 面向字符协议</h4><ul><li>数据表示为固定位数的字符 (比如说 8 位的 ASCII 码)</li><li>在帧的起始和结束有固定的标记</li><li>若数据中出现和标记或转义字符相同的字符时, 采用<strong>字节填充</strong><ul><li>发送方: 需要在前面添加转义字符</li><li>接收方: 去掉转义字符, 并将后面的字符作为数据处理</li></ul></li></ul><h4 id="面向位协议"><a class="markdownIt-Anchor" href="#面向位协议"></a> 面向位协议</h4><ul><li>数据表示为位流</li><li>在帧的起始和结束有固定的标记 (<code>01111110</code>)</li><li>数据中出现与标记相同的模式时, 采用<strong>位填充</strong><ul><li>发送方: 在遇到 <code>011111</code> 时强制在后面添加一个 <code>0</code>, 防止和标记重复</li><li>接收方: 接受时把添加的 <code>0</code> 移走</li></ul></li></ul><h3 id="流量控制与差错控制"><a class="markdownIt-Anchor" href="#流量控制与差错控制"></a> 流量控制与差错控制</h3><ul><li>流量控制: 限制发送方在得到接受方确认前能够发送的数据的数量</li><li>差错控制: 在任何时候检测到差错时重传出错的帧, 称为自动重复请求, 即 <strong>ARQ</strong></li></ul><h3 id="协议"><a class="markdownIt-Anchor" href="#协议"></a> 协议</h3><h4 id="无噪声通道"><a class="markdownIt-Anchor" href="#无噪声通道"></a> 无噪声通道</h4><p>看书 p205 ~ p209, 提纲没提</p><h4 id="有噪声通道"><a class="markdownIt-Anchor" href="#有噪声通道"></a> 有噪声通道</h4><blockquote><p><strong>务必看书</strong>, <strong>务必</strong></p></blockquote><h5 id="停止等待-arq-imp"><a class="markdownIt-Anchor" href="#停止等待-arq-imp"></a> 停止等待 ARQ [IMP]</h5><p><img src="20210618154248.png" alt="S-W ARQ"></p><ul><li>发送方每发送一个帧就停止, 启动一个计时器并等待接收方发送 ACK</li><li>若计时器超时且未收到 ACK, 发送方自动重发</li><li>接收方对每个正确到达的帧回应 ACK</li></ul><h5 id="后退-n-帧-arq-imp"><a class="markdownIt-Anchor" href="#后退-n-帧-arq-imp"></a> 后退 N 帧 ARQ [IMP]</h5><p><img src="20210618154515.png" alt="B-N ARQ Window"></p><blockquote><p>发送方窗口变化</p></blockquote><p><img src="20210618154554.png" alt="B-N ARQ Window"></p><blockquote><p>接收方窗口变化</p></blockquote><p><img src="20210618154629.png" alt="B-N ARQ"></p><blockquote><p>流程图</p></blockquote><ul><li>帧的序列号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 位</li><li>发送窗口大小 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^m-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 接收窗口大小 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li>发送窗口中的变量<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">S_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>: 第一个还没有被确认的帧</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">S_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: 下一个要发送的帧</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{size}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: 窗口大小, 固定为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^m-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul></li><li>发送方仅对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">S_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 指向的帧使用定时器 (因为它必定最先到时)</li><li>接收方仅对顺序和数据正确的帧响应 ACK, 并后移窗口</li><li>发送方收到 ACK 即可后移窗口 (即增大 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">S_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>), 故一个 ACK 可以确认多个帧</li><li>若发送方定时器到时, 则会<strong>重发所有未确认的帧</strong> -&gt; 回退 N 帧</li></ul><h5 id="选择性重复-arq-imp"><a class="markdownIt-Anchor" href="#选择性重复-arq-imp"></a> 选择性重复 ARQ [IMP]</h5><p><img src="20210618155458.png" alt="S ARQ SW"></p><blockquote><p>发送方窗口</p></blockquote><p><img src="20210618155523.png" alt="S ARQ RW"></p><blockquote><p>接收方窗口</p></blockquote><p><img src="20210618155553.png" alt="S ARQ"></p><blockquote><p>流程图</p></blockquote><ul><li>帧的序列号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 位</li><li>发送窗口, 接收窗口大小均为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{m-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></li><li>发送方<ul><li>每个发送的帧均有计时器</li><li>计时器到时或收到对应的 NAK 时重发对应的帧</li><li>收到 ACK 时直接右移窗口到对应的位置 (可移动多个)</li></ul></li></ul><blockquote><p>你看到的这个位置是 <a href="https://github.com/HorizonChaser/horizonchaser.github.io/blob/backup/source/_posts/CS-Network-Review-and-Summary.md#L1000">源 markdown 文件的第 1000 行</a> !</p></blockquote><ul><li>接收方<ul><li>每次窗口移动前最多发送一次 NAK</li><li>若收到的帧序号不为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">R_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 则发送 NAK</li><li>若接收到的帧序号在窗口中, 则保存帧并<strong>尝试</strong>右移窗口至第一个未收到的帧</li></ul></li></ul><h3 id="hdlc-高级数据链路控制-imp"><a class="markdownIt-Anchor" href="#hdlc-高级数据链路控制-imp"></a> HDLC (高级数据链路控制) [IMP]</h3><blockquote><p>看书 p226 ~ p230, 书上也是语焉不详…</p></blockquote><ul><li>分为主-从类型的 正常相应方式 和地位平等的 异步平衡方式</li><li>有三种帧: 信息帧 (I-frame), 管理帧 (S-frame) 和无编号帧 (U-frame)</li></ul><p><img src="20210618160740.png" alt="HDLC Frame"></p><blockquote><p>FCS: Frame CheckSum, 帧校验和<br>Flag: 标记</p></blockquote><ul><li>信息帧: 主要运载数据, 但通过捎带也能包含流量控制和差错控制信息</li><li>管理帧: 仅包含流量控制和差错控制信息</li><li>无编号帧: 交换会话管理和控制信息, 主要在在控制字段的编码里</li></ul><h3 id="点到点协议-ppp"><a class="markdownIt-Anchor" href="#点到点协议-ppp"></a> 点到点协议 (PPP)</h3><ul><li>仅负责点到点的传输</li><li>没有流量控制, 只有基于 CRC 的简单差错控制</li><li>面向字节</li><li>可以提供身份鉴别 (PAP, CHAP 等), 支持多种网络层协议</li></ul><blockquote><p>无关内容: 现在点到点以太网也用 PPP, 称为 PPPoE (PPP over Ethernet)<br>是不是很眼熟? 宽带连接一般就用这玩意儿</p></blockquote><h2 id="chapter-12-多路访问"><a class="markdownIt-Anchor" href="#chapter-12-多路访问"></a> Chapter 12 多路访问</h2><h3 id="随机访问"><a class="markdownIt-Anchor" href="#随机访问"></a> 随机访问</h3><h4 id="aloha"><a class="markdownIt-Anchor" href="#aloha"></a> ALOHA</h4><h5 id="纯-aloha"><a class="markdownIt-Anchor" href="#纯-aloha"></a> 纯 ALOHA</h5><p><img src="20210619000926.png" alt="Pure ALHOA"></p><ul><li>各站点之间直接竞争, 有数据直接发送, 不管其他站点</li><li>每帧都有定时器, 超时未收到接收方的确认帧则等待一段时间 (称为补偿时间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">T_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) 后重发</li><li>若传输的最长时间为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>P</mi></msub></mrow><annotation encoding="application/x-tex">T_P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 帧平均传输时间为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>f</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{fr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>,<ul><li>则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>B</mi></msub><mo>=</mo><mi>R</mi><mo>×</mo><mo stretchy="false">(</mo><msub><mi>T</mi><mi>P</mi></msub><mtext>&nbsp;</mtext><mi mathvariant="normal">或</mi><mtext>&nbsp;</mtext><msub><mi>T</mi><mrow><mi>f</mi><mi>r</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_B=R \times (T_P \ 或 \ T_{fr})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace">&nbsp;</span><span class="mord cjk_fallback">或</span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">R \in [0,\ 2^k-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>, 取决于实现</li><li>称为二进制指数退避</li></ul></li><li>脆弱时间: 可能发生冲突的时间, 这里是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>×</mo><msub><mi>T</mi><mrow><mi>f</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">2\times T_{fr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></li><li>吞吐量: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>G</mi><mo>×</mo><msup><mi>e</mi><mrow><mo>−</mo><mn>2</mn><mi>G</mi></mrow></msup></mrow><annotation encoding="application/x-tex">S=G \times e^{-2G}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">G</span></span></span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">G = 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mn>0.184</mn></mrow><annotation encoding="application/x-tex">S_{max} = 0.184</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">8</span><span class="mord">4</span></span></span></span><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span> 为一个帧传输时间内系统产生的帧的平均数</li></ul></li></ul><h5 id="时隙-aloha"><a class="markdownIt-Anchor" href="#时隙-aloha"></a> 时隙 ALOHA</h5><p><img src="20210619000952.png" alt="Slot ALOHA"></p><ul><li>将时间按照 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>f</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{fr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 分割为时隙, 必须在时隙开始发送帧</li><li>脆弱时间: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>f</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{fr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></li><li>吞吐量: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>G</mi><mo>×</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>G</mi></mrow></msup></mrow><annotation encoding="application/x-tex">S=G \times e^{-G}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">G</span></span></span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">G = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mn>0.368</mn></mrow><annotation encoding="application/x-tex">S_{max} = 0.368</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span><span class="mord">6</span><span class="mord">8</span></span></span></span></li></ul><h4 id="csma-载波侦听多路访问-imp"><a class="markdownIt-Anchor" href="#csma-载波侦听多路访问-imp"></a> CSMA (载波侦听多路访问) [IMP]</h4><blockquote><p>CSMA: Carrier Sense Mutiple Access</p></blockquote><ul><li>在发送前先检测介质是否空闲</li><li>脆弱时间: 传播时间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>P</mi></msub></mrow><annotation encoding="application/x-tex">T_P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 即相邻最远的两站点的传播时间</li></ul><h5 id="持续方法"><a class="markdownIt-Anchor" href="#持续方法"></a> 持续方法</h5><p><img src="20210619001045.png" alt="Persistent"></p><ul><li>定义了站点发现通道繁忙时的检测策略</li><li>1-持续: 不停地侦听直到介质空闲</li><li>非持续: 每隔随机时间进行一次侦听</li><li>p-持续: 若通道空闲, 则有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 的概率发送数据, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">1-p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 的概率等待一个时隙后再次检测<br>若空闲则重新进行判定, 否则认为发生冲突, 使用补偿程序</li></ul><h5 id="csmacd-带冲突检测的-载波侦听多路访问"><a class="markdownIt-Anchor" href="#csmacd-带冲突检测的-载波侦听多路访问"></a> CSMA/CD (带冲突检测的 载波侦听多路访问)</h5><blockquote><p>CD: Collision Detect, 冲突检测</p></blockquote><p><img src="20210619001132.png" alt="CSMA/CD"></p><ul><li>发送的时候同时检测是否发生冲突</li><li>冲突说明至少有两个站点在发送, 会导致介质上的能量水平高于正常值 (检测冲突的方法)</li><li>若冲突, 则立即放弃传输, 发送干扰信号 (高能短信号, 保证每个站点都能分辨出冲突), 然后应用二进制指数退避</li><li>最短帧长: <strong>传输时间至少是两倍的(最大)传播时间</strong>, 保证即使相邻最远的站点发生冲突, 在传输结束前也能收到对方的帧到达, 帧长即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">输</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mo>×</mo><mi mathvariant="normal">带</mi><mi mathvariant="normal">宽</mi></mrow><annotation encoding="application/x-tex">传输时间 \times 带宽</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">宽</span></span></span></span></li></ul><h5 id="csmaca-带冲突避免的-载波侦听多路访问"><a class="markdownIt-Anchor" href="#csmaca-带冲突避免的-载波侦听多路访问"></a> CSMA/CA (带冲突避免的 载波侦听多路访问)</h5><blockquote><p>CA: Collision Avoid</p></blockquote><ul><li>在无线网络等情况下, 冲突不会显著改变介质的能量水平, 故不能检测冲突</li><li>使用帧间间隔, 竞争窗口和确认三种方法来实现避免冲突</li></ul><p><img src="20210619001153.png" alt="Methods"></p><h6 id="帧间间隔-ifs"><a class="markdownIt-Anchor" href="#帧间间隔-ifs"></a> 帧间间隔 (IFS)</h6><blockquote><p>IFS: InterFrame Space</p></blockquote><ul><li>使得远端站点的信号能到达本站点</li><li>较低的 IFS 说明优先级较高</li></ul><h6 id="竞争窗口"><a class="markdownIt-Anchor" href="#竞争窗口"></a> 竞争窗口</h6><ul><li>被划分为时隙, 预备发送的站点各自选择一个时隙作为目标</li><li>时隙的数量根据补偿策略中的二元指数变化, 每次 IFS 后若仍无空闲则翻倍</li><li>若站点在等待对应时隙时检测到繁忙, 不会重置计时器, 而是暂停直到空闲, 然后继续等待</li></ul><h6 id="确认"><a class="markdownIt-Anchor" href="#确认"></a> 确认</h6><p>即接收方发送的 ACK</p><h3 id="受控访问"><a class="markdownIt-Anchor" href="#受控访问"></a> 受控访问</h3><h4 id="预约"><a class="markdownIt-Anchor" href="#预约"></a> 预约</h4><ul><li>将时间划分为时隙, 每一个时隙内在发送前需要先在预约帧中进行预约</li><li>对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个子站点, 预约帧中会有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个预约子时隙, 想发送数据的各站点在自己对应的子时隙中进行标记</li><li>然后进行了预约的各站点按照编号顺序逐个发送数据</li></ul><h4 id="轮询"><a class="markdownIt-Anchor" href="#轮询"></a> 轮询</h4><ul><li>一个站点作为主站, 其他作为从站</li><li>所有的数据都要经过主站传递</li><li>主站轮流询问各个从站是否要发送 -&gt; 轮询</li></ul><h4 id="令牌传递"><a class="markdownIt-Anchor" href="#令牌传递"></a> 令牌传递</h4><ul><li>持有令牌的站点可以发送数据</li><li>各个站点轮流持有令牌, 构成一个逻辑环</li></ul><h2 id="chapter-13-有线局域网以太网"><a class="markdownIt-Anchor" href="#chapter-13-有线局域网以太网"></a> Chapter 13 有线局域网：以太网</h2><h3 id="ieee-标准"><a class="markdownIt-Anchor" href="#ieee-标准"></a> IEEE 标准</h3><ul><li>将数据链路层划分为 LLC (逻辑链路控制层) 和 MAC子层 (介质访问控制层), 前者在后者上面</li><li>LLC 对所有的IEEE局域网均适用(使MAC子层变得透明), 定义了一个协议数据单元, 提供流量控制和差错控制</li><li>MAC子层为每种相应的局域网协议定义了网络方法和成帧格式</li></ul><h3 id="标准以太网的mac子层"><a class="markdownIt-Anchor" href="#标准以太网的mac子层"></a> 标准以太网的MAC子层</h3><p>标准以太网: 10Mbps</p><h4 id="帧格式-imp"><a class="markdownIt-Anchor" href="#帧格式-imp"></a> 帧格式 [IMP]</h4><p><img src="20210619205903.png" alt="Frame"></p><ul><li>由七部分组成: 前导符, 起始帧分界符(SFD), 目的地址, 源地址, 长度/类型, 数据, CRC-32</li><li>帧的最小长度: 512 位, 对应数据为 46 字节 (不包含前导符和SFD)</li><li>帧的最大长度: 1518 字节, 对应数据为 1500 字节 (不包含前导符和SFD)</li></ul><h4 id="mac-地址-imp"><a class="markdownIt-Anchor" href="#mac-地址-imp"></a> MAC 地址 [IMP]</h4><ul><li>48 位, 即 6 个字节, 采用 12 个十六进制数表示, 两两一组, 冒号分隔</li><li>单播, 多播与广播地址:<ul><li>第一个字节的最低位若为 0, 则为单播地址; 为 1, 则为多播地址</li><li>广播地址的每一位都是 1, 是多播的特例</li></ul></li><li>发送顺序: 每个字节的低位在前, 逐字节发送<ul><li>例如 <code>47:20</code>, 发送顺序为 <code>11100010 00000100</code></li></ul></li></ul><h4 id="csmacd-最短帧长-imp"><a class="markdownIt-Anchor" href="#csmacd-最短帧长-imp"></a> CSMA/CD 最短帧长 [IMP]</h4><ul><li>时隙: 一个帧最大的往返时间加上发送干扰信号所需的时间<ul><li>对以太网, 定义为发送一个 512 位的帧(最小帧)所需的时间, 10Mbps 下为 51.2us</li></ul></li><li>网络最大长度:<ul><li>理论上最大长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">度</mi><mo>×</mo><mo stretchy="false">(</mo><mi mathvariant="normal">时</mi><mi mathvariant="normal">隙</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mn>51.2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>6</mn></mrow></msup><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>5120</mn><mtext>&nbsp;</mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">传播速度 \times (时隙/2) = (2 \times 10^8) \times (51.2 \times 10^{-6}/2) = 5120 \ m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">度</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">隙</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mord">1</span><span class="mord">.</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mspace">&nbsp;</span><span class="mord mathdefault">m</span></span></span></span></li><li>实际上为 2500m, 由于中继器等延迟</li></ul></li></ul><h4 id="编码与解码"><a class="markdownIt-Anchor" href="#编码与解码"></a> 编码与解码</h4><ul><li>所有标准都使用 10Mbps 的数字信号</li><li>采用曼彻斯特编码</li></ul><h4 id="标准以太网的分类"><a class="markdownIt-Anchor" href="#标准以太网的分类"></a> 标准以太网的分类</h4><ul><li>10Base5: 总线型 同轴电缆 粗缆</li><li>10Base2: 总线型 同轴电缆 细缆</li><li>10Base-T: 星形 UTP, 双绞线在站点和集线器间形成了两条通路, 冲突在集线器中</li><li>10Base-F: 星形 光纤, 两条</li></ul><h3 id="桥接以太网"><a class="markdownIt-Anchor" href="#桥接以太网"></a> 桥接以太网</h3><ul><li>通过网桥连接两个以太网</li><li>网桥在每个网中作为一个站点</li><li>网桥作用:<ul><li>提高带宽 (有限的总带宽不变, 但是由于划分共享的站点数少了)</li><li>划分冲突域</li></ul></li></ul><h3 id="交换式以太网"><a class="markdownIt-Anchor" href="#交换式以太网"></a> 交换式以太网</h3><ul><li>通过二层交换机连接 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个以太网, 相当于一个多口网桥</li><li>带宽仅有站点和交换机之间共享</li><li>冲突域也划分为了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个</li></ul><h3 id="全双工以太网"><a class="markdownIt-Anchor" href="#全双工以太网"></a> 全双工以太网</h3><ul><li>站点和交换机间点对点, 不需要共享, 没有冲突, 也就不需要 CSMA/CD 等</li><li>使用两条线路, 一收一发</li><li>为提供流量控制和差错控制, 在 LLC 和 MAC子层 之间增加了新的 MAC控制子层</li></ul><h3 id="快速以太网"><a class="markdownIt-Anchor" href="#快速以太网"></a> 快速以太网</h3><ul><li>100Mbps</li><li>不触及 MAC子层</li><li>取消总线拓扑, 仅保留星型拓扑</li><li>不需要 CSMA/CD, 但为了兼容保留</li><li>支持自动协商速率</li><li>类型:<ul><li>100Base-TX: 两条五类双绞线, MLT-3 编码</li><li>100Base-FX: 两条双光纤, NRZ-I 编码</li><li>100Base-T4: 四条三类UTP, 8B/6T 编码</li></ul></li></ul><h3 id="千兆以太网"><a class="markdownIt-Anchor" href="#千兆以太网"></a> 千兆以太网</h3><ul><li>1000Mbps</li><li>修改了 MAC子层</li><li>半双工与全双工方法:<ul><li>半双工方法:<ul><li>使用集线器而不是交换机</li><li>传统方法: 相同的最小帧长 (512位)</li><li>载波扩展方法: 最小帧长 512 字节, 4096 位</li><li>帧突发方法: 发送成倍的帧, 类似一个大型帧</li></ul></li><li>全双工方法:<ul><li>使用交换机, 不需要 CSMA/CD</li></ul></li></ul></li><li>类型:<ul><li>1000Base-SX: 两条短波光纤</li><li>1000Base-LX: 两条长波光纤</li><li>1000Base-CS: 两条铜管线 STP</li><li>1000Base-T: 四条 UTP</li></ul></li></ul><h3 id="总线型以太网的信道利用率简单分析"><a class="markdownIt-Anchor" href="#总线型以太网的信道利用率简单分析"></a> 总线型以太网的信道利用率简单分析</h3><blockquote><p>看 PPT 吧, ch13 那个, 提纲上没加粗, 请自行把握 🐶</p></blockquote><h2 id="chapter-14-无线局域网"><a class="markdownIt-Anchor" href="#chapter-14-无线局域网"></a> Chapter 14 无线局域网</h2><h3 id="ieee-80211-imp"><a class="markdownIt-Anchor" href="#ieee-80211-imp"></a> IEEE 802.11 [IMP]</h3><ul><li>无线局域网规范</li><li>涵盖了物理层和数据链路层</li></ul><h3 id="体系结构"><a class="markdownIt-Anchor" href="#体系结构"></a> 体系结构</h3><h4 id="基本服务集-bss"><a class="markdownIt-Anchor" href="#基本服务集-bss"></a> 基本服务集 (BSS)</h4><ul><li>无线局域网的基本组成部分</li><li>分为特别网络和基础设施网络<ul><li>特别网络: 不带 AP (access point, 访问点/接入点)</li><li>基础设施网络: 有一个 AP, 也称作基础网络</li></ul></li></ul><h4 id="扩展服务集-ess"><a class="markdownIt-Anchor" href="#扩展服务集-ess"></a> 扩展服务集 (ESS)</h4><ul><li>由两个或更多个带有 AP 的 BSS 组成</li><li>通过分布式系统连接各 AP, 连接方式为任意的 IEEE 局域网, 例如以太网</li><li>移动站点: 普通的站点; 固定站点: AP</li><li>同 BSS 内可以直接通信, 但不同 BSS 下不能直接通信</li><li>移动站点可以同时属于多个 BSS</li></ul><p><img src="20210619230019.png" alt="ESS"></p><h4 id="站点类型"><a class="markdownIt-Anchor" href="#站点类型"></a> 站点类型</h4><ul><li>不迁移: 不动或者仅在一个 BSS 内部移动</li><li>BSS 迁移: 在同一个 ESS 下, 可以在 BSS 间移动</li><li>ESS 迁移: 可以在不同的 ESS 间迁移, 但不保证连续</li></ul><h3 id="mac层-imp"><a class="markdownIt-Anchor" href="#mac层-imp"></a> MAC层 [IMP]</h3><p><img src="20210619230043.png" alt="MAC Layer"></p><h4 id="分布式协调功能-dcf"><a class="markdownIt-Anchor" href="#分布式协调功能-dcf"></a> 分布式协调功能 (DCF)</h4><blockquote><p>DCF: Distributed Coordination Function</p></blockquote><ul><li>采用 CSMA/CA 作为访问方式, 原因:<ul><li>否则需要发送时同时侦听, 提高成本</li><li>由于隐藏站点可能无法检测冲突</li><li>站点间距导致的信号衰减可能会使两端无法检测到对方的冲突</li></ul></li></ul><p><img src="20210619230422.png" alt="CSMA/CA Flowchart"></p><h4 id="点协调功能-pcf"><a class="markdownIt-Anchor" href="#点协调功能-pcf"></a> 点协调功能 (PCF)</h4><blockquote><p>PCF: Point Coordination Function</p></blockquote><ul><li>集中式无竞争轮询</li><li>优先级高于 DCF, 主动权在 AP</li><li>主要用于对时间敏感数据的传输</li></ul><h4 id="帧格式-imp-2"><a class="markdownIt-Anchor" href="#帧格式-imp-2"></a> 帧格式 [IMP]</h4><p><img src="20210619230923.png" alt="Frame"></p><ul><li>9 个字段: 帧控制 (FC), D, 地址 (有四个), 序列号, 帧主题, FCS (帧校验和, CRC-32)</li><li>三种类型: 管理帧, 控制帧, 数据帧</li></ul><h4 id="寻址机制"><a class="markdownIt-Anchor" href="#寻址机制"></a> 寻址机制</h4><ul><li>四种情况: 站点间, AP 间, 站点和 AP 之间 (双向)</li><li>通过 FC 中的 To DS (发往分布式系统, 差不多就是某个 AP) 和 From DS (来自分布式系统, 如前) 确定具体情况, 见下</li></ul><p><img src="20210619231301.png" alt="Situations"></p><ol><li>该帧既不是发往一个分布式系统，也不是来自于一个分布式系统，而是从同一个BSS中的一个站点到另外一个站点，不经过DS，需要给原始发送站回送ACK帧</li><li>该帧来自于分布式系统，从一个AP来，到一个站点去，ACK帧将被回送给AP</li><li>该帧要发送给一个分布式系统，从一个站点发往AP，ACK帧将被发送到原始站点</li><li>暗示分布式系统也是无线的，从一个DS的AP发送到另外一个DS的AP；<br>因为如果其中一个DS是一个有线局域网，则这里就不需要定义地址</li></ol><h4 id="隐藏站点-imp"><a class="markdownIt-Anchor" href="#隐藏站点-imp"></a> 隐藏站点 [IMP]</h4><p><img src="20210619231646.png" alt="Hidden Station"></p><ul><li>若 B -&gt; A, C -&gt; A, 由于 B C 之间相互隐藏, 不知道对方存在, 因此会造成冲突</li><li>解决方法: 使用握手帧 (RTS 和 CTS, 请求发送和允许发送)</li></ul><h4 id="暴露站点-imp"><a class="markdownIt-Anchor" href="#暴露站点-imp"></a> 暴露站点 [IMP]</h4><p><img src="20210619232117.png" alt="Exposed Station"></p><ul><li>若 A -&gt; B, 开始后 C -&gt; D, 由于前者干扰导致后者必须等待 (即使 D 不在 A 范围)</li></ul><h4 id="物理层-imp"><a class="markdownIt-Anchor" href="#物理层-imp"></a> 物理层 [IMP]</h4><blockquote><p>各协议细节建议看书 p288 ~ p289</p></blockquote><ul><li>除红外线外, 均在 ISM 频带: 902~928 MHz, 2.4~4.835 GHz, 5.725~5.850 GHz<ul><li>ISM: 工业的, 科学的, 医学的</li></ul></li></ul><h2 id="chapter-15-连接局域网-主干网和虚拟局域网"><a class="markdownIt-Anchor" href="#chapter-15-连接局域网-主干网和虚拟局域网"></a> Chapter 15 连接局域网、主干网和虚拟局域网</h2><h3 id="连接设备-imp"><a class="markdownIt-Anchor" href="#连接设备-imp"></a> 连接设备 [IMP]</h3><ul><li>根据设备在网络中工作的层次划分</li></ul><h4 id="无源集线器"><a class="markdownIt-Anchor" href="#无源集线器"></a> 无源集线器</h4><ul><li>仅仅是一个连接器, 把不同分支物理上连接起来</li><li>是来自不同站点信号的冲突点</li><li>在物理层之下, 作为介质的一部分</li></ul><h4 id="中继器"><a class="markdownIt-Anchor" href="#中继器"></a> 中继器</h4><ul><li>连接同一个局域网的各个分段</li><li>工作在物理层</li><li>通过自己识别信号然后再生, 不会放大噪声</li></ul><h4 id="有源集线器"><a class="markdownIt-Anchor" href="#有源集线器"></a> 有源集线器</h4><ul><li>工作在在物理层</li><li>相当于多端口的中继器</li><li>可以级联, 通常用于星型拓扑结构中</li></ul><h4 id="网桥"><a class="markdownIt-Anchor" href="#网桥"></a> 网桥</h4><ul><li>工作在物理层和数据链路层<ul><li>在物理层: 类似中继器, 再生信号</li><li>在数据链路层: 通过物理地址 (例如 MAC) 转发帧</li><li>不改变物理地址</li></ul></li><li>过滤: 通过查阅自己的表 (可以是手工配置的静态表, 也可以是透明网桥自学习的表) 决定向外转发帧的目的端口</li></ul><h5 id="透明网桥"><a class="markdownIt-Anchor" href="#透明网桥"></a> 透明网桥</h5><ul><li>通过学习网络中的帧传输方式生成自己的表<ul><li>接收到帧时, 即可记录下该帧的物理地址和接受端口的对应关系</li><li>转发时, 若无包含目的地址的条目, 则从每个端口转发<ul><li>可能造成帧泛滥</li></ul></li></ul></li><li>在两个 LAN 之间存在多个透明网桥时, 可能会出现循环问题 (同一帧被转发多次)<ul><li>使用生成树算法建立无循环的拓扑结构 (因为树必定无环)<ul><li>网桥和 LAN 都视为节点</li><li>从网桥到 LAN 的跳数为 1, LAN 到网桥跳数为 0</li><li>网桥广播自己的 ID, 最小的作为树根</li><li>计算根网桥到每个网桥与 LAN 的最小成本的路径</li><li>路径组合即为生成树</li></ul></li><li>属于生成树的为转发端口, 不属于的为阻塞端口 (相当于被禁用了)</li></ul></li></ul><h5 id="源路由网桥"><a class="markdownIt-Anchor" href="#源路由网桥"></a> 源路由网桥</h5><ul><li>通过发送方指定要经过的每一个网桥</li><li>并不普及</li></ul><h4 id="二层交换机"><a class="markdownIt-Anchor" href="#二层交换机"></a> 二层交换机</h4><ul><li>工作在物理层和数据链路层</li><li>端口可以很多, 让每一个站点都有一个端口 -&gt; 没有通信竞争</li><li>通过物理地址转发帧</li></ul><h4 id="路由器"><a class="markdownIt-Anchor" href="#路由器"></a> 路由器</h4><ul><li>工作在物理层, 数据链路层和网络层</li><li>通过逻辑地址转发帧</li><li>使用路由表进行转发决策</li></ul><h4 id="三层交换机"><a class="markdownIt-Anchor" href="#三层交换机"></a> 三层交换机</h4><ul><li>是路由器, 但"更快更复杂"</li><li>书中和 路由器 互换使用</li></ul><h4 id="网关"><a class="markdownIt-Anchor" href="#网关"></a> 网关</h4><ul><li>工作在每一层的计算机</li></ul><h3 id="冲突域与广播域-imp"><a class="markdownIt-Anchor" href="#冲突域与广播域-imp"></a> 冲突域与广播域 [IMP]</h3><h4 id="冲突域"><a class="markdownIt-Anchor" href="#冲突域"></a> 冲突域</h4><ul><li>在物理层, 在同一总线 (或者其他物理网段) 上的站点之和</li><li>因此, 仅工作在物理层或之下的设备无法划分冲突域, 例如<ul><li>无源集线器, 有源集线器</li><li>中继器</li></ul></li></ul><blockquote><p>是物理层面的概念</p></blockquote><h4 id="广播域"><a class="markdownIt-Anchor" href="#广播域"></a> 广播域</h4><ul><li>能接收到同样广播帧的节点的之和, 在数据链路层</li><li>因此, 仅工作在数据链路层及以下的设备无法划分广播域, 例如<ul><li>无法划分冲突域的设备 👆</li><li>二层交换机</li><li>网桥和透明网桥</li></ul></li><li>通过划分 VLAN 可以隔离广播域, 所以每一个 VLAN 都是一个广播域</li></ul><blockquote><p>涉及到了帧, 是数据链路层的概念</p></blockquote><h3 id="vlan-虚拟局域网"><a class="markdownIt-Anchor" href="#vlan-虚拟局域网"></a> VLAN (虚拟局域网)</h3><ul><li>将 LAN 划分为逻辑上的网段</li><li>不同 VLAN 之间不能直接通信, 这就划分了广播域</li><li>可以基于端口, 物理地址, 逻辑地址, 多播地址等划分 VLAN</li></ul><blockquote><p><em>想想计网实验</em></p></blockquote><h2 id="chapter-16-无线-wan移动电话和卫星网络"><a class="markdownIt-Anchor" href="#chapter-16-无线-wan移动电话和卫星网络"></a> Chapter 16 无线 WAN：移动电话和卫星网络</h2><p>仅要求了解, 看书即可</p><h2 id="chapter-17-广域网-sonetsdh"><a class="markdownIt-Anchor" href="#chapter-17-广域网-sonetsdh"></a> Chapter 17 广域网 SONET/SDH</h2><p>仅要求了解 SONET 的基本概念</p><h2 id="chapter-18-虚电路网络帧中继和-atm"><a class="markdownIt-Anchor" href="#chapter-18-虚电路网络帧中继和-atm"></a> Chapter 18 虚电路网络：帧中继和 ATM</h2><h3 id="帧中继"><a class="markdownIt-Anchor" href="#帧中继"></a> 帧中继</h3><h4 id="特征-imp"><a class="markdownIt-Anchor" href="#特征-imp"></a> 特征 [IMP]</h4><ul><li>相对于此前的 X.25 虚电路交换网, 具有更快的速率 (1.544Mbps ~ 44.376Mbps)</li><li>工作在物理层和数据链路层</li><li>允许突发性数据 (速率不均衡, 可按需分配带宽)</li><li>最大帧大小 9000 字节, 支持所有局域网的帧</li><li>仅在数据链路层有错误检测, 无流量与差错控制, 更快</li><li>帧中继中的 VCI (虚电路标识符) 称作 DLCI</li></ul><blockquote><p>VCI: Virtual Circuit Identifer<br>DLCI: DataLink Connection Identifer</p></blockquote><h4 id="永久交换虚电路-pvc"><a class="markdownIt-Anchor" href="#永久交换虚电路-pvc"></a> 永久交换虚电路 (PVC)</h4><blockquote><p>PVC: Permanent Virtual Circuit</p></blockquote><ul><li>由管理员为所有的交换机建立统一设置: 源地址分配一个 VCI, 目的地址分配一个 VCI</li><li>缺点:<ul><li>花费大, 即使未使用也需一直付费 (因为连接一直存在)</li><li>只能在一个源地址和一个目的地址间建立连接</li></ul></li></ul><h4 id="交换虚电路-svc"><a class="markdownIt-Anchor" href="#交换虚电路-svc"></a> 交换虚电路 (SVC)</h4><blockquote><p>SVC: Switched Virtual Circuit</p></blockquote><ul><li>建立短的, 临时的连接</li><li>需要连接建立和终止阶段</li></ul><h4 id="帧结构"><a class="markdownIt-Anchor" href="#帧结构"></a> 帧结构</h4><p>建议看书 p344</p><h3 id="atm-异步传输模式"><a class="markdownIt-Anchor" href="#atm-异步传输模式"></a> ATM (异步传输模式)</h3><blockquote><p>ATM: Asychoronous Transfer Mode</p></blockquote><h4 id="特征"><a class="markdownIt-Anchor" href="#特征"></a> 特征</h4><ul><li>高速互联, 作为网间主干互联的协议</li><li>面向连接, 提供准确可预测的传输</li><li>是信元网络, 采用固定大小的信元作为数据交换的基本单位<ul><li>可以避免多路复用时先到达的大型帧对后到达的小型帧的长时间阻塞</li></ul></li><li>采用异步的时分复用 (TDM) 实现多路复用<ul><li>时隙大小为一个信元的大小</li><li>可以存在空时隙</li></ul></li></ul><h4 id="结构-imp"><a class="markdownIt-Anchor" href="#结构-imp"></a> 结构 [IMP]</h4><ul><li>用户设备称为端点</li><li>端点到网络接口: 用户到网络接口, UNI (User-to-Network Interface)</li><li>交换机之间: 网络到网络接口, NNI (Network-to-Network Interface)</li><li>传输路径 TP<ul><li>Transmission Path</li><li>是端点与交换机之间, 或两交换机之间的所有物理连接</li><li>类似于连接两个城市的高速公路的集合</li></ul></li><li>虚路径 VP<ul><li>Virtual Path</li><li>两个交换机之间的一条或多条连接的集合</li><li>类似于两城市间的一条高速公路</li></ul></li><li>虚电路 VC<ul><li>Virtual Circuit</li><li>信元网络基于虚电路</li><li>属于同一报文的所有信元沿着同一条虚电路传输, 同时保持先后次序</li></ul></li><li>通过 VPI 和 VCI 来定义一个虚连接, 前者定义特定 VP, 后者定义特定 VC</li></ul><p><img src="20210620160805.png" alt="TP VP VC"></p><p><img src="20210620160831.png" alt="TP VP VC"></p><blockquote><p>TP VP VC 间关系</p></blockquote><h1 id="part-4-网络层"><a class="markdownIt-Anchor" href="#part-4-网络层"></a> Part 4 网络层</h1><h2 id="chapter-19-逻辑寻址-imp"><a class="markdownIt-Anchor" href="#chapter-19-逻辑寻址-imp"></a> Chapter 19 逻辑寻址 [IMP]</h2><h3 id="ipv4-地址"><a class="markdownIt-Anchor" href="#ipv4-地址"></a> IPv4 地址</h3><ul><li>32 位长</li><li>在网络中唯一与通用</li><li>使用二进制标记法和点分十进制标记法<ul><li>二进制标记法: 二进制表示, 八位一个空格</li><li>点分十进制: 每个字节表示为十进制数, 中间用小数点分割</li></ul></li></ul><h4 id="分类寻址"><a class="markdownIt-Anchor" href="#分类寻址"></a> 分类寻址</h4><ul><li>划分为五类: A ~ E</li><li>通过第一个字节最开始有几个 1 决定分类</li></ul><p><img src="20210621005156.png" alt="Class"></p><table><thead><tr><th>类</th><th>块的个数</th><th>块长度</th><th>应用类型</th></tr></thead><tbody><tr><td>A</td><td>128</td><td>16 777 216</td><td>单播</td></tr><tr><td>B</td><td>16 384</td><td>65 536</td><td>单播</td></tr><tr><td>C</td><td>2 097 152</td><td>256</td><td>单播</td></tr><tr><td>D</td><td>1</td><td>268 435 456</td><td>多播</td></tr><tr><td>E</td><td>1</td><td>268 435 456</td><td>保留</td></tr></tbody></table><ul><li>A B C 类分为网络号和主机号<ul><li>网络号各自占 1 2 3 个字节</li></ul></li><li>通过掩码划分, 掩码 32 位</li><li>子网化: 通过延长掩码中 1 的长度来将一个大的地址块儿划分为包含较少主机的子网</li><li>超网化: 通过缩短掩码中 1 的长度来将几个小的地址块儿划分为一个大的子网, 无类寻址不需要 (因为你可以直接划分出来大的地址块儿)</li></ul><h4 id="无类寻址"><a class="markdownIt-Anchor" href="#无类寻址"></a> 无类寻址</h4><ul><li>没有类的概念, 但是仍划分为地址块</li><li>地址块的限制条件<ul><li>块中地址必须连续</li><li>块中地址个数必须为 2 的整数次幂</li><li>块的起始地址必须能被块中地址个数整除</li></ul></li><li>通过 CIDR 标记法定义块地址<ul><li>x.y.z.t/n</li><li>其中 /n 为掩码, n 为掩码中 1 的位数 (掩码中的 1 必定连续)</li></ul></li><li>起始地址: 通过将块中某个地址的后 32-n 位置为 0 求得 (也就是把地址和掩码进行与运算)</li><li>最后的地址: 通过将块中某个地址的后 32-n 位置为 1 求得</li><li>地址个数: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mo stretchy="false">(</mo><mn>32</mn><mo>−</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">2^{(32-n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">3</span><span class="mord mtight">2</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></li><li>网络地址: 代表整个网络, 通常是块的起始地址</li></ul><h5 id="层次结构"><a class="markdownIt-Anchor" href="#层次结构"></a> 层次结构</h5><ul><li>二级层次结构: 没有子网化, 只有网络前缀 (前 n 位) 和定义主机的后 n 位</li><li>三级层次结构: 有子网化, 通过子网前缀划分子网 -&gt; 增加掩码中 1 长度, 即 n</li></ul><h4 id="nat-网络地址转换"><a class="markdownIt-Anchor" href="#nat-网络地址转换"></a> NAT (网络地址转换)</h4><blockquote><p>NAT: Network Address Translation</p></blockquote><ul><li>使大量主机共享有限的外部地址</li><li>在内部网络分配专用地址, 对外表现为公网地址<ul><li>在向外网发送时把分组的源地址替换为公网地址, 同时在表中添加专用地址-公网地址的条目</li><li>接受时通过查表确定对应关系</li><li>可以采用 IP 地址池来对外同时使用多个公网地址</li><li>可以在转换表中同时采用使用 IP 地址和端口号来实现内外网多对多的转换<ul><li>表中有五列: 专用地址与端口, 外部地址与端口, 传输协议</li><li>外部的响应报文通过目的地址和目的端口号(和内网中的发起方使用的临时端口相同)确定内网的接收者</li><li>临时端口号必须唯一</li></ul></li></ul></li></ul><h3 id="ipv6-地址"><a class="markdownIt-Anchor" href="#ipv6-地址"></a> IPv6 地址</h3><ul><li>16 个字节, 128 位</li><li>采用十六进制冒号标记法<ul><li>每两个字节一部分, 作为四个十六进制数字</li><li>每部分之间用冒号分隔</li></ul></li><li>可以缩短, 需要满足<ul><li>在两个冒号之间 (所以开头和结尾不能缩短)</li><li>高位的连续的 0 可以缩短</li><li>若有连续的几个部分仅包含 0, 则可以把这些 0 用两个冒号代替, <strong>但这种缩短只能用一次</strong></li><li>例如 FDEC : 0074 : 0000 : 0000 : 0000 : B0FF : 0000 : FFF0<ul><li>缩短: FDEC : 74 : 0 : 0 : 0 : B0FF : 0 : FFF0 (去掉了每个部分的前导 0)</li><li>更缩短: FDEC : 74 :: B0FF : 0 : FFF0 (把连续的 0 合并)</li></ul></li></ul></li><li>缩短地址的恢复<ul><li>将未缩短的部分对齐</li><li>将 0 插入</li></ul></li></ul><h2 id="chapter-20-ip协议"><a class="markdownIt-Anchor" href="#chapter-20-ip协议"></a> Chapter 20 IP协议</h2><h3 id="网际互连"><a class="markdownIt-Anchor" href="#网际互连"></a> 网际互连</h3><ul><li>因特网中的网络层交换采用数据包分组交换<ul><li>是无连接的</li><li>各分组之间没有联系</li><li>同一报文的各分组可能采用不同路径</li></ul></li></ul><h3 id="ipv4"><a class="markdownIt-Anchor" href="#ipv4"></a> IPv4</h3><h4 id="数据报格式-imp"><a class="markdownIt-Anchor" href="#数据报格式-imp"></a> 数据报格式 [IMP]</h4><p><img src="20210621151131.png" alt="ipv4"></p><p><img src="20210621150443.png" alt="ipv4"></p><blockquote><p>HLEN: Header Length, 头部长度</p></blockquote><ul><li>版本: 定义 IPv4 版本, 若错误则直接丢弃数据报</li><li>头部长度: 数据报头部的总长度<strong>除以4</strong>, 对不含选项的头部, 长度为 20 字节, 值为 5</li><li>服务: 有两种解释方法, 服务类型和差分服务<ul><li>服务类型<ul><li>前三位指定优先级, 在遇到拥塞时先丢弃低优先级的 (未使用)</li><li>后四位称为 TOS 位, 前三位分别指定低延迟, 最大化吞吐量和最高可靠性, 最后一位没用</li></ul></li><li>差分服务<ul><li>后两位不用</li><li>前六位组成码点子字段<ul><li>最右侧三位为 0, 则前三位和"服务类型"的解释方式相同</li><li>否则, 定义 64 种服务 (然而具体的分配方式还没定下来, 看看就行)</li></ul></li></ul></li></ul></li><li>总长度: 以字节计算的数据报总长度, 包括头部长度和数据长度<ul><li>可以靠这个把数据报和填充分开, 比如以太网最低要求 46 字节的帧</li></ul></li><li>标识, 标记和分段偏移: 和分段有关, 见后面</li><li>生存时间: 能经过路由器转发的数量, 每个路由器收到后先减一, 为 0 时直接丢弃, 并回送一个错误信息</li><li>协议: 指定了该数据报使用的高层协议, 例如 TCP UDP ICMP 等</li><li>校验和: 仅计算头部 (数据部分的校验和由高层协议负责)<ul><li>将头部按照 16 位划分</li><li>对这些数求和, 正常进位, 同时最高位的进位加到最低位上</li><li>对结果取反码</li></ul></li><li>选项: 可选的选项, 看书 p393</li></ul><h4 id="mtu-最大传输单元-与分段"><a class="markdownIt-Anchor" href="#mtu-最大传输单元-与分段"></a> MTU (最大传输单元) 与分段</h4><blockquote><p>MTU: Maximum Transmission Unit</p></blockquote><ul><li>每个数据链路层协议都有自己的帧格式, 也就定义了该协议下最大的数据长度</li><li>为了让 IPv4 协议与物理网络无关, IPv4 数据报的最大长度为 65535 字节, 是常见的网络中最大的 MTU 值</li><li>分段在传输层进行</li><li>数据报在到达最终目的端前, 可能被多次分段</li><li>标识: 一个序列号, 定义了特定的从源端发出的数据报, <strong>分段不改变标识</strong></li><li>标记: 3 位字段<ul><li>第一位: 保留不用</li><li>第二位: 不分段位 (DF, Don’t Fragment), 为 1 时强制禁止分段, 若超过 MTU 会导致无法发送并回送错误信息</li><li>第三位: 多分段位, 若为 1 表明这不是最后的分段, 为 0 表示是最后或唯一的分段</li></ul></li><li>分段偏移: 表示了该分段的第一个字节在整个数据报中的相对位置, <strong>单位是 8 字节, 也就是除以 8</strong><ul><li>所以分段时每个分段的长度必须满足使每个分段的第一个字节的位置为 8 的整数倍</li></ul></li><li>重组方法:<ul><li>第一个分段的分段偏移为 0</li><li>第一个分段的长度除以 8 得到第二个分段的偏移值</li><li>第一二个分段的长度之和除以 8 得到第三个分段的偏移值</li><li>重复以上过程, 最后一个分段的 多分段位 为 0</li></ul></li></ul><h3 id="ipv6"><a class="markdownIt-Anchor" href="#ipv6"></a> IPv6</h3><h4 id="数据报格式-imp-2"><a class="markdownIt-Anchor" href="#数据报格式-imp-2"></a> 数据报格式 [IMP]</h4><p><img src="20210621195449.png" alt="ipv6"></p><ul><li><strong>基本头部固定 40 字节, 选项等放在扩展头部</strong></li><li>版本: IPv6 的版本号, 为 6</li><li>优先级: 发生拥塞时决定丢弃顺序, 分为可进行拥塞控制的通信量和不可进行…<ul><li>可进行拥塞控制: 分 0~7, 0 最低, 不同服务类型的优先级不同</li><li>不可进行拥塞控制: 尚未指定, 8~15, 8 为具有最大冗余度的数据 (就是丢一点儿影响也没那么大的)</li></ul></li><li>流标号: 标识了一个数据报系列, 它们来源于同一个地址, 去往同一个地址, 使用同样的服务</li><li>有效载荷长度: <strong>定义存在冲突, 见下面</strong></li><li>下一个头部: 下一个可选的扩展头部的位置, 或者是上层协议 (比如 UDP/TCP) 的头部</li><li>跳数限制: 类似于 IPv4 中的 TTL (生存时间)</li><li>源地址: 发送方的地址</li><li>目的地址: 若使用了源路由选择, 则为下一个路由器的地址, 否则就是最终目的地的地址</li></ul><h3 id="ipv4-ipv6-头部对比"><a class="markdownIt-Anchor" href="#ipv4-ipv6-头部对比"></a> IPv4 IPv6 头部对比</h3><ul><li>IPv6 取消了头部长度字段, 因为 v6 头部固定 40 字节</li><li>IPv6 取消了服务类型, 用优先级+流标号代替功能</li><li>IPv6 取消了总长度字段, 使用有效载荷长度代替 <strong>这点有点小冲突, 详情看下面</strong></li><li>IPv6 基本头部中取消了标识, 标记和分组偏移, 放在了扩展头部里</li><li>IPv6 将 TTL 称为跳数限制</li><li>协议字段被替换成下一个头部字段</li><li>头部不再包含校验和</li><li>IPv4 中的选项移动到了 IPv6 的扩展头部中</li></ul><blockquote><p><strong>关于 IPv6 的有效载荷长度和 IPv4 的总长度</strong><br>按照书上说法, IPv6 的有效载荷长度为 “包括基本头部在内的IP数据报的总长度”, 这个说法其实和 IPv4 的总长度定义一样<br>但是老师的 PPT 上和我查的 <a href="https://en.wikipedia.org/wiki/IPv6_packet#Standard_payload_length">Wiki</a> 上都认为 <strong>有效载荷长度为除基本头部之外的数据报长度</strong><br>等待查证 0.0</p></blockquote><h3 id="ipv4-ipv6-混合"><a class="markdownIt-Anchor" href="#ipv4-ipv6-混合"></a> IPv4 IPv6 混合</h3><ul><li>双协议栈: 同时支持 IPv4 和 v6</li><li>隧道技术<ul><li>v6 -&gt; v4 -&gt; v6</li><li>通过在 v6 分组前添加一个 v4 的头部来让分组通过仅支持 v4 的区域</li></ul></li><li>头部转换<ul><li>v6 -&gt; v4</li><li>由于接收方仅支持 v4, 但发送方使用 v6, 因此在最后转发给接收方前把 v6 的头部转换为 v4 的头部</li></ul></li></ul><h2 id="chapter-21-地址映射-差错报告和多播"><a class="markdownIt-Anchor" href="#chapter-21-地址映射-差错报告和多播"></a> Chapter 21 地址映射、差错报告和多播</h2><h3 id="arp"><a class="markdownIt-Anchor" href="#arp"></a> ARP</h3><blockquote><p>ARP: Address Resolution Protocol, 地址解析协议</p></blockquote><h4 id="概念-imp"><a class="markdownIt-Anchor" href="#概念-imp"></a> 概念 [IMP]</h4><ul><li>逻辑地址到物理地址</li><li><strong>直接封装到数据链路层的帧中</strong></li><li>ARP 查询是广播, ARP 回答是单播 (持有对应逻辑地址的节点返回自己的物理地址)</li><li>支持所有的物理地址与逻辑地址类型</li></ul><h4 id="分组格式"><a class="markdownIt-Anchor" href="#分组格式"></a> 分组格式</h4><p><img src="20210621205627.png" alt="arp"></p><ul><li>硬件类型: 指定了物理网络的类型, 比如以太网</li><li>协议类型: 指定了使用逻辑地址的高层协议的类型, 比如 IPv4</li><li>两个长度: 字节为单位, 按需求填, 比如以太网物理地址长度是 6, IPv4 协议长度 (就是逻辑地址长度) 为 4</li><li>操作: 分为 ARP 请求和 ARP 回答</li><li>四个地址: 按需填<ul><li>注意, 在 ARP 请求中, 目标硬件地址填 0, 因为这时还不知道</li></ul></li></ul><h4 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h4><h5 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h5><ol><li>发送方想要发送报文, 知道接收方的逻辑地址但不知道物理地址</li><li>发送方产生一个 ARP 请求报文, 目标的物理地址填 0</li><li>请求报文发送给数据链路层, 封装成帧, 目的地址为广播地址</li><li>所有站点都接受到这个请求, 但比对请求报文中的目标逻辑地址后, 仅有相符的那个站点才会产生回应</li><li>相符的站点 (即接收方) 使用 ARP 回应报文, 其中包含了自己的物理地址, 单播</li><li>发送方得知接收方的物理地址, 即可发送报文</li></ol><h3 id="dhcp"><a class="markdownIt-Anchor" href="#dhcp"></a> DHCP</h3><blockquote><p>DHCP: Dynamic Host Configuration Protocol, 动态主机配置协议</p></blockquote><ul><li>通过向服务器请求自动获得逻辑地址</li><li>可以人工配置静态的物理地址和逻辑地址间的对应关系, 也可以在地址池中自动分配</li><li>自动分配的地址为租用地址, 有时间上限, 到期后需要更新或停用</li></ul><h3 id="icmp"><a class="markdownIt-Anchor" href="#icmp"></a> ICMP</h3><blockquote><p>ICMP: Internet Control Message Protocol, 因特网控制报文协议</p></blockquote><h4 id="概念-imp-2"><a class="markdownIt-Anchor" href="#概念-imp-2"></a> 概念 [IMP]</h4><blockquote><p>我觉得不用记功能细节…</p></blockquote><ul><li>提供差错报告报文和查询报文</li><li>ICMP 不能纠正差错, 只能把出错信息发回给原始的源端</li></ul><h4 id="报文格式-imp"><a class="markdownIt-Anchor" href="#报文格式-imp"></a> 报文格式 [IMP]</h4><ul><li>封装在 IP 数据报里面</li><li>头部固定有 8 字节, 数据部分可变长</li><li>头部的前 4 字节固定, 后 4 字节随类型变化</li></ul><h4 id="差错报告-imp"><a class="markdownIt-Anchor" href="#差错报告-imp"></a> 差错报告 [IMP]</h4><ul><li>处理 IP 数据报时出现的问题<ul><li>目的端不可达: 找不到对应主机或端口</li><li>时间超时: TTL 到达 0</li><li>源端抑制: 通知源端出现拥塞与丢弃, 开始流量控制</li><li>参数问题: 报文格式不对</li><li>重定向: 主机将报文发送给了绕路的路由器, 该路由器会转发并回送这条差错报告, 可以更新主机的路由表</li></ul></li></ul><h4 id="查询报文"><a class="markdownIt-Anchor" href="#查询报文"></a> 查询报文</h4><ul><li>成对出现, 提供信息交换与查询<ul><li>回送请求与回答: ping 命令的那个</li><li>时间戳请求与回答: 测量两主机间往返时间, 可用于时间同步</li><li>地址掩码请求与回答</li><li>路由器询问与通告</li></ul></li></ul><h3 id="igmp"><a class="markdownIt-Anchor" href="#igmp"></a> IGMP</h3><blockquote><p>IGMP: Internet Group Management Protocol, 因特网组管理协议</p></blockquote><ul><li>不是多播路由协议, 而是管理组成员的协议</li><li>为多播路由器 (multicast router) 提供关于连接到网络上的节点成员状态的信息</li></ul><h2 id="chapter-22-传递-转发和路由选择"><a class="markdownIt-Anchor" href="#chapter-22-传递-转发和路由选择"></a> Chapter 22 传递、转发和路由选择</h2><h3 id="转发技术"><a class="markdownIt-Anchor" href="#转发技术"></a> 转发技术</h3><ul><li>下一条方法: 路由表中仅保存下一跳的地址</li><li>路由方法: 路由表中保存完整的路由信息 (完整的路径)</li><li>特定网络方法: 将连接在整个网络上的主机视为同一个条目</li><li>特定主机方法: 每台主机一个条目</li><li>默认方法: 表里有的按表来, 没有的同一扔到一个端口</li></ul><h3 id="转发过程"><a class="markdownIt-Anchor" href="#转发过程"></a> 转发过程</h3><ul><li>采用无类寻址</li><li>表中包含<strong>掩码</strong>, 网络地址, 下一跳地址, 接口</li><li>过程<ul><li>将每个条目的掩码与接收到的分组的目的地址相与, 判断是否符合网络地址<ul><li>若不符合, 则比较下一条</li><li>若符合, 准备通过对应的下一跳地址和端口转发, 可能需要 ARP</li><li>若无符合条目, 按默认条目转发</li></ul></li></ul></li></ul><h3 id="地址聚合-imp"><a class="markdownIt-Anchor" href="#地址聚合-imp"></a> 地址聚合 [IMP]</h3><p>对网络的其他部分, 将连续的地址块儿通过缩短掩码的长度来将其是为一个地址</p><p><img src="20210622000936.png" alt="aggregate"></p><blockquote><p>在 R2 看来, 组织 1~4 是同一个地址, 只占一个条目, 只需要转发到 m0 接口就行<br>至于组织 1~4 之间各自的分组转发, 由 R1 负责</p></blockquote><h3 id="最长掩码匹配-imp"><a class="markdownIt-Anchor" href="#最长掩码匹配-imp"></a> 最长掩码匹配 [IMP]</h3><ul><li>在路由表中按照掩码的长短从上到下排序, 长的在上面</li><li>这样每次都从掩码最长的开始匹配</li><li>而掩码最长意味着最"精确", 范围最小</li></ul><p><img src="20210622001259.png" alt="longest match"></p><blockquote><p>假如目标地址为 140.24.7.200 (属于组织 4) 的分组到达 R2, 会从 m1 转发出去 (第一条的掩码最长且成功匹配)<br>之后经过 R3 到达组织 4</p></blockquote><blockquote><p><strong>至于之后的 RIP, OSPF, BGP 等请自行看书, 提纲上都是加粗的…</strong><br>单播路由协议：路由协议的分类及典型的路由协议(RIP、OSPF、BGP)，AS 的概念、RIP 协议和 OSPF 协议、Dijkstra、Bellmanford 算法计算路由表及最小生成树<br>多播的概念和多播路由协议（了解）</p></blockquote><h1 id="part-5-传输层"><a class="markdownIt-Anchor" href="#part-5-传输层"></a> Part 5 传输层</h1><h2 id="chapter-23-udp-tcp-和-sctp"><a class="markdownIt-Anchor" href="#chapter-23-udp-tcp-和-sctp"></a> Chapter 23 UDP、TCP 和 SCTP</h2><h3 id="端口-imp"><a class="markdownIt-Anchor" href="#端口-imp"></a> 端口 [IMP]</h3><ul><li>一个端口号确定了主机上的一个进程</li><li>划分<ul><li>1~1023: 熟知端口</li><li>1024~49151: 注册端口, IANA 不分配不控制, 但可以注册来防止重复</li><li>49152~65535: 动态端口, 可以有任何进程使用, 不需注册</li></ul></li><li>套接字地址: 由 IP 地址和端口号组成, 唯一确定了一台主机上的一个进程</li></ul><h3 id="udp"><a class="markdownIt-Anchor" href="#udp"></a> UDP</h3><blockquote><p>UDP: User Datagram Protocol, 用户数据报协议</p></blockquote><h4 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h4><ul><li>无连接 不可靠 传输层协议</li><li>有限的差错检验</li></ul><h4 id="udp-的熟知端口-imp"><a class="markdownIt-Anchor" href="#udp-的熟知端口-imp"></a> UDP 的熟知端口 [IMP]</h4><p><img src="20210622002944.png" alt="udp port"></p><blockquote><p>可以看书 p468</p></blockquote><h4 id="数据报结构"><a class="markdownIt-Anchor" href="#数据报结构"></a> 数据报结构</h4><p><img src="20210622003102.png" alt="header"></p><ul><li>头部固定 8 字节</li><li>源端口号: 如果是源主机是客户机, 则大概率是临时端口号; 服务器则大概率是熟知端口号</li><li>目的端口号: 类似上面, 不过反过来</li><li>总长度: 头部 (8 字节) + 数据长度</li><li>校验和</li><li>注意在真正的 UDP 头部中, 没有源地址和目的地址 (这是 IP 头部的东西), 但是校验和会用到它们</li></ul><h4 id="校验和-imp"><a class="markdownIt-Anchor" href="#校验和-imp"></a> 校验和 [IMP]</h4><p><img src="20210622003643.png" alt="p header"></p><ul><li>实际上是<strong>伪头部</strong>与头部共同的校验和</li><li>伪头部: 类似 IP 头部的最后 12 字节, 见上图</li><li>数据部分通过填充 0 补齐到 16 位的整数倍, 但<strong>在发送时会被移除, 不进行填充</strong></li><li>在计算完校验和后, 伪头部和填充就被移除, 它们不会交给 IP</li><li>计算方法和之前一样, 16 位分组, 求和, 循环进位, 最后取反码</li><li>校验和是可选的, 若不计算则可在这个字段填充全 1 (因为真正的校验和不可能为全 1, 这说明和为 0)</li></ul><h3 id="tcp-imp"><a class="markdownIt-Anchor" href="#tcp-imp"></a> TCP [IMP]</h3><blockquote><p>TCP: Transmission Control Protocol, 连接控制协议</p></blockquote><h4 id="概念与特点"><a class="markdownIt-Anchor" href="#概念与特点"></a> 概念与特点</h4><ul><li>有连接 可靠 传输层协议</li><li>有流量控制和差错控制</li><li>服务:<ul><li>提供进程到进程的通信</li><li>提供流传递服务, 类似于一个假想的管道, 存在缓冲区</li><li>全双工通信</li><li>面向连接</li></ul></li><li>使用序列号 seq, 值为该段包含的第一个(数据)字节的序号</li><li>使用确认号 ack, 值为接收方预期接受的下一个字节的序号</li></ul><h4 id="段格式"><a class="markdownIt-Anchor" href="#段格式"></a> 段格式</h4><blockquote><p>TCP 中的分组被称为"段"</p></blockquote><p><img src="20210622004618.png" alt="tcp segment"></p><ul><li>源端口地址, 目的端口地址: 和 UDP 中的一样</li><li>序列号 seq: 段中数据的第一个字节的序号, 连接建立时双方各自通过随机数产生初始序列号 (ISN)</li><li>确认号 ack: 段的接收方期望接受的下一个字节号</li><li>头部长度: 单位为<strong>4字节</strong>, 也就是说该字段的值为头部长度除以 4</li><li>保留: 就是保留</li><li>六个控制位<ul><li>URG: 紧急指针有效, 见后面</li><li>ACK: 该帧包含确认</li><li>PSH: 请求急迫/发送数据 <s>(其实没啥用)</s></li><li>RST: 连接复位 <s>(GFW经常就靠这个阻断你的连接)</s></li><li>SYN: 同步序列号</li><li>FIN: 终止连接</li></ul></li><li>窗口: 定义了接收窗口 (rwnd, Receive<strong>r</strong> Window) 的大小, 见阻塞控制</li><li>校验和: 计算方法一样, 也有伪头部, 伪头部 + 头部 + 数据, 但是书上没说 TCP 的伪头部是啥</li><li>紧急指针: 指向紧急字节的最后一个字节, 紧急字节总是位于段的开始, 收到后会被直接送往进程, 无需等待</li></ul><h4 id="连接的建立"><a class="markdownIt-Anchor" href="#连接的建立"></a> 连接的建立</h4><p><img src="20210622104459.png" alt="tcp establish"></p><ul><li>采用三次握手<ul><li>客户端: SYN (仅包含己方 seq, SYN 段不携带数据, 但占用序列号)</li><li>服务器: SYN + ACK (包含服务器的 seq 和 ack, 和单纯的 SYN 一样占用序列号)</li><li>客户端: ACK (若 ACK 段不携带数据, 则不占用序列号)</li></ul></li><li>存在 SYN 洪泛攻击的问题<ul><li>攻击方伪造大量的 SYN, 伪装成正常的连接请求</li><li>由于服务器需要为每一个请求分配资源, 因此很快被耗尽</li><li>最终服务器无法接受新的正常用户的请求 -&gt; 拒绝服务攻击 (DoS, Denial of Service)</li></ul></li></ul><blockquote><p>DDoS, Distributed Denial of Service, 就是分布式拒绝服务攻击</p></blockquote><h4 id="连接终止"><a class="markdownIt-Anchor" href="#连接终止"></a> 连接终止</h4><h5 id="三次挥手"><a class="markdownIt-Anchor" href="#三次挥手"></a> 三次挥手</h5><p><img src="20210622105351.png" alt="3 wave"></p><ul><li>主动方: FIN, 可携带数据, 占用一个序列号</li><li>被动方: FIN+ACK, 可携带数据, 占用一个序列号</li><li>主动方: ACK, 不占用序列号</li></ul><h5 id="四次挥手"><a class="markdownIt-Anchor" href="#四次挥手"></a> 四次挥手</h5><p><img src="20210622105644.png" alt="4 wave"></p><ul><li>主动方: FIN</li><li>被动方: FIN+ACK<ul><li>此时进入<strong>半关闭</strong></li><li>主动方不能够再发送数据, 但可以接收数据</li><li>被动方还能够继续发送数据</li></ul></li><li>被动方: FIN</li><li>主动方: ACK</li></ul><h4 id="差错控制"><a class="markdownIt-Anchor" href="#差错控制"></a> 差错控制</h4><h5 id="校验和-2"><a class="markdownIt-Anchor" href="#校验和-2"></a> 校验和</h5><p>在头部, 校验内容包括伪头部 + 头部 + 数据</p><h5 id="确认-2"><a class="markdownIt-Anchor" href="#确认-2"></a> 确认</h5><p>就是对占用序列号的段回送 ACK -&gt; ACK 本身不占用序列号, 所以不需要确认</p><h5 id="重传"><a class="markdownIt-Anchor" href="#重传"></a> 重传</h5><ul><li>出现损坏, 丢失或延迟时重传段</li><li>在实现中, 分为重传计时器到时和连续收到 3 个 ACK</li><li>重传计时器到时:<ul><li>已发送未确认的(占用序列号的)段有一个定时器<ul><li>称为 RTO 计时器 (Retransmission Time-Out)</li><li>其值根据往返时间动态更新</li><li>对 ACK 段不设置定时器</li></ul></li><li>定时器到时时重发最早的重要的段</li></ul></li><li>连续收到三个 ACK:<ul><li>触发<strong>快速重传</strong></li><li>立即发送缺少的段</li></ul></li><li>失序的段<ul><li>暂时保留, 直到缺少的那个段到达</li><li>TCP 保证提交给进程的数据是顺序正确的</li></ul></li></ul><p><img src="20210622111546.png" alt="RTO"></p><blockquote><p>重传计时器超时重传</p></blockquote><p><img src="20210622111612.png" alt="3 ACK"></p><blockquote><p>快速重传, 重传时 seq 301~400 的计时器还没到时, 但依然重传</p></blockquote><h4 id="tcp-拥塞控制"><a class="markdownIt-Anchor" href="#tcp-拥塞控制"></a> TCP 拥塞控制</h4><ul><li>在这里确定 cwnd 大小 (Congestion Window, 拥塞窗口)</li><li>采用三个阶段: 慢速启动, 拥塞避免, 拥塞检测</li><li>慢速启动: 指数增长<ul><li>开始时 cwnd = 1 MSS (最大段长度, 在连接建立时确定, 相当于这时窗口大小为一个段)</li><li>每一个段的确认都会使 cwnd+1, <strong>按照指数规律增长</strong></li><li>到达<strong>阈值</strong>时, 结束慢速启动阶段</li></ul></li><li>拥塞避免: 加性增加<ul><li>每次窗口中所有段均被确认后才有 cwnd+1</li><li>直到检测到拥塞</li></ul></li><li>拥塞检测: 乘性减少<ul><li>若重传计时器到时, 说明拥塞可能很严重: 段丢失且一直没收到相关信息<ul><li>强烈反应<ul><li>阈值设置为 cwnd 的一半</li><li>cwnd = 1 MSS</li><li>开始慢速启动阶段</li></ul></li><li>相当于阈值变为实际上限的一半, 然后重启传输 (速度方面)</li></ul></li><li>若接收到三个 ACK, 说明可能有轻度拥塞, 一些段可能已经成功到达, 仅有部分缺失<ul><li>轻度反应<ul><li>阈值设置为 cwnd 的一半</li><li>cwnd = 阈值 (部分实现是 阈值+3)</li><li>开始拥塞避免阶段 (就是加性增加)</li></ul></li></ul></li></ul></li></ul><p><img src="20210622114245.png" alt="c-control"></p><blockquote><p>SS: 慢速启动 (指数增长)<br>AI: 加性增加<br>MD: 乘性减少<br>Threshold: 阈值</p></blockquote><h4 id="tcp-流量控制-imp"><a class="markdownIt-Anchor" href="#tcp-流量控制-imp"></a> TCP 流量控制 [IMP]</h4><p><img src="20210622124037.png" alt="Window"></p><ul><li>采用滑动窗口, 面向字节, 又称信贷滑窗协议</li><li>窗口大小为头部中的接收窗口 (rwnd) 与 cwnd 较小值<ul><li>rwnd 表明了接收方当前可用的窗口大小</li></ul></li><li>在窗口中, 左侧为已发送但未确认的, 右侧为可立刻发送的</li><li>在窗口外, 左侧为已发送且已确认的, 右侧为未发送且尚不可发送的</li><li>发送方接收到 ACK 后, 可以合拢窗口: 左侧向右移动</li><li>当 rwnd 或 cwnd 更新时, 可以张开窗口: 右侧向右移动, 但不建议收缩 (右侧向左移动)</li><li>窗口左边沿不能向左移动</li></ul><h2 id="chapter-24-拥塞控制和服务质量"><a class="markdownIt-Anchor" href="#chapter-24-拥塞控制和服务质量"></a> Chapter 24 拥塞控制和服务质量</h2><h3 id="吞吐量和延迟-imp"><a class="markdownIt-Anchor" href="#吞吐量和延迟-imp"></a> 吞吐量和延迟 [IMP]</h3><ul><li>通常是衡量网络性能的因素</li><li>吞吐量:<ul><li>单位时间内通过网络的分组数量</li><li>载荷小于网络容量时, 吞吐量随载荷增加成比例增长</li><li>载荷达到网络容量时, 吞吐量会急剧下降 (一些分组被丢弃导致重传)</li></ul></li><li>延迟: 当载荷远小于网络容量时，延迟最小<ul><li>最小延迟是由传播延迟和处理延迟所组成的，且都可以忽略不计</li><li>载荷达到网络容量时, 延迟急剧增加 (分组需要排队)</li></ul></li></ul><h3 id="拥塞控制-imp"><a class="markdownIt-Anchor" href="#拥塞控制-imp"></a> 拥塞控制 [IMP]</h3><h4 id="开环拥塞控制"><a class="markdownIt-Anchor" href="#开环拥塞控制"></a> 开环拥塞控制</h4><ul><li>重传 (例如 TCP)</li><li>窗口 (比如选择性重复 ARQ)</li><li>确认 (ACK, 使用一个 ACK 确认多个分组与停止-等待 ARQ)</li><li>丢弃 (按照优先级)</li><li>许可 (虚电路建立连接时检查是否有拥塞, 有则拒绝建立连接)</li></ul><h4 id="闭环拥塞控制"><a class="markdownIt-Anchor" href="#闭环拥塞控制"></a> 闭环拥塞控制</h4><ul><li>背压: 从目的端方向的节点逐个拒绝接受上行节点的数据, 直到源端</li><li>抑制分组: 从发生拥塞的节点发送警告信息到源端</li><li>隐含信令: 进行推测, 例如过长时间没有收到确认</li><li>显示信令: 把信号包含在携带数据的分组中, 分前向信令 (向发生拥塞的方向), 后向信令 (原理发生拥塞的方向)</li></ul><h1 id="part-6-应用层"><a class="markdownIt-Anchor" href="#part-6-应用层"></a> Part 6 应用层</h1><h2 id="chapter-25-域名系统"><a class="markdownIt-Anchor" href="#chapter-25-域名系统"></a> Chapter 25 域名系统</h2><blockquote><p>DNS: Domain Name System</p></blockquote><h3 id="域名空间-imp"><a class="markdownIt-Anchor" href="#域名空间-imp"></a> 域名空间 [IMP]</h3><ul><li>使用倒置的树定义</li><li>最多 128 级, 根节点为 0 级</li><li>每个节点都有一个标号 (最长 63 的字符串), <strong>根节点标号为空</strong></li><li>每一个节点的子节点标号不能相同 -&gt; 保证了域名的唯一性</li><li>域名由从子节点向根节点方向上的标号组成, 由点分割</li><li>全称域名 (FQDN)<ul><li>Full Qualified Domain Name</li><li>包含每一个节点</li><li>以点结尾, 因为最后的根节点标号为空</li></ul></li><li>部分域名<ul><li>Partially Qualified Domain Name</li><li>起始于子节点, 但没有到达根节点</li><li>所以不以点结尾</li></ul></li></ul><h3 id="客户端服务器模式的域名解析-imp"><a class="markdownIt-Anchor" href="#客户端服务器模式的域名解析-imp"></a> 客户端服务器模式的域名解析 [IMP]</h3><ul><li>客户端通过请求最近的 DNS 服务器</li><li>正向查询: 域名到地址</li><li>反向查询: 地址到域名, 也叫 PTR 查询 (指针查询)<ul><li>若要查询 A.B.C.D 的域名, 发送 <code>D.C.B.A.in-addr.arpa.</code></li><li>注意反向和最后的点</li></ul></li><li>分为递归解析和迭代解析<ul><li>递归解析: 客户机期望本地服务器直接提供最终结果<ul><li>如果该服务器是这个域名的授权服务器, 则直接响应</li><li>否则把请求转发给另一个服务器 (通常是父服务器)<ul><li>如果父服务器是授权服务器, 则父服务器 -&gt; 本地服务器 -&gt; 客户端</li><li>否则继续递归, 直到找到结果</li></ul></li></ul></li><li>迭代解析: 客户机自己一个一个询问找到结果<ul><li>如果该服务器是这个域名的授权服务器, 则直接响应</li><li>否则该服务器返回一个它认为可能知道的服务器的地址, 由客户机自己去继续查询</li></ul></li></ul></li><li>DNS 服务器采用缓存技术, 存储最近的查询与结果<ul><li>通过在查询条目中添加 TTL (生存时间) 来保证结果不过时</li></ul></li></ul><h3 id="dns-报文"><a class="markdownIt-Anchor" href="#dns-报文"></a> DNS 报文</h3><ul><li>查询和请求报文头部相同</li><li>看书 p534</li></ul><h2 id="chapter-26-远程登录-电子邮件和文件传输"><a class="markdownIt-Anchor" href="#chapter-26-远程登录-电子邮件和文件传输"></a> Chapter 26 远程登录、电子邮件和文件传输</h2><h3 id="telnet"><a class="markdownIt-Anchor" href="#telnet"></a> TELNET</h3><blockquote><p>TELNET: Terminal NETwork, 终端网络</p></blockquote><ul><li>建立到远程计算机的连接 (类似命令行版本的远程桌面)</li><li>是客户端/服务器架构</li></ul><h3 id="电子邮件"><a class="markdownIt-Anchor" href="#电子邮件"></a> 电子邮件</h3><h4 id="构架"><a class="markdownIt-Anchor" href="#构架"></a> 构架</h4><ul><li>UA: 用户代理程序, 负责生成邮件 (类似邮件客户端, 人用的那个)</li><li>MTA: 报文传输代理, 负责转发与保存, 客户端只能推入报文 (push)</li><li>MAA: 报文访问代理, 负责提供收到的报文, 客户端只能取出报文 (pull)</li><li>发送方为 A, 接收方为 B:<ul><li>同一系统: A -&gt; UA -&gt; 系统 -&gt; UA -&gt; B</li><li>不同系统: A -&gt; UA -&gt; MTA客户端(在邮件服务器上) -&gt; 因特网 -&gt; MTA服务器(在另一台邮件服务器上) -&gt; UA -&gt; B</li><li>一方未直接连接到邮件服务器: 先通过广域网/局域网把邮件报文发到服务器</li><li>双方均为👆: A-&gt;UA-&gt;MTA客户端(在A的计算机上)-&gt;MTA客户端(在邮件服务器上)-&gt;因特网-&gt;MTA服务器(在另一台邮件服务器上)-&gt;MAA服务器(同前)-&gt;MAA客户端(在B计算机上)-&gt;UA-&gt;B</li></ul></li></ul><h4 id="mime-imp"><a class="markdownIt-Anchor" href="#mime-imp"></a> MIME [IMP]</h4><blockquote><p>MIME: Multipurpose Internet Mail Extension, 多用途因特网邮件扩展</p></blockquote><ul><li>将非 ASCII 数据转换成 NVT ASCII 数据</li></ul><h4 id="smtp-imp"><a class="markdownIt-Anchor" href="#smtp-imp"></a> SMTP [IMP]</h4><blockquote><p>SMTP: Simple Mail Transfer Protocol, 简单邮件传输协议</p></blockquote><ul><li>是报文传输代理 (MTA) 协议</li><li>定义了一组交换邮件的命令</li></ul><h4 id="pop3-和-imap4-imp"><a class="markdownIt-Anchor" href="#pop3-和-imap4-imp"></a> POP3 和 IMAP4 [IMP]</h4><blockquote><p>POP: Post Office Protocol ver 3, 邮局协议版本 3<br>IMAP: Internet Mail Access Protocol ver 4, 因特网邮件访问协议版本 4</p></blockquote><ul><li>都是报文访问代理 (MAA) 协议, 提供用户和邮件服务器间的报文阅读</li><li>POP3:<ul><li>功能简单, 不支持预览</li><li>支持删除模式和保存模式<ul><li>删除: 邮件从邮箱读取后即被删除</li><li>保存: 读后不删除</li></ul></li></ul></li><li>IMAP4:<ul><li>可以在下载前读取头部或内容中的特定字符串</li><li>可以部分下载邮件内容</li></ul></li></ul><h3 id="文件传输"><a class="markdownIt-Anchor" href="#文件传输"></a> 文件传输</h3><h4 id="ftp-imp"><a class="markdownIt-Anchor" href="#ftp-imp"></a> FTP [IMP]</h4><ul><li>客户机/服务器模式</li><li>控制端口 21, 数据端口 20</li><li>前者在整个会话期间持续连接, 后者仅在文件传输时连接</li><li>需要登陆, 但服务器可以允许匿名帐户 (谁都能用)</li><li>可以传输文本和二进制文件</li></ul><h2 id="chapter-27-万维网与超文本传输协议"><a class="markdownIt-Anchor" href="#chapter-27-万维网与超文本传输协议"></a> Chapter 27 万维网与超文本传输协议</h2><h3 id="url-imp"><a class="markdownIt-Anchor" href="#url-imp"></a> URL [IMP]</h3><blockquote><p>URL: Uniform Resource Locator, 统一资源定位符</p></blockquote><ul><li>格式: <code>协议 :// 主机 : 端口 / 路径</code><ul><li>例如 <code>https://example.suffix:80/index</code></li></ul></li><li>端口可选, 协议最常用的是 HTTP</li></ul><h3 id="http"><a class="markdownIt-Anchor" href="#http"></a> HTTP</h3><blockquote><p>HTTP: HyperText Transfer Protocol, 超文本传输协议</p></blockquote><h4 id="概念-imp-3"><a class="markdownIt-Anchor" href="#概念-imp-3"></a> 概念 [IMP]</h4><ul><li>在 80 端口上使用 TCP</li><li>同样用来存取信息, 类似 FTP 和 SMTP 的组合</li></ul><h4 id="报文结构-imp"><a class="markdownIt-Anchor" href="#报文结构-imp"></a> 报文结构 [IMP]</h4><p><img src="20210622141444.png" alt="req"></p><blockquote><p>请求报文的结构</p></blockquote><p><img src="20210622141525.png" alt="res"></p><blockquote><p>响应报文的结构</p></blockquote><ul><li>都是纯文本的</li><li>请求类型: GET, POST, HEAD, PUT, TRACE 等等</li><li>首部: 类似于选项, 指定了可接受的格式, 语言, 过期时间等</li></ul><blockquote><p>无关内容: 实际上有些人认为 HTTP 报文由于使用了纯文本, 不利于快速解析<br>不过纯文本倒是有个显著优点 - 人类可读 🐶</p></blockquote><h4 id="http-操作"><a class="markdownIt-Anchor" href="#http-操作"></a> HTTP 操作</h4><ul><li>HTTP 本身是无状态的, 状态需要依赖 cookie 保存</li><li>客户端发送请求报文来初始化HTTP事务</li><li>服务器发送响应报文进行回复</li></ul><blockquote><p><em>0620 🕊🕊🕊 计划: To Chapter 18, end of Part 3 - Datalink Layer</em><br><em>0620 Completed 🍻</em><br><em>0621 🕊🕊🕊 计划: To Chapter 20 - IP Protocol</em><br><em>0621 Finished Chapter 24, end of Part 5 - Network Layer 🍻</em><br><em>0622 🕊🕊🕊 计划: Finish’em ALL</em><br><em>0622 We made it.</em></p></blockquote>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/CS-Network/">CS Network</category>
      
      <category domain="https://horizonchaser.github.io/tags/Review/">Review</category>
      
      
      <comments>https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>BUUCTF Weekly Reverse</title>
      <link>https://horizonchaser.github.io/2021/02/01/2021-Weekly-Reverse/</link>
      <guid>https://horizonchaser.github.io/2021/02/01/2021-Weekly-Reverse/</guid>
      <pubDate>Mon, 01 Feb 2021 21:04:56 GMT</pubDate>
      
      <description>BUUCTF上的逆向练习与 Writeup</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="week-5-0131-0206-buuctf"><a class="markdownIt-Anchor" href="#week-5-0131-0206-buuctf"></a> Week 5, 01/31 - 02/06, BUUCTF</h2><h3 id="reverse1"><a class="markdownIt-Anchor" href="#reverse1"></a> reverse1</h3><p>用 ExeinfoPE 看一下, 是一个 x64 程序.</p><p><img src="2021-Weekly-Reverse/image-20210201212113576.png" alt="image-20210201212113576"></p><p>IDA, 入口是<code>sub_140012170</code>, 一路跟踪下去到<code>sub_140012190</code>,  <s>然后分析不能</s></p><p>从 Strings window 看一下, 发现一条明显的提示语 <code>wrong flag</code>, 看一下, 是<code>sub_1400118C0</code>引用了它, 跳过去康康.</p><p><img src="2021-Weekly-Reverse/image-20210201212247636.png" alt="image-20210201212247636"></p><p>第18行的 <code>for</code>循环中, 把 <code>Str2[]</code>中的<code>o</code>全部替换为了<code>0</code>, 然后和输入的<code>Str1</code>进行比较, 判断是否正确.</p><p><code>Str2[]</code>的内容是<code>{hello_world}</code>, 替换后输入程序检查, 确定正确.</p><p><code>flag{hell0_w0rld}</code></p><h3 id="reverse3"><a class="markdownIt-Anchor" href="#reverse3"></a> reverse3</h3><p>IDA, 找到 <code>main</code>之后 F5, 大概修改一些名称之后得到如下.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main_0</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>{<br>  <span class="hljs-type">size_t</span> StrLen; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">size_t</span> destLen2; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> v7; <span class="hljs-comment">// [esp+0h] [ebp-188h]</span><br>  <span class="hljs-type">char</span> v8; <span class="hljs-comment">// [esp+0h] [ebp-188h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [esp+DCh] [ebp-ACh]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+E8h] [ebp-A0h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> destLen; <span class="hljs-comment">// [esp+E8h] [ebp-A0h]</span><br>  <span class="hljs-type">char</span> Destination[<span class="hljs-number">108</span>]; <span class="hljs-comment">// [esp+F4h] [ebp-94h] BYREF</span><br>  <span class="hljs-type">char</span> Str[<span class="hljs-number">28</span>]; <span class="hljs-comment">// [esp+160h] [ebp-28h] BYREF</span><br>  <span class="hljs-type">char</span> v14[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [esp+17Ch] [ebp-Ch] BYREF</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)i &gt;= <span class="hljs-number">0x64</span> )<br>      j____report_rangecheckfailure();<br>    Destination[i] = <span class="hljs-number">0</span>;<br>  }<br>  alert(<span class="hljs-string">"please enter the flag:"</span>, v7);<br>  input(<span class="hljs-string">"%20s"</span>, (<span class="hljs-type">char</span>)Str);<br>  StrLen = j_strlen(Str);<br>  v4 = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)sub_4110BE(Str, StrLen, v14);<br>  <span class="hljs-built_in">strncpy</span>(Destination, v4, <span class="hljs-number">0x28</span>u);<br>  destLen = j_strlen(Destination);<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; destLen; ++j )<br>    Destination[j] += j;<br>  destLen2 = j_strlen(Destination);<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strncmp</span>(Destination, aE3nifih9bCNDh, destLen2) )<br>    alert(<span class="hljs-string">"rigth flag!\n"</span>, v8);<br>  <span class="hljs-keyword">else</span><br>    alert(<span class="hljs-string">"wrong flag!\n"</span>, v8);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>在得到输入之后, <code>sub_4110BE</code>对输入的 <code>Str</code>进行了一些处理, 同时 27 行的 <code>for</code> 循环也对 <code>Destination[]</code> 进行了移位, 之后两者比较判断是否正确.</p><p>观察 <code>sub_4110BE</code>, 发现其中调用了一个 base64 的编码表, 结合行为确定是对输入进行 base64 编码.</p><p>把 <code>Destination[]</code>的内容进行反移位, 得到<code>e2lfbDB2ZV95b3V9</code>, base64 解码后得到 <code>{i_l0ve_you}</code></p><p><code>flag{i_l0ve_you}</code></p><p><s>另外题中的"right"打错了…</s></p><h3 id="simplerev"><a class="markdownIt-Anchor" href="#simplerev"></a> SimpleRev</h3><p>DIE 检查, 发现是一个 x64 ELF 文件. IDA 打开, 定位到 <code>main</code>.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> __cdecl __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>{<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [rsp+Fh] [rbp-1h]</span><br><br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: "</span>);<br>      v4 = getchar();<br>      <span class="hljs-keyword">if</span> ( v4 != <span class="hljs-string">'d'</span> &amp;&amp; v4 != <span class="hljs-string">'D'</span> )<br>        <span class="hljs-keyword">break</span>;<br>      Decry();<br>    }<br>    <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-string">'q'</span> || v4 == <span class="hljs-string">'Q'</span> )<br>      Exit(<span class="hljs-string">"Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: "</span>, argv);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Input fault format!"</span>);<br>    v3 = getchar();<br>    <span class="hljs-built_in">putchar</span>(v3);<br>  }<br>}<br></code></pre></td></tr></tbody></table></figure><p>明显, 在 <code>Decry</code> 函数中进行了 flag 的验证…</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">Decry</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">char</span> currChar; <span class="hljs-comment">// [rsp+Fh] [rbp-51h]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+10h] [rbp-50h]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+14h] [rbp-4Ch]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+18h] [rbp-48h]</span><br>  <span class="hljs-type">int</span> keyLen; <span class="hljs-comment">// [rsp+1Ch] [rbp-44h]</span><br>  <span class="hljs-type">char</span> src[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-40h] BYREF</span><br>  __int64 v7; <span class="hljs-comment">// [rsp+28h] [rbp-38h]</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+30h] [rbp-30h]</span><br>  <span class="hljs-type">char</span> *v9; <span class="hljs-comment">// [rsp+40h] [rbp-20h] BYREF</span><br>  __int64 v10; <span class="hljs-comment">// [rsp+48h] [rbp-18h]</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [rsp+50h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v12; <span class="hljs-comment">// [rsp+58h] [rbp-8h]</span><br><br>  v12 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  *(_QWORD *)src = <span class="hljs-string">'SLCDN'</span>;<br>  v7 = <span class="hljs-number">0LL</span>;<br>  v8 = <span class="hljs-number">0</span>;<br>  v9 = (<span class="hljs-type">char</span> *)<span class="hljs-string">'wodah'</span>;<br>  v10 = <span class="hljs-number">0LL</span>;<br>  v11 = <span class="hljs-number">0</span>;<br>  text = join(key3, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;v9);         <span class="hljs-comment">// text == killshadow</span><br>  <span class="hljs-built_in">strcpy</span>(key, key1);                            <span class="hljs-comment">// key == ASDFK</span><br>  <span class="hljs-built_in">strcat</span>(key, src);                             <span class="hljs-comment">// key == ASDFKNDCLS</span><br>  v2 = <span class="hljs-number">0</span>;<br>  v3 = <span class="hljs-number">0</span>;<br>  getchar();<br>  keyLen = <span class="hljs-built_in">strlen</span>(key);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; keyLen; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( key[v3 % keyLen] &gt; <span class="hljs-string">'@'</span> &amp;&amp; key[v3 % keyLen] &lt;= <span class="hljs-string">'Z'</span> )<br>      key[i] = key[v3 % keyLen] + <span class="hljs-number">32</span>;<br>    ++v3;<br>  }<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input your flag:"</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  {<br>    currChar = getchar();<br>    <span class="hljs-keyword">if</span> ( currChar == <span class="hljs-string">'\n'</span> )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( currChar == <span class="hljs-string">' '</span> )<br>    {<br>      ++v2;<br>    }<br>    <span class="hljs-keyword">else</span><br>    {<br>      <span class="hljs-keyword">if</span> ( currChar &lt;= <span class="hljs-number">96</span> || currChar &gt; <span class="hljs-number">122</span> )   <span class="hljs-comment">// NOT lower case</span><br>      {<br>        <span class="hljs-keyword">if</span> ( currChar &gt; <span class="hljs-string">'@'</span> &amp;&amp; currChar &lt;= <span class="hljs-string">'Z'</span> )<span class="hljs-comment">// upper case</span><br>        {<br>          str2[v2] = (currChar - <span class="hljs-number">39</span> - key[v3 % keyLen] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;<br>          ++v3;<br>        }<br>      }<br>      <span class="hljs-keyword">else</span><br>      {<br>        str2[v2] = (currChar - <span class="hljs-number">39</span> - key[v3 % keyLen] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;<br>        ++v3;<br>      }<br>      <span class="hljs-keyword">if</span> ( !(v3 % keyLen) )<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">' '</span>);<br>      ++v2;<br>    }<br>  }<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(text, str2) )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congratulation!\n"</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Try again!\n"</span>);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v12;<br>}<br></code></pre></td></tr></tbody></table></figure><p>在 37 行的 <code>while</code> 循环后, 通过计算 <code>str2[]</code>的值并判断是否与<code>text</code>相等来确定 flag 正确与否, 写个脚本爆破即可.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">upperTable=<span class="hljs-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br>lowerTable = upperTable.lower()<br>key=<span class="hljs-built_in">list</span>(<span class="hljs-string">'ADSFKNDCLS'</span>.lower())<br>klens=<span class="hljs-built_in">len</span>(key)<br><br>text=<span class="hljs-string">'killshadow'</span><br>flag=<span class="hljs-string">''</span><br>flag2=<span class="hljs-string">''</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text)):<br>    str2=text[i]<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> upperTable:<br>        <span class="hljs-keyword">if</span> str2== <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(c) - <span class="hljs-number">39</span> - <span class="hljs-built_in">ord</span>(key[i  % klens]) + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>):<br>            flag+=c<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text)):<br>    str2=text[i]<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> lowerTable:<br>        <span class="hljs-keyword">if</span> str2== <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(c) - <span class="hljs-number">39</span> - <span class="hljs-built_in">ord</span>(key[i  % klens]) + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>):<br>            flag2+=c<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'flag{'</span>+flag+<span class="hljs-string">'}'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'flag{'</span>+flag2+<span class="hljs-string">'}'</span>)<br></code></pre></td></tr></tbody></table></figure><p>因为并未对大小写进行限定, 所以大小写理论上均可…大概, 总之大写是可以的.</p><p><code>flag{KLDQCUDFZO}</code></p><h2 id="week-6-0207-0214-buuctf"><a class="markdownIt-Anchor" href="#week-6-0207-0214-buuctf"></a> Week 6, 02/07 - 02/14, BUUCTF</h2><h3 id="crackrtf"><a class="markdownIt-Anchor" href="#crackrtf"></a> CrackRTF</h3><p>看题目说明, 在文件中藏了一个 rtf 文件, 不过用 binwalk 扫描没发现什么. 可能是加密了…</p><p>用 IDA 打开, 定位到 <code>main_0</code>, 发现需要两个密码, 长度均为 6 个字符, 其中第一个为纯数字, 与 <code>@DBApp</code> 链接后计算一个哈希值, 与 <code>6E32D0943418C2C33385BC35A1470250DD8923A9</code> 比较.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main_0</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>{<br>  DWORD v3; <span class="hljs-comment">// eax</span><br>  DWORD v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> Str[<span class="hljs-number">260</span>]; <span class="hljs-comment">// [esp+4Ch] [ebp-310h] BYREF</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [esp+150h] [ebp-20Ch]</span><br>  <span class="hljs-type">char</span> String1[<span class="hljs-number">260</span>]; <span class="hljs-comment">// [esp+154h] [ebp-208h] BYREF</span><br>  <span class="hljs-type">char</span> Destination[<span class="hljs-number">260</span>]; <span class="hljs-comment">// [esp+258h] [ebp-104h] BYREF</span><br><br>  <span class="hljs-built_in">memset</span>(Destination, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(Destination));<br>  <span class="hljs-built_in">memset</span>(String1, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(String1));<br>  v7 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"pls input the first passwd(1): "</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, Destination);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(Destination) != <span class="hljs-number">6</span> )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Must be 6 characters!\n"</span>);<br>    ExitProcess(<span class="hljs-number">0</span>);<br>  }<br>  v7 = atoi(Destination);<br>  <span class="hljs-keyword">if</span> ( v7 &lt; <span class="hljs-number">100000</span> )<br>    ExitProcess(<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">strcat</span>(Destination, <span class="hljs-string">"@DBApp"</span>);<br>  v3 = <span class="hljs-built_in">strlen</span>(Destination);<br>  getSHA1((BYTE *)Destination, v3, String1);<br>  <span class="hljs-keyword">if</span> ( !_strcmpi(String1, <span class="hljs-string">"6E32D0943418C2C33385BC35A1470250DD8923A9"</span>) )<br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"continue...\n\n"</span>);                  <span class="hljs-comment">// Destination == 123321@DBApp</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"pls input the first passwd(2): "</span>);<br>    <span class="hljs-built_in">memset</span>(Str, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(Str));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, Str);<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(Str) != <span class="hljs-number">6</span> )<br>    {<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Must be 6 characters!\n"</span>);<br>      ExitProcess(<span class="hljs-number">0</span>);<br>    }<br>    <span class="hljs-built_in">strcat</span>(Str, Destination);<br>    <span class="hljs-built_in">memset</span>(String1, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(String1));<br>    v4 = <span class="hljs-built_in">strlen</span>(Str);<br>    getMD5((BYTE *)Str, v4, String1);<br>    <span class="hljs-keyword">if</span> ( !_strcmpi(<span class="hljs-string">"27019e688a4e62a649fd99cadaafdb4e"</span>, String1) )<br>    {<br>      <span class="hljs-keyword">if</span> ( !(<span class="hljs-type">unsigned</span> __int8)sub_40100F(Str) )<br>      {<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Error!!\n"</span>);<br>        ExitProcess(<span class="hljs-number">0</span>);<br>      }<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"bye ~~\n"</span>);<br>    }<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>进入 <code>sub_401230</code>, 定位到 <code>CryptCreateHash(phProv, 0x8004u, 0, 0, &amp;phHash)</code>, 搜一下这个函数的<a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id">文档</a>, 发现第二个参数控制了计算的哈希种类, <code>0x8004</code>是 SHA1, <code>0x8003</code>是 MD5. 由此我们可以对在 [100000, 1000000) 的前半部分进行爆破, 写个脚本.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>prefix = <span class="hljs-string">""</span><br>postfix = <span class="hljs-string">"@DBApp"</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>, <span class="hljs-number">1000000</span>):<br>    prefix = <span class="hljs-built_in">str</span>(i)<br>    shaObj = hashlib.sha1(<span class="hljs-built_in">bytes</span>(prefix + postfix, encoding=<span class="hljs-string">"UTF-8"</span>))<br>    <span class="hljs-comment"># print(shaObj.hexdigest())</span><br>    <span class="hljs-keyword">if</span>(shaObj.hexdigest() == <span class="hljs-string">"6E32D0943418C2C33385BC35A1470250DD8923A9"</span>.lower()):<br>        <span class="hljs-built_in">print</span>(prefix + postfix)<br>     <br></code></pre></td></tr></tbody></table></figure><p>这样, 我们得到了第一个密码 <code>1233321</code>, 这时 <code>Destination == "123321@DBApp"</code>, 输入的第二个密码后面会连接 <code>Destination</code>, 然后计算 MD5 值, 和 <code>27019e688a4e62a649fd99cadaafdb4e</code>比较, 判断是否正确.</p><p>需要注意的是, 第二个密码只限制了长度, 没有限制是纯数字…<s>没注意到的话你可能就会和我一样卡住了</s></p><p>到这里, 我们有两种方法.</p><h4 id="充分利用你电脑的计算能力"><a class="markdownIt-Anchor" href="#充分利用你电脑的计算能力"></a> 充分利用你电脑的计算能力</h4><p>我们已知第二个 MD5 原文的后半部分和前半部分的长度, 相当于一个加盐的 MD5 爆破 - <a href="https://github.com/hashcat/hashcat">HashCat </a>很适合干这个事儿, 特别是你的 GPU 比较强的时候.</p><p>用如下的命令行进行一次 <code>md5($pass.$salt)</code>掩码攻击. <s>其实就是暴力穷举, 不过更高级一点, 大概</s></p><p><code>.\hashcat.exe -m 10 "27019e688a4e62a649fd99cadaafdb4e:123321@DBApp" -a 3 ?a?a?a?a?a?a</code></p><p>在我的电脑上, 大概十秒就得到了结果…</p><p><img src="2021-Weekly-Reverse/image-20210207140651360.png" alt="image-20210207140651360"></p><p>前半部分是 <code>~!3a@0</code>, 把俩密码输入程序, 得到一个 RTF 文档, 打开就是 flag.</p><p><s>不过, 我认为这应该不是出题人的最初想法吧</s></p><h4 id="充分利用你自己的-计算能力-解题能力"><a class="markdownIt-Anchor" href="#充分利用你自己的-计算能力-解题能力"></a> 充分利用你自己的 <s>计算能力</s> 解题能力</h4><p>在 <code>main_0</code> 的 44 行, 我们发现在两个密码验证正确后, 调用了 <code>sub_40400F</code>, 参数是 <code>Str</code>.</p><p><code>sub_40400F</code>会再调用 <code>sub_4014D0</code>, 参数变为 <code>LPCSTR</code>类型.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> __cdecl <span class="hljs-title function_">sub_4014D0</span><span class="hljs-params">(LPCSTR lpString)</span><br>{<br>  LPCVOID lpBuffer; <span class="hljs-comment">// [esp+50h] [ebp-1Ch]</span><br>  DWORD NumberOfBytesWritten; <span class="hljs-comment">// [esp+58h] [ebp-14h] BYREF</span><br>  DWORD nNumberOfBytesToWrite; <span class="hljs-comment">// [esp+5Ch] [ebp-10h]</span><br>  HGLOBAL hResData; <span class="hljs-comment">// [esp+60h] [ebp-Ch]</span><br>  HRSRC hResInfo; <span class="hljs-comment">// [esp+64h] [ebp-8h]</span><br>  HANDLE hFile; <span class="hljs-comment">// [esp+68h] [ebp-4h]</span><br><br>  hFile = <span class="hljs-number">0</span>;<br>  hResData = <span class="hljs-number">0</span>;<br>  nNumberOfBytesToWrite = <span class="hljs-number">0</span>;<br>  NumberOfBytesWritten = <span class="hljs-number">0</span>;<br>  hResInfo = FindResourceA(<span class="hljs-number">0</span>, (LPCSTR)<span class="hljs-number">0x65</span>, <span class="hljs-string">"AAA"</span>);<br>  <span class="hljs-keyword">if</span> ( !hResInfo )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  nNumberOfBytesToWrite = SizeofResource(<span class="hljs-number">0</span>, hResInfo);<br>  hResData = LoadResource(<span class="hljs-number">0</span>, hResInfo);<br>  <span class="hljs-keyword">if</span> ( !hResData )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  lpBuffer = LockResource(hResData);<br>  sub_401005(lpString, (<span class="hljs-type">int</span>)lpBuffer, nNumberOfBytesToWrite);<br>  hFile = CreateFileA(<span class="hljs-string">"dbapp.rtf"</span>, <span class="hljs-number">0x10000000</span>u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2u</span>, <span class="hljs-number">0x80</span>u, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( hFile == (HANDLE)<span class="hljs-number">-1</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( !WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, &amp;NumberOfBytesWritten, <span class="hljs-number">0</span>) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  CloseHandle(hFile);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>首先是 <code>FindResourceA</code>这个函数, 从<a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-findresourcea">文档</a>来看, 它会尝试寻找名称为 <code>0x65</code>, 类型为 <code>AAA</code> 的资源, 然后通过<code>SizeofResource</code>计算长度, 通过<code>LoadResource</code>加载到<code>lpBuffer</code>中并上锁, 之后调用了<code>sub_401005</code>进行了什么操作, 然后创建<code>dbapp.rtf</code>并写文件, 最后关闭.</p><p>看来<code>sub_401005</code>就是解密函数了.</p><p><code>sub_401005</code>会继续调用<code>sub_401420</code>, 主要是一个异或的循环…</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_401420</span><span class="hljs-params">(LPCSTR key, <span class="hljs-type">int</span> fileContentOffset, <span class="hljs-type">int</span> a3)</span><br>{<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+4Ch] [ebp-Ch]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> keyLen; <span class="hljs-comment">// [esp+54h] [ebp-4h]</span><br><br>  keyLen = lstrlenA(key);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  {<br>    result = i;<br>    <span class="hljs-keyword">if</span> ( i &gt;= a3 )<br>      <span class="hljs-keyword">break</span>;<br>    *(_BYTE *)(i + fileContentOffset) ^= key[i % keyLen];<br>  }<br>  <span class="hljs-keyword">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure><p>在这里, 会将现有数据的每一位和密钥进行异或作为解密, 而原文件是一个 RTF 格式的文件, 文件头是 <a href="https://www.filesignatures.net/index.php?page=search&amp;search=7B5C72746631&amp;mode=SIG"><code>7B 5C 72 74 66 31</code></a>, 正好六个字节, 和第二段密码一样长.</p><p>参考<a href="https://blog.csdn.net/qq_43786458/article/details/102488408">这篇题解</a>, 用 ResourceHacker 看一下资源,果然找到了这个. (0x65 == 101)</p><p><img src="2021-Weekly-Reverse/image-20210207150448312.png" alt="image-20210207150448312"></p><p>加密后的文件头是 <code>05 7D 41 15 26 01</code>, 把它和原来的文件头进行异或就得到了第二段密码: <code>~!3a@0</code></p><p><code>flag{N0_M0re_Free_Bugs}</code></p><h2 id="week-11-0314-0320-buuctf"><a class="markdownIt-Anchor" href="#week-11-0314-0320-buuctf"></a> Week 11, 03/14 - 03/20, BUUCTF</h2><h3 id="suctf2019signin"><a class="markdownIt-Anchor" href="#suctf2019signin"></a> [SUCTF2019]SignIn</h3><p><s>好像摸鱼摸的太狠了… 从开学到现在啥也没干…</s></p><p>IDA 打开, 定位到<code>main</code>, 发现两个大整数.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>{<br>  <span class="hljs-type">char</span> v4[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-4A0h] BYREF</span><br>  <span class="hljs-type">char</span> v5[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-490h] BYREF</span><br>  <span class="hljs-type">char</span> v6[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-480h] BYREF</span><br>  <span class="hljs-type">char</span> v7[<span class="hljs-number">16</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-470h] BYREF</span><br>  <span class="hljs-type">char</span> input[<span class="hljs-number">112</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-460h] BYREF</span><br>  <span class="hljs-type">char</span> coded[<span class="hljs-number">1000</span>]; <span class="hljs-comment">// [rsp+B0h] [rbp-3F0h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v10; <span class="hljs-comment">// [rsp+498h] [rbp-8h]</span><br><br>  v10 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"[sign in]"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"[input your flag]: "</span>);<br>  __isoc99_scanf(<span class="hljs-string">"%99s"</span>, input);<br>  sub_96A(input, coded);<br>  __gmpz_init_set_str(v7, <span class="hljs-string">"ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35"</span>, <span class="hljs-number">16LL</span>);<br>  __gmpz_init_set_str(v6, coded, <span class="hljs-number">16LL</span>);<br>  __gmpz_init_set_str(v4, <span class="hljs-string">"103461035900816914121390101299049044413950405173712170434161686539878160984549"</span>, <span class="hljs-number">10LL</span>);<br>  __gmpz_init_set_str(v5, <span class="hljs-string">"65537"</span>, <span class="hljs-number">10LL</span>);<br>  __gmpz_powm(v6, v6, v5, v4);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)__gmpz_cmp(v6, v7) )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"GG!"</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"TTTTTTTTTTql!"</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><code>sub_96A</code>会把输入进行处理, 得到 16 进制字符串. 之后的<code>__gmpz_</code>系列函数是 GNU 的高精度计算库.</p><p>16 ~ 19 行初始化了四个整数, 查看<a href="https://gmplib.org/manual/Integer-Exponentiation">文档</a>发现<code>__gmpz_powm(mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod)</code>实际上等价于<code>rop = (base ^ exp) % mod</code>. 另外, 据说这个函数经常在 RSA 算法中出现…</p><p>RSA! 这些大整数正好就是 RSA 中会用到的! 对应一下, <code>v7</code>是密文, <code>v6</code>是明文, <code>v5</code>是<code>e</code>, <code>v4</code>就是<code>n</code>. 把<code>v4</code>放到 <a href="http://factordb.com/index.php">factor.db</a> 分解一下, 得到了<code>p</code>和<code>q</code>.</p><p><img src="2021-Weekly-Reverse/image-20210318200048244.png" alt="image-20210318200048244"></p><p>这样, RSA 算法的所有变量我们都拿到了, 直接写个脚本解密就能拿到 flag 了.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> binascii<br><br>n = <span class="hljs-number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span><br><br>p = gmpy2.mpz(<span class="hljs-number">282164587459512124844245113950593348271</span>)<br>q = gmpy2.mpz(<span class="hljs-number">366669102002966856876605669837014229419</span>)<br>e = gmpy2.mpz(<span class="hljs-number">65537</span>)<br>eula = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e, eula)<br>c = gmpy2.mpz(<span class="hljs-number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span>)<br><br>dec = gmpy2.powmod(c, d, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"十进制:\n%s"</span>%dec)<br>dec_hex = <span class="hljs-built_in">hex</span>(dec)[<span class="hljs-number">2</span>:]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"十六进制:\n%s"</span>%(dec_hex,))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"ascii:\n%s"</span>%(binascii.a2b_hex(dec_hex).decode(encoding=<span class="hljs-string">"utf8"</span>)))<br></code></pre></td></tr></tbody></table></figure><p>由于<code>gmpy2</code>在我的 Windows 下装不上 (需要<code>gmp</code> <code>mpfr</code> <code>mpc</code>), 因此我在 Ubuntu 虚拟机下面装了.</p><p>拿到结果.</p><p><img src="2021-Weekly-Reverse/image-20210318200810904.png" alt="image-20210318200810904"></p><p>flag: <code>suctf{Pwn_@_hundred_years}</code></p><h2 id="week-13-0328-0403-buuctf"><a class="markdownIt-Anchor" href="#week-13-0328-0403-buuctf"></a> Week 13, 03/28 - 04/03, BUUCTF</h2><h3 id="flareon6-overlong"><a class="markdownIt-Anchor" href="#flareon6-overlong"></a> [FlareOn6] Overlong</h3><p>PE32 程序, 没发现有壳, 直接用 IDA 打开, 只有三个函数, 而且没有 <code>.init_array</code>和<code>.fini_array</code>段, 没有发现有价值的明文字符串 - 也就是说有某种形式的加解密.</p><p><img src="2021-Weekly-Reverse/image-20210402231014192.png" alt="image-20210402231014192"></p><p>运行一下试试, 注意到下图最后是个冒号… 推测应该是长度限制了.</p><p><img src="2021-Weekly-Reverse/image-20210402231001573.png" alt="image-20210402231001573"></p><p>IDA 打开<code>start</code>函数, 很容易定位到解密函数, 它的第二个参数是密文, 第三个参数就是长度.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __stdcall <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3, <span class="hljs-type">int</span> a4)</span><br>{<br>  CHAR Text[<span class="hljs-number">128</span>]; <span class="hljs-comment">// [esp+0h] [ebp-84h] BYREF</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp+80h] [ebp-4h]</span><br><br>  v6 = sub_401160(Text, &amp;unk_402008, <span class="hljs-number">28</span>);       <span class="hljs-comment">// 解密函数</span><br>  Text[v6] = <span class="hljs-number">0</span>;<br>  MessageBoxA(<span class="hljs-number">0</span>, Text, Caption, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text:004011C0 start           proc near<br>.text:004011C0<br>.text:004011C0 Text            = byte ptr -84h<br>.text:004011C0 var_4           = dword ptr -4<br>.text:004011C0<br>.text:004011C0                 push    ebp<br>.text:004011C1                 mov     ebp, esp<br>.text:004011C3                 sub     esp, 84h<br>.text:004011C9                 push    1Ch<br>.text:004011CB                 push    offset unk_402008<br>.text:004011D0                 lea     eax, [ebp+Text]<br>.text:004011D6                 push    eax<br>.text:004011D7                 call    sub_401160<br>.text:004011DC                 add     esp, 0Ch<br>.text:004011DF                 mov     [ebp+var_4], eax<br>.text:004011E2                 mov     ecx, [ebp+var_4]<br>.text:004011E5                 mov     [ebp+ecx+Text], 0<br>.text:004011ED                 push    0               ; uType<br>.text:004011EF                 push    offset Caption  ; "Output"<br>.text:004011F4                 lea     edx, [ebp+Text]<br>.text:004011FA                 push    edx             ; lpText<br>.text:004011FB                 push    0               ; hWnd<br>.text:004011FD                 call    ds:MessageBoxA<br>.text:00401203                 xor     eax, eax<br>.text:00401205                 mov     esp, ebp<br>.text:00401207                 pop     ebp<br>.text:00401208                 retn    10h<br>.text:00401208 start           endp<br></code></pre></td></tr></tbody></table></figure><p><code>unk_402008</code>的长度是 <code>0xAF</code>, 尝试修改一下. <strong>但是由于某些原因, 在用 KeyPatch 修改<code>push 1Ch</code>的时候会干扰下一条指令…</strong></p><p>用动态调试, 在<code>0x4011C9</code>下个断点, 在 push 之后直接把栈上数据改成 <code>0xAF</code>, 如下图.</p><p><img src="2021-Weekly-Reverse/image-20210402232605263.png" alt="image-20210402232605263"></p><p>然后继续执行, 看到了 <s>好康的</s> 答案.</p><p><img src="2021-Weekly-Reverse/image-20210402232658068.png" alt="image-20210402232658068"></p><p><code>flag{I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com}</code></p><h3 id="gxyctf2019-simple-cpp"><a class="markdownIt-Anchor" href="#gxyctf2019-simple-cpp"></a> [GXYCTF2019] simple CPP</h3><p><s>果然题面里有 simple 的不是送分题就是送命题</s></p><p>IDA打开, 按顺序把<code>main</code>分成三部分</p><h4 id="第一部分-异或加密"><a class="markdownIt-Anchor" href="#第一部分-异或加密"></a> 第一部分 异或加密</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c">v3 = <span class="hljs-number">0</span>;<br>v40 = <span class="hljs-number">0</span>i64;<br>v41 = <span class="hljs-number">15</span>i64;<br>LOBYTE(Block[<span class="hljs-number">0</span>]) = <span class="hljs-number">0</span>;<br>v4 = <span class="hljs-built_in">std</span>::operator&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(<br>       <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>,<br>       (__int64)<span class="hljs-string">"I'm a first timer of Logic algebra , how about you?"</span>);<br><span class="hljs-built_in">std</span>::ostream::operator&lt;&lt;(v4, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;);<br><span class="hljs-built_in">std</span>::operator&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, (__int64)<span class="hljs-string">"Let's start our game,Please input your flag:"</span>);<br><span class="hljs-built_in">std</span>::operator&gt;&gt;&lt;<span class="hljs-type">char</span>&gt;(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>, (<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> *)Block);<br><span class="hljs-built_in">std</span>::ostream::operator&lt;&lt;(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;);<br><span class="hljs-keyword">if</span> ( v40 - <span class="hljs-number">5</span> &gt; <span class="hljs-number">25</span> ) <span class="hljs-comment">//v40 is len of input str</span><br>{<br>  v35 = <span class="hljs-built_in">std</span>::operator&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, (__int64)<span class="hljs-string">"Wrong input ,no GXY{} in input words"</span>);<br>  <span class="hljs-built_in">std</span>::ostream::operator&lt;&lt;(v35, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;);<br>  <span class="hljs-keyword">goto</span> LABEL_41;<br>}<br>v5 = (<span class="hljs-type">unsigned</span> __int8 *)operator new(<span class="hljs-number">0x20</span>ui64);<br>v6 = v5;<br><span class="hljs-keyword">if</span> ( v5 )<br>{<br>  *(_QWORD *)v5 = <span class="hljs-number">0</span>i64;<br>  *((_QWORD *)v5 + <span class="hljs-number">1</span>) = <span class="hljs-number">0</span>i64;<br>  *((_QWORD *)v5 + <span class="hljs-number">2</span>) = <span class="hljs-number">0</span>i64;<br>  *((_QWORD *)v5 + <span class="hljs-number">3</span>) = <span class="hljs-number">0</span>i64;<br>}<br><span class="hljs-keyword">else</span><br>{<br>  v6 = <span class="hljs-number">0</span>i64;<br>}<br>v7 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( v40 )<br>{<br>  v8 = <span class="hljs-number">0</span>i64;<br>  <span class="hljs-keyword">do</span><br>  {<br>    v9 = Block;<br>    <span class="hljs-keyword">if</span> ( v41 &gt;= <span class="hljs-number">0x10</span> )<br>      v9 = (<span class="hljs-type">void</span> **)Block[<span class="hljs-number">0</span>];<br>    v10 = &amp;qword_7FF73C476048;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int64)qword_7FF73C476060 &gt;= <span class="hljs-number">0x10</span> )<span class="hljs-comment">// qword -&gt; xor key</span><br>      v10 = (<span class="hljs-type">void</span> **)qword_7FF73C476048;<br>    v6[v8] = *((_BYTE *)v9 + v8) ^ *((_BYTE *)v10 + v7 % <span class="hljs-number">27</span>);<br>    ++v7;<br>    ++v8;<br>  }<br>  <span class="hljs-keyword">while</span> ( v7 &lt; v40 );<br>}<br></code></pre></td></tr></tbody></table></figure><p>这里会首先对输入进行一次异或加密并保存在<code>v6</code>, key 是 <code>*qword_7FF73C476060</code>, 实际内容未知, 等到动态调试时再确定.</p><h4 id="第二部分-分组"><a class="markdownIt-Anchor" href="#第二部分-分组"></a> 第二部分 分组</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">  v11 = <span class="hljs-number">0</span>i64;<br>  v12 = <span class="hljs-number">0</span>i64;<br>  v13 = <span class="hljs-number">0</span>i64;<br>  v14 = <span class="hljs-number">0</span>i64;<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)v40 &gt; <span class="hljs-number">30</span> )<br>    <span class="hljs-keyword">goto</span> LABEL_27;<br>  v15 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)v40 &lt;= <span class="hljs-number">0</span> )<br>    <span class="hljs-keyword">goto</span> LABEL_27;<br>  v16 = v6; <span class="hljs-comment">//v16 points to input str</span><br>  <span class="hljs-keyword">do</span><br>  {<br>    v17 = *v16 + v11;<br>    ++v15;<br>    ++v16;<br>    <span class="hljs-keyword">switch</span> ( v15 )<br>    {<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>        v14 = v17;<br>        <span class="hljs-keyword">goto</span> LABEL_23;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">16</span>:<br>        v13 = v17;<br>        <span class="hljs-keyword">goto</span> LABEL_23;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">24</span>:<br>        v12 = v17;<br>LABEL_23:<br>        v17 = <span class="hljs-number">0</span>i64;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">32</span>:<br>        <span class="hljs-built_in">std</span>::operator&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, (__int64)<span class="hljs-string">"ERRO,out of range"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    }<br>    v11 = v17 &lt;&lt; <span class="hljs-number">8</span>;<br>  }<br>  <span class="hljs-keyword">while</span> ( v15 &lt; (<span class="hljs-type">int</span>)v40 );<br></code></pre></td></tr></tbody></table></figure><p>在这里把输入按照 8 个字符为一组 (正好 64 位)分开, 分别赋给<code>v14</code> <code>v13</code> <code>v12</code> <code>v11</code>.</p><h4 id="第三部分-校验"><a class="markdownIt-Anchor" href="#第三部分-校验"></a> 第三部分 校验</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-keyword">if</span> ( v14 )<br>  {<br>    v18 = (__int64 *)operator new(<span class="hljs-number">0x20</span>ui64);<br>    *v18 = v14;<br>    v18[<span class="hljs-number">1</span>] = v13;<br>    v18[<span class="hljs-number">2</span>] = v12;<br>    v18[<span class="hljs-number">3</span>] = v11;<br>    <span class="hljs-keyword">goto</span> LABEL_28;<br>  }<br>LABEL_27:<br>  v18 = <span class="hljs-number">0</span>i64;<br>LABEL_28:<br>  v38 = v18[<span class="hljs-number">2</span>]; <span class="hljs-comment">//v12</span><br>  v19 = v18[<span class="hljs-number">1</span>]; <span class="hljs-comment">//v13</span><br>  v20 = *v18; <span class="hljs-comment">//v14</span><br>  v21 = (__int64 *)operator new(<span class="hljs-number">0x20</span>ui64);<br>  v22 = v19 &amp; v20; <span class="hljs-comment">//v13&amp;v14</span><br>  *v21 = v19 &amp; v20;<br>  v23 = v38 &amp; ~v20; <br>  v21[<span class="hljs-number">1</span>] = v23;<br>  v24 = ~v19;<br>  v25 = v38 &amp; v24;<br>  v21[<span class="hljs-number">2</span>] = v38 &amp; v24;<br>  v26 = v20 &amp; v24;<br>  v21[<span class="hljs-number">3</span>] = v26;<br>  <span class="hljs-keyword">if</span> ( v23 != <span class="hljs-number">0x11204161012</span>i64 )<br>  {<br>    v21[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>i64;<br>    v23 = <span class="hljs-number">0</span>i64;<br>  }<br>  v27 = v23 | v22 | v25 | v26;<br>  v28 = v18[<span class="hljs-number">1</span>];<br>  v29 = v18[<span class="hljs-number">2</span>];<br>  v30 = v25 &amp; *v18 | v29 &amp; (v22 | v28 &amp; ~*v18 | ~(v28 | *v18));<br>  v31 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( v30 == <span class="hljs-number">0x8020717153E3013</span>i64 )<br>    v31 = v27 == <span class="hljs-number">0x3E3A4717373E7F1F</span>i64;<br>  <span class="hljs-keyword">if</span> ( (v27 ^ v18[<span class="hljs-number">3</span>]) == <span class="hljs-number">0x3E3A4717050F791F</span>i64 )<br>    v3 = v31;<br>  <span class="hljs-keyword">if</span> ( (v23 | v22 | v28 &amp; v29) == (~*v18 &amp; v29 | <span class="hljs-number">0xC00020130082C0C</span>i64) &amp;&amp; v3 )<br>  {<br>    v32 = <span class="hljs-built_in">std</span>::operator&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>, (__int64)<span class="hljs-string">"Congratulations!flag is GXY{"</span>);<br><span class="hljs-comment">//...... other things ......</span><br>  }<br></code></pre></td></tr></tbody></table></figure><p>所以我们可以得到如下的方程组…</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">z &amp; ~x == <span class="hljs-number">1176889593874</span><br>z &amp; ~x | y &amp; x | z &amp; ~y | x &amp; ~y == <span class="hljs-number">4483974544037412639</span><br>z &amp; ~y &amp;x | z &amp;(y &amp; x | y &amp; ~x | ~(y | x)) == <span class="hljs-number">577031497978884115</span><br>(z &amp; ~x | y &amp; x | z &amp; ~y | x &amp; ~y) ^ w == <span class="hljs-number">4483974543195470111</span><br></code></pre></td></tr></tbody></table></figure><p>用 z3 解之, 得到</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">w = <span class="hljs-number">842073600</span><br>y = <span class="hljs-number">290580315766788</span><br>x = <span class="hljs-number">4483973367147818765</span><br>z = <span class="hljs-number">577031497978884115</span><br></code></pre></td></tr></tbody></table></figure><p><code>v6</code>就是<code>x y z w</code>按顺序连接得到的加密后的 flag.</p><h4 id="最后一击"><a class="markdownIt-Anchor" href="#最后一击"></a> 最后一击</h4><p>接下来我们在<code>0x13DF</code>的位置下个断点, 观察一下<code>qword_7FF73C476048</code>指向的内容.</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data:00007FF73C476048 qword_7FF73C476048 dq 1D5FD108F30h      ; DATA XREF: main+DF↑o<br></code></pre></td></tr></tbody></table></figure><p>选中<code>0x1D5FD108F30h</code>处的数据, Edit - Strings, 得到<code>i_will_check_is_debug_or_not</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">enc =[<span class="hljs-number">0x3e</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x80</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x8</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x3e</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x00</span>]<br>key = <span class="hljs-string">"i_will_check_is_debug_or_not"</span><br>flag = <span class="hljs-string">""</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)-<span class="hljs-number">1</span>):<br>flag += <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(key[i%<span class="hljs-number">27</span>])) ^ enc[i])<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></tbody></table></figure><p>用<code>y</code>手动修正一下, 得到 flag.</p><p><code>flag{We1l_D0ne!P0or_algebra_am_i}</code></p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/BUUCTF/">BUUCTF</category>
      
      <category domain="https://horizonchaser.github.io/tags/Reverse/">Reverse</category>
      
      
      <comments>https://horizonchaser.github.io/2021/02/01/2021-Weekly-Reverse/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2021 Weekly Misc</title>
      <link>https://horizonchaser.github.io/2021/01/29/2021-Weekly-Misc/</link>
      <guid>https://horizonchaser.github.io/2021/01/29/2021-Weekly-Misc/</guid>
      <pubDate>Fri, 29 Jan 2021 15:17:16 GMT</pubDate>
      
      <description>每周的 Misc 练习与 Writeup</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="week-4-0124-0130-buuctf"><a class="markdownIt-Anchor" href="#week-4-0124-0130-buuctf"></a> Week 4, 01/24 - 01/30 BUUCTF</h2><h3 id="被偷走的文件"><a class="markdownIt-Anchor" href="#被偷走的文件"></a> 被偷走的文件</h3><p>打开流量包, 发现一些FTP协议的包, 用<code>ftp or ftp-data</code>筛选出来, 结果如下.</p><p><img src="2021-Weekly-Misc/image-20210130110430119.png" alt="image-20210130110430119"></p><p>55 号包就是服务器返回的包含 flag.rar 的数据包, 右键详情中的 FTP Data 分组, 导出分组字节流. 从文件头的<code>Rar!</code>可以判定, 这是一个 rar 文件.</p><p>打开导出的文件, 发现需要密码, 用 ARCHPR 爆破, 得到四位密码<code>5790</code>, 进而得到 flag.</p><p><code>flag{6fe99a5d03fb01f833ec3caa80358fa3}</code></p><h4 id="另一种提取数据的做法"><a class="markdownIt-Anchor" href="#另一种提取数据的做法"></a> 另一种提取数据的做法</h4><p>从 <a href="https://pcapng.github.io/pcapng/draft-tuexen-opsawg-pcapng.html">pcapng 的规范</a>中, 我们可以发现数据包在捕获文件中是明文存储的, 同时 FTP 的数据也是明文传输的, 所以我们可以直接使用 binwalk 或者 foremost 从 pcapng 中提取文件.</p><p>如果提取出的文件太多的话, 也可以先导出指定的数据包再尝试提取.</p><h3 id="bjdctf2020-认真你就输了"><a class="markdownIt-Anchor" href="#bjdctf2020-认真你就输了"></a> [BJDCTF2020] 认真你就输了</h3><p>打开, 是一个 xls 文件, 但不能正常显示.</p><p>不过 xls 文件本身也是一个 zip 压缩包, 直接解压, 在 xl/charts 下面发现一个 flag.txt, 打开就是 flag…</p><p><code>flag{M9eVfi2Pcs#}</code></p><h3 id="bjdctf2020藏藏藏"><a class="markdownIt-Anchor" href="#bjdctf2020藏藏藏"></a> [BJDCTF2020]藏藏藏</h3><p>打开, 是张 jpg 图片, 用 stegsolve 看一下 File Format…</p><p><img src="2021-Weekly-Misc/image-20210130121745206.png" alt="image-20210130121745206"></p><p>看来文件末尾藏了点东西, 熟悉的 <code>50 4B 03 04</code> - 应该是个 zip . 比较奇怪的是, 用 binwalk 没能识别到 zip 头, 只识别到了结尾…</p><p><img src="2021-Weekly-Misc/image-20210130122312148.png" alt="image-20210130122312148"></p><p>不过关系不大, 用 UltraEdit (或者别的什么十六进制编辑器)打开, 定位到 zip 文件头, 在<code>0xC7EE</code>的位置, 写个 python 脚本从这里切分就行.</p><p>打开切分得到的 zip 文件, 里面是个 docx 文件, 打开扫码, 得到flag.</p><p><code>flag{you are the best!}</code></p><h3 id="gxyctf2019-佛系青年"><a class="markdownIt-Anchor" href="#gxyctf2019-佛系青年"></a> [GXYCTF2019] 佛系青年</h3><p>打开压缩包, 里面有一张图, 一个 txt, 后者是加密的.</p><p><img src="2021-Weekly-Misc/image-20210130151231685.png" alt="image-20210130151231685"></p><p>到这里, 会产生两种想法:</p><ul><li>压缩包的密码在图里, 得先把密码找到 (错了)</li><li><strong>压缩包是伪加密的</strong> (这才是对的…)</li></ul><h4 id="错误示范"><a class="markdownIt-Anchor" href="#错误示范"></a> 错误示范</h4><p>用 stegsolve 尝试无果, 尝试用 zsteg 检测隐写方式, 发现不支持 - 文件头是 <code>FF D8 FF D9</code>…原来是个 jpg  <s>又被出题人套路了,下次一定注意先用file确认一下</s></p><p>用 stegdetect 检测, 系数为 10.0, 报告可能是 jphide, 用 stegbreak 跑字典, 未果.</p><p>至此发现, 此路不通…😭</p><h4 id="正解"><a class="markdownIt-Anchor" href="#正解"></a> 正解</h4><p>因为存在未加密的文件, 因此一定不是全局伪加密, 可能是单独设置了每一个文件记录的加密位.</p><p>用 010 Editor 打开, 定位到 dirEntry[1], 也就是 fo.txt 对应的记录的位置, 发现 <a href="https://www.jianshu.com/p/8e4209bca4af"><code>deFlags</code></a>是<code>09 00</code>, 存在伪加密, 修改为<code>00 00</code>, 正常解压出了 fo.txt.</p><p><img src="2021-Weekly-Misc/image-20210130152220026.png" alt="image-20210130152220026"></p><p>在最下面我们发现了这么一串东西.</p><blockquote><p>佛曰：遮等諳勝能礙皤藐哆娑梵迦侄羅哆迦梵者梵楞蘇涅侄室實真缽朋能。奢怛俱道怯都諳怖梵尼怯一罰心缽謹缽薩苦奢夢怯帝梵遠朋陀諳陀穆諳所呐知涅侄以薩怯想夷奢醯數羅怯諸</p></blockquote><p>在<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">这里</a>解密, 得到 flag.</p><p><code>flag{w0_fo_ci_Be1}</code></p><p><s>所以那张图真的没有用啊…</s></p><h3 id="秘密文件"><a class="markdownIt-Anchor" href="#秘密文件"></a> 秘密文件</h3><p>打开流量包, 发现大量 FTP 协议流量, 跟踪.</p><p><img src="2021-Weekly-Misc/image-20210130153937974.png" alt="image-20210130153937974"></p><p>发现一个 rar 文件, binwalk 分离, 发现有密码, 爆破, 得口令为<code>1903</code>, 解压得 flag.</p><p><code>flag{d72e5a671aa50fa5f400e5d10eedeaa5}</code></p><p><s>我一开始还以为密码是ctf来着…</s></p><h3 id="bjdctf2020-你猜我是个啥"><a class="markdownIt-Anchor" href="#bjdctf2020-你猜我是个啥"></a> [BJDCTF2020] 你猜我是个啥</h3><p>下载附件, 打开, 提示不是个有效的压缩文件…</p><p>010 Editor, 发现是个 png, 打开发现是一个二维码, 在文件尾有明文 flag.</p><p><code>flag{i_am_fl@g}</code></p><h3 id="bjdctf-2nd-easybaba"><a class="markdownIt-Anchor" href="#bjdctf-2nd-easybaba"></a> [BJDCTF 2nd] EasyBaBa</h3><p>下载, 得到一个 19.9 MB 的 454x427 的 jpg 文件…这大小显然不对啊…</p><p>binwalk 分离, 发现 zip 结尾, 从 <code>0x6E43</code>手动分离 zip, 得到了这个</p><p><img src="2021-Weekly-Misc/image-20210130223536091.png" alt="image-20210130223536091"></p><p>查看文件头, 发现是一个 avi 视频, 打开, 在里面发现几个隐藏的一闪而过的二维码, 截图, 用 QR Research 解码, 拼接得flag.</p><p><code>flag{imagin_love_Y1ng}</code></p><h2 id="week-5-0131-0206-buuctf"><a class="markdownIt-Anchor" href="#week-5-0131-0206-buuctf"></a> Week 5, 01/31 - 02/06, BUUCTF</h2><h3 id="swpu2019-神奇的二维码"><a class="markdownIt-Anchor" href="#swpu2019-神奇的二维码"></a> [SWPU2019] 神奇的二维码</h3><p>下载附件, 打开, 用 binwalk 分离一下, 得到四个 rar 压缩包.</p><p><img src="2021-Weekly-Misc/image-20210131162556648.png" alt="image-20210131162556648"></p><p>先看第一个<code>7104.rar</code>, 里面有一个 <code>encode.txt</code>, 打开是一段 base64: <code>YXNkZmdoamtsMTIzNDU2Nzg5MA==</code>, 解码得<code>asdfghjkl1234567890</code>.</p><p>对于<code>716A.rar</code>, 有一张图片和压缩包, 内层压缩包需要密码 - 也就是我们刚刚拿到的解码后的内容…不过解压之后检查, 并没发现 flag…</p><p><s>看看flag在不在里面?</s></p><p><s>不在😡</s></p><p>在<code>17012.rar</code>中, 我们发现了一个 flag.doc, 里面有一段很长的, 看上去是 base64 的东西, 解码一下, 变成了另一段 base64… <s>有点意思</s></p><p>重复解码多次之后, 我们得到了<code>comEON_YOuAreSOSoS0great</code>, 用这个解压 <code>18394.rar</code>, 有一段音频.</p><p>放到 Audacity 里看一下, 明显是<a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81">摩尔斯电码</a>, 用<a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html">这个</a>解码一下(或者自己来也行), 得到 flag.</p><p><img src="2021-Weekly-Misc/image-20210131164320704.png" alt="image-20210131164320704"></p><p>flag: <code>flag{morseisveryveryeasy}</code></p><p>BTW, 直接扫描二维码会告诉你 <code>flag is not here</code>…</p><p><img src="2021-Weekly-Misc/image-20210131164506602.png" alt="image-20210131164506602"></p><h3 id="bjdctf2020-一叶障目"><a class="markdownIt-Anchor" href="#bjdctf2020-一叶障目"></a> [BJDCTF2020] 一叶障目</h3><p>下载打开, 发现 Honeyview 打不开图片, 但是资源管理器能显示预览图 - 显然图的某些东西是被改过了.</p><p>用 010 Editor 打开, 报了 CRC 校验错误, 结合之前看到的条状图案, 怀疑是宽高被改了.</p><p>对于 <a href="https://dev.gameres.com/Program/Visual/Other/PNGFormat.htm">PNG 图片</a>, 宽高这些信息保存在 IHDR 中, 作为第一个数据块紧接着文件头之后. IHDR 长 13 字节, 定义如下.</p><p><img src="2021-Weekly-Misc/image-20210201205712447.png" alt="image-20210201205712447"></p><p>所以在已知 CRC 的前提下, 我们可以通过在合理范围内穷举宽高的方式得到正确的大小.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> time<br><br>time_start=time.time()<br><br><span class="hljs-comment">#读文件</span><br>file = <span class="hljs-string">'1.png'</span>  <span class="hljs-comment">#注意，1.png图片要和脚本在同一个文件夹下哦~</span><br>fileRead = <span class="hljs-built_in">open</span>(file,<span class="hljs-string">'rb'</span>).read()<br>data = <span class="hljs-built_in">bytearray</span>(fileRead[<span class="hljs-number">12</span>:<span class="hljs-number">29</span>]) <span class="hljs-comment">#0xCh ~ 0x1Ch</span><br>crc32key = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>(fileRead[<span class="hljs-number">29</span>:<span class="hljs-number">33</span>]).replace(<span class="hljs-string">'\\x'</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-string">"b'"</span>,<span class="hljs-string">'0x'</span>).replace(<span class="hljs-string">"'"</span>,<span class="hljs-string">''</span>))<br><br><span class="hljs-comment">#crc32key = 0xCBD6DF8A #补上0x，copy hex value</span><br><span class="hljs-comment">#data = bytearray(b'\x49\x48\x44\x52\x00\x00\x01\xF4\x00\x00\x01\xF1\x08\x06\x00\x00\x00')  #hex下copy grep hex</span><br>n = <span class="hljs-number">4095</span> <span class="hljs-comment">#理论上0xffffffff,但考虑到屏幕实际，0x0fff就差不多了</span><br><br><span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<span class="hljs-comment">#高和宽一起爆破</span><br>    width = <span class="hljs-built_in">bytearray</span>(struct.pack(<span class="hljs-string">'&gt;i'</span>, w))<span class="hljs-comment">#q为8字节，i为4字节，h为2字节</span><br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        height = <span class="hljs-built_in">bytearray</span>(struct.pack(<span class="hljs-string">'&gt;i'</span>, h))<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            data[x+<span class="hljs-number">4</span>] = width[x]<br>            data[x+<span class="hljs-number">8</span>] = height[x]<br>            <span class="hljs-comment">#print(data)</span><br>        crc32result = zlib.crc32(data)<br>        <span class="hljs-keyword">if</span> crc32result == crc32key:<br>            <span class="hljs-comment">#print("Correct Width: " + (width) + "\nCorrect Height: " + (height))</span><br>            <span class="hljs-comment">#写文件</span><br>            newpic = <span class="hljs-built_in">bytearray</span>(fileRead)<br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                newpic[x+<span class="hljs-number">16</span>] = width[x]<br>                newpic[x+<span class="hljs-number">20</span>] = height[x]<br>            fw = <span class="hljs-built_in">open</span>(file+<span class="hljs-string">'_CRC_Repaired.png'</span>,<span class="hljs-string">'wb'</span>)<span class="hljs-comment">#保存副本</span><br>            fw.write(newpic)<br>            fw.close<br><br>time_end=time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">"CRC Repaired, saved as "</span> + file+<span class="hljs-string">'_CRC_Repaired.png'</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">'Time Used: '</span>,<span class="hljs-built_in">str</span>(time_end-time_start),<span class="hljs-string">'s'</span>)<br><br></code></pre></td></tr></tbody></table></figure><p>查看修复后的图片, 得到 flag.</p><p><code>flag{66666}</code></p><h3 id="bjdctf-2nd-real_easybaba"><a class="markdownIt-Anchor" href="#bjdctf-2nd-real_easybaba"></a> [BJDCTF 2nd] Real_EasyBaBa</h3><p>查看图片, 发现是 jpg 格式, 并且有一定损坏…</p><p><img src="2021-Weekly-Misc/image-20210204221540876.png" alt="image-20210204221540876"></p><p>binwalk 扫描一下, 发现 zip 文件尾但是没发现文件头. 检查发现文件头被修改为 <code>50 4B FF FF</code> , 修改后分离得到一个包含 <code>hint</code> 文件的 zip 压缩包, 打开后…是一个二维码…</p><p><img src="2021-Weekly-Misc/image-20210204223726793.png" alt="image-20210204223726793"></p><p>缩小之后扫描, 得到一行指令 <code>od -vtx1 ./draw.png | head -56 | tail -28</code>, 执行后发现输出的是这里对应的 16 进制内容</p><p><img src="2021-Weekly-Misc/image-20210204224728710.png" alt="image-20210204224728710"></p><p>仔细看, 能看到对应的字符画…<s>这也太坑了吧</s></p><p><code>flag{572154976}</code></p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/Misc/">Misc</category>
      
      <category domain="https://horizonchaser.github.io/tags/BUUCTF/">BUUCTF</category>
      
      
      <comments>https://horizonchaser.github.io/2021/01/29/2021-Weekly-Misc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2021 Weekly Reverse</title>
      <link>https://horizonchaser.github.io/2021/01/27/Strong-Reversers/</link>
      <guid>https://horizonchaser.github.io/2021/01/27/Strong-Reversers/</guid>
      <pubDate>Wed, 27 Jan 2021 14:39:10 GMT</pubDate>
      
      <description>每周的逆向练习与 Writeup</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="2021-week-2-0126"><a class="markdownIt-Anchor" href="#2021-week-2-0126"></a> 2021 Week 2 - 01/26</h1><h2 id="0x00-ddctf-android-easy"><a class="markdownIt-Anchor" href="#0x00-ddctf-android-easy"></a> 0x00 DDCTF-Android Easy</h2><p><s>接触到的第二道安卓逆向题</s></p><p>下载, 发现是个 zip , 但是有 apk 的目录结构, 用 jadx-gui 打开可以看到如下的结构</p><p><img src="https://i.loli.net/2021/01/27/Jd8H6ITzRl5NYsO.png" alt="image-20210127124159278"></p><p>很明显, 重点在 FlagActivity 类里面, <code>i()</code>中将<code>p</code> <code>q</code> 两个byte数组进行一系列操作后得到解密后的<code>byte[] bArr2</code>, 作为<code>String()</code>的参数返回.  之后在<code>onClickTest()</code>中通过将输入的字符串同<code>i()</code>的返回值进行比较, 判定 flag 是否正确.</p><p>那就很显然, <code>i()</code>的返回值就是正确的 flag. 把<code>i()</code>运行一次, 得到返回值<code>DDCTF-3ad60811d87c4a2dba0ef651b2d93476@didichuxing.com</code>, 用<code>flag{ }</code>包裹提交.</p><p><code>flag{DDCTF-3ad60811d87c4a2dba0ef651b2d93476@didichuxing.com}</code></p><h2 id="0x01-welcome-to-jni"><a class="markdownIt-Anchor" href="#0x01-welcome-to-jni"></a> 0x01 WELCOME TO JNI</h2><blockquote><p>“JNI是什么？”</p></blockquote><blockquote><p><strong>JNI</strong> （<strong>Java Native Interface，Java本地接口</strong>）是一种<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6&amp;action=edit&amp;redlink=1">编程框架</a>，使得<a href="https://zh.wikipedia.org/wiki/Java%E8%99%9A%E6%8B%9F%E6%9C%BA">Java虚拟机</a>中的<a href="https://zh.wikipedia.org/wiki/Java">Java</a>程序可以调用本地应用/或库，也可以被其他程序调用。 本地程序一般是用其它语言（<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C</a>、<a href="https://zh.wikipedia.org/wiki/C%2B%2B">C++</a>或<a href="https://zh.wikipedia.org/wiki/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80">汇编语言</a>等）编写的，并且被编译为基于本机硬件和操作系统的程序。</p><p>– Wikipedia</p></blockquote><p>简单的来说, JNI 可以让 Java 调用其他语言的库.</p><p>用 jadx-gui 打开 apk 文件, 定位到 Main Activity --在<code>com.reverier.xdsec_re_20200126</code>下面</p><p><img src="https://i.loli.net/2021/01/27/hwg4BSpNfiFO8DH.png" alt="image-20210127131115411"></p><p>在<code>MainActivity</code>类中, 可以看到声明了一个 native 方法 - <code>loginUtils()</code>, 从名字推测是 <s>检查 flag</s> 登陆验证, 加载了一个本地库<code>native-lib</code>, 它对应的文件在<code>/lib</code>下面, 对应不同的架构.</p><p>在 33 行可以看到, <code>loginUtil()</code>接受了输入的字符串作为参数, 然后返回一个布尔值作为结果, 控制输出<code>Right</code>和<code>Wrong</code> - 这就是重点了.</p><p>从 apk 中提取出 x86 架构对应的<code>native-lib.so</code>, IDA 打开, 找到对应的方法<code>Java_com_reverier_xdsec_1re_120200126_MainActivity_loginUtils()</code>, 反编译如下.</p><p><img src="https://i.loli.net/2021/01/27/7UM1xOPLB3RTIFK.png" alt="image-20210127132734025"></p><p>第 8 行开始, <code>v6</code>保存了作为参数的字符串的长度, <code>v5</code>则保存了另一个字符串的长度, <code>v4</code>保存了参数字符串. 第 11 行比较两个字符串的长度, 若相等则再通过<code>strncmp()</code>比较.</p><p>综上, <code>off_1FD4 + 5972</code>应该就指向了flag. <code>0x1FD4 + 5972d == 0x880</code>, 跳转过去, 发现果然保存着flag.</p><p><img src="https://i.loli.net/2021/01/27/shcxbOGXJ2U6DFV.png" alt="image-20210127133107771"></p><p><code>flag{welcome_to_naive_lib!}</code></p><p>做完了才意识到, 其实当时直接从 IDA 的 Strings window 能直接看到这个明文字符串…</p><h2 id="002-codegate-ctf-2018-redvelvet"><a class="markdownIt-Anchor" href="#002-codegate-ctf-2018-redvelvet"></a> 0×02 Codegate CTF 2018 RedVelvet</h2><p>IDA 打开, 跳转到<code>main()</code>, 发现了一大串<code>funcX()</code>的调用.  <s>有点壮观(x</s></p><p>观察结构发现, 在 48 行, ``fgets()<code>接受了 28 个字节的输入(包含末尾的</code>\n<code>), 保存到</code>s<code>中. 而</code>funcX()<code>并未改变</code>s<code>的值, 而是进行了一些验证, 比如</code>func7()`:</p><p><img src="https://i.loli.net/2021/01/27/fuRYoAhm31TjLzw.png" alt="image-20210127134648665"></p><p>这 15 个<code>funcX()</code>共同对<code>s</code>进行了一系列的检查, 然后计算<code>s</code>的 SHA256 值, 并和<code>0a435f46288bb5a764d13fca6c901d3750cee73fd7689ce79ef6dc0ff8f380e5</code>比较, 确定 flag 正确与否.</p><p><s>所以直接用 hashcat 穷举破解理论上倒也可行</s></p><p>接下来就是 angr 发挥威力的时候了, 我们不需要将程序执行完, 只需要找到一个输入, 能够满足这十五个<code>funcX()</code>的约束, 使程序运行到<code>SHA256_Init()</code>前即可 - 对应的地址是<code>0x401534</code>.</p><p>同时, 我们还需要避免进入<code>funcX()</code>中的<code>exit(1)</code>的分支, 以<code>func1()</code>为例.</p><p><img src="https://i.loli.net/2021/01/27/Mu2QcKWZ81dfzFR.png" alt="image-20210127135526675"></p><p><code>0x4009ED</code>和<code>0x4009F7</code>就是我们不希望运行到的地方, 因为到这里说明我们的输入没有通过<code>func1()</code>的检验, 执行了<code>exit(1)</code> - 其他的<code>funcX()</code>同理.</p><p>这样, 我们得到了期望执行到的地址与要避免的地址, 写出如下脚本.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><br>prog = angr.Project(<span class="hljs-string">'./RedVelvet'</span>, load_options={<span class="hljs-string">'auto_load_libs'</span>: <span class="hljs-literal">False</span>})   <br>state = prog.factory.entry_state()    <br>simgr = prog.factory.simgr(state)   <br><br>simgr.explore(find=<span class="hljs-number">0x00401534</span> ,avoid=[<span class="hljs-number">0x4009ED</span>,<span class="hljs-number">0x4009F7</span>,<span class="hljs-number">0x400A3C</span>,<span class="hljs-number">0x400A46</span>,<span class="hljs-number">0x400A9F</span>,<span class="hljs-number">0x400B01</span>,<span class="hljs-number">0x400B5C</span>,<span class="hljs-number">0x400C05</span>,<span class="hljs-number">0x400CAB</span>,<span class="hljs-number">0x400D51</span>,<span class="hljs-number">0x400DD6</span>,<span class="hljs-number">0x400E5E</span>,<span class="hljs-number">0x400F07</span>,<span class="hljs-number">0x400FAD</span>,<span class="hljs-number">0x4105F</span>,<span class="hljs-number">0x4010E9</span>, <span class="hljs-number">0x40119D</span>]) <br><br>flag = simgr.found[<span class="hljs-number">0</span>].posix.dumps(<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(flag)<br><br><br></code></pre></td></tr></tbody></table></figure><p>经过漫长的运行( VMWare Ubuntu + Docker angr/angr 大概 30 分钟? ), 我们得到了如下输出 (<code>fg</code>是因为我之前误以为写错了, 于是挂起去检查脚本了…)</p><p><img src="https://i.loli.net/2021/01/27/id16RHAoK5TBpW3.png" alt="image-20210127140006667"></p><p>放到源程序里检查一下, 看来没毛病.</p><p><img src="https://i.loli.net/2021/01/27/DeuYsaXi3ZW4mMt.png" alt="image-20210127140226953"></p><p><code>flag{What_You_Wanna_Be?:)_la_la}</code></p><h3 id="something-else"><a class="markdownIt-Anchor" href="#something-else"></a> Something Else</h3><ol><li>RedVelvet依赖 1.0.0 版本的 <a href="http://libcrypto.so">libcrypto.so</a>, 但是包含它的老版本的 openssl 已经过时了, 最后用<code>apt-file</code>查到英伟达的<code>nslight-system</code>还带这东西, 于是安装之后手动复制出来…</li><li>理论上通过 15 个<code>funcX()</code>中的约束条件, 可以直接求出来满足的输入值, 就像<code>z3</code>那样</li><li>如果限定输入长度与范围( ASCII 可见字符) 的话, 应当能够跑的更快, 学习中</li><li>关于原题: 暂时没找到…</li></ol><h1 id="2021-week-3-0210"><a class="markdownIt-Anchor" href="#2021-week-3-0210"></a> 2021 Week 3 - 02/10</h1><h2 id="0x00-pydis"><a class="markdownIt-Anchor" href="#0x00-pydis"></a> 0x00 PyDis</h2><p>一道 Python 逆向题, 本来想直接用 uncompyle6 来着, 不过它目前只能支持到 3.8 …</p><p>不过我们总是可以自己手动来解决 √ <s>从零开始, 半天过去了</s></p><p>根据提示, 用 <code>marshal</code> 解析 pyc 文件, 提取出指令部分, 然后用 <code>dis</code> 反编译, 拿到字节码指令. 根据 <a href="https://docs.python.org/3/library/dis.html">Python文档</a>, 我们可以写出同义的代码, 如下.</p><p>(<code>#</code>开头的是我们推测出的每行对应的源代码, 缩进一致)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-number">1</span>           <span class="hljs-number">0</span> BUILD_LIST               <span class="hljs-number">0</span><br>             <span class="hljs-number">2</span> LOAD_CONST               <span class="hljs-number">0</span> ((<span class="hljs-number">178</span>, <span class="hljs-number">184</span>, <span class="hljs-number">185</span>, <span class="hljs-number">191</span>, <span class="hljs-number">182</span>, <span class="hljs-number">165</span>, <span class="hljs-number">174</span>, <span class="hljs-number">191</span>, <span class="hljs-number">129</span>, <span class="hljs-number">183</span>, <span class="hljs-number">187</span>, <span class="hljs-number">176</span>, <span class="hljs-number">129</span>, <span class="hljs-number">169</span>, <span class="hljs-number">191</span>, <span class="hljs-number">167</span>, <span class="hljs-number">163</span>))<br>             <span class="hljs-number">4</span> CALL_FINALLY             <span class="hljs-number">1</span> (to <span class="hljs-number">7</span>)<br>             <span class="hljs-number">6</span> STORE_NAME               <span class="hljs-number">0</span> (magic)<br><br>   <span class="hljs-comment"># magic = [178, ....]</span><br><br> <span class="hljs-number">2</span>           <span class="hljs-number">8</span> LOAD_NAME                <span class="hljs-number">1</span> (<span class="hljs-built_in">input</span>)<br>            <span class="hljs-number">10</span> LOAD_CONST               <span class="hljs-number">1</span> (<span class="hljs-string">'flag &gt;&gt;&gt; '</span>)<br>            <span class="hljs-number">12</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>            <span class="hljs-number">14</span> STORE_NAME               <span class="hljs-number">2</span> (inp)<br><br>   <span class="hljs-comment"># inp = input("flag &gt;&gt;&gt; ")</span><br><br> <span class="hljs-number">4</span>          <span class="hljs-number">16</span> LOAD_NAME                <span class="hljs-number">3</span> (<span class="hljs-built_in">list</span>)<br>            <span class="hljs-number">18</span> LOAD_NAME                <span class="hljs-number">2</span> (inp)<br>            <span class="hljs-number">20</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>            <span class="hljs-number">22</span> STORE_NAME               <span class="hljs-number">4</span> (flag)<br><br>   <span class="hljs-comment"># inp = list(flag)</span><br><br> <span class="hljs-number">5</span>          <span class="hljs-number">24</span> LOAD_NAME                <span class="hljs-number">5</span> (<span class="hljs-built_in">len</span>)<br>            <span class="hljs-number">26</span> LOAD_NAME                <span class="hljs-number">4</span> (flag)<br>            <span class="hljs-number">28</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>            <span class="hljs-number">30</span> LOAD_NAME                <span class="hljs-number">5</span> (<span class="hljs-built_in">len</span>)<br>            <span class="hljs-number">32</span> LOAD_NAME                <span class="hljs-number">0</span> (magic)<br>            <span class="hljs-number">34</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>            <span class="hljs-number">36</span> COMPARE_OP               <span class="hljs-number">3</span> (!=)<br>            <span class="hljs-number">38</span> POP_JUMP_IF_FALSE       <span class="hljs-number">54</span><br><br>   <span class="hljs-comment"># if(len(flag) != len(magic)):</span><br><br> <span class="hljs-number">6</span>          <span class="hljs-number">40</span> LOAD_NAME                <span class="hljs-number">6</span> (<span class="hljs-built_in">print</span>)<br>            <span class="hljs-number">42</span> LOAD_CONST               <span class="hljs-number">2</span> (<span class="hljs-string">'qwq'</span>)<br>            <span class="hljs-number">44</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>            <span class="hljs-number">46</span> POP_TOP<br><br>   <span class="hljs-comment">#   print("qwq")</span><br><br> <span class="hljs-number">7</span>          <span class="hljs-number">48</span> LOAD_NAME                <span class="hljs-number">7</span> (exit)<br>            <span class="hljs-number">50</span> CALL_FUNCTION            <span class="hljs-number">0</span><br>            <span class="hljs-number">52</span> POP_TOP<br>   <br>   <span class="hljs-comment">#   exit()</span><br><br> <span class="hljs-number">9</span>     &gt;&gt;   <span class="hljs-number">54</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">range</span>)<br>            <span class="hljs-number">56</span> LOAD_NAME                <span class="hljs-number">5</span> (<span class="hljs-built_in">len</span>)<br>            <span class="hljs-number">58</span> LOAD_NAME                <span class="hljs-number">4</span> (flag)<br>            <span class="hljs-number">60</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>            <span class="hljs-number">62</span> LOAD_CONST               <span class="hljs-number">3</span> (<span class="hljs-number">2</span>)<br>            <span class="hljs-number">64</span> BINARY_FLOOR_DIVIDE<br>            <span class="hljs-number">66</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>            <span class="hljs-number">68</span> GET_ITER<br>       &gt;&gt;   <span class="hljs-number">70</span> FOR_ITER                <span class="hljs-number">54</span> (to <span class="hljs-number">126</span>)<br>            <span class="hljs-number">72</span> STORE_NAME               <span class="hljs-number">9</span> (i)<br>   <br>   <span class="hljs-comment"># for i in range(len(flag) // 2):</span><br><br><span class="hljs-number">10</span>          <span class="hljs-number">74</span> LOAD_NAME                <span class="hljs-number">4</span> (flag)<br>            <span class="hljs-number">76</span> LOAD_CONST               <span class="hljs-number">3</span> (<span class="hljs-number">2</span>)<br>            <span class="hljs-number">78</span> LOAD_NAME                <span class="hljs-number">9</span> (i)<br>            <span class="hljs-number">80</span> BINARY_MULTIPLY<br>            <span class="hljs-number">82</span> LOAD_CONST               <span class="hljs-number">4</span> (<span class="hljs-number">1</span>)<br>            <span class="hljs-number">84</span> BINARY_ADD<br>            <span class="hljs-number">86</span> BINARY_SUBSCR<br>            <span class="hljs-number">88</span> LOAD_NAME                <span class="hljs-number">4</span> (flag)<br>            <span class="hljs-number">90</span> LOAD_CONST               <span class="hljs-number">3</span> (<span class="hljs-number">2</span>)<br>            <span class="hljs-number">92</span> LOAD_NAME                <span class="hljs-number">9</span> (i)<br>            <span class="hljs-number">94</span> BINARY_MULTIPLY<br>            <span class="hljs-number">96</span> BINARY_SUBSCR<br>            <span class="hljs-number">98</span> ROT_TWO<br>           <span class="hljs-number">100</span> LOAD_NAME                <span class="hljs-number">4</span> (flag)<br>           <span class="hljs-number">102</span> LOAD_CONST               <span class="hljs-number">3</span> (<span class="hljs-number">2</span>)<br>           <span class="hljs-number">104</span> LOAD_NAME                <span class="hljs-number">9</span> (i)<br>           <span class="hljs-number">106</span> BINARY_MULTIPLY<br>           <span class="hljs-number">108</span> STORE_SUBSCR                           <span class="hljs-comment"># flag[2*i] = flag[2*i+1] </span><br>           <span class="hljs-number">110</span> LOAD_NAME                <span class="hljs-number">4</span> (flag)<br>           <span class="hljs-number">112</span> LOAD_CONST               <span class="hljs-number">3</span> (<span class="hljs-number">2</span>)<br>           <span class="hljs-number">114</span> LOAD_NAME                <span class="hljs-number">9</span> (i)         <span class="hljs-comment"># flag[2*i+1] = flag[2*i]</span><br>           <span class="hljs-number">116</span> BINARY_MULTIPLY<br>           <span class="hljs-number">118</span> LOAD_CONST               <span class="hljs-number">4</span> (<span class="hljs-number">1</span>)<br>           <span class="hljs-number">120</span> BINARY_ADD<br>           <span class="hljs-number">122</span> STORE_SUBSCR<br>           <span class="hljs-number">124</span> JUMP_ABSOLUTE           <span class="hljs-number">70</span><br><br>   <span class="hljs-comment">#   flag[2*i], flag[2*i+1] = flag[2*i+1], flag[2*i]</span><br><br><span class="hljs-number">12</span>     &gt;&gt;  <span class="hljs-number">126</span> BUILD_LIST               <span class="hljs-number">0</span><br>           <span class="hljs-number">128</span> STORE_NAME              <span class="hljs-number">10</span> (check)<br><br>   <span class="hljs-comment"># check = []</span><br><br><span class="hljs-number">14</span>         <span class="hljs-number">130</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">range</span>)<br>           <span class="hljs-number">132</span> LOAD_NAME                <span class="hljs-number">5</span> (<span class="hljs-built_in">len</span>)<br>           <span class="hljs-number">134</span> LOAD_NAME                <span class="hljs-number">4</span> (flag)<br>           <span class="hljs-number">136</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">138</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">140</span> GET_ITER<br>       &gt;&gt;  <span class="hljs-number">142</span> FOR_ITER                <span class="hljs-number">26</span> (to <span class="hljs-number">170</span>)<br>           <span class="hljs-number">144</span> STORE_NAME               <span class="hljs-number">9</span> (i)<br><br>   <span class="hljs-comment"># for i in range(len(flag)):</span><br><br><span class="hljs-number">15</span>         <span class="hljs-number">146</span> LOAD_NAME               <span class="hljs-number">10</span> (check)<br>           <span class="hljs-number">148</span> LOAD_METHOD             <span class="hljs-number">11</span> (append)<br>           <span class="hljs-number">150</span> LOAD_NAME               <span class="hljs-number">12</span> (<span class="hljs-built_in">ord</span>)<br>           <span class="hljs-number">152</span> LOAD_NAME                <span class="hljs-number">4</span> (flag)<br>           <span class="hljs-number">154</span> LOAD_NAME                <span class="hljs-number">9</span> (i)<br>           <span class="hljs-number">156</span> BINARY_SUBSCR<br>           <span class="hljs-number">158</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">160</span> LOAD_CONST               <span class="hljs-number">5</span> (<span class="hljs-number">222</span>)<br>           <span class="hljs-number">162</span> BINARY_XOR<br>           <span class="hljs-number">164</span> CALL_METHOD              <span class="hljs-number">1</span><br>           <span class="hljs-number">166</span> POP_TOP<br>           <span class="hljs-number">168</span> JUMP_ABSOLUTE          <span class="hljs-number">142</span><br><br>   <span class="hljs-comment">#   check.append(ord(flag[i]) ^ 222)</span><br><br><span class="hljs-number">17</span>     &gt;&gt;  <span class="hljs-number">170</span> LOAD_NAME                <span class="hljs-number">8</span> (<span class="hljs-built_in">range</span>)<br>           <span class="hljs-number">172</span> LOAD_NAME                <span class="hljs-number">5</span> (<span class="hljs-built_in">len</span>)<br>           <span class="hljs-number">174</span> LOAD_NAME                <span class="hljs-number">0</span> (magic)<br>           <span class="hljs-number">176</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">178</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">180</span> GET_ITER<br>       &gt;&gt;  <span class="hljs-number">182</span> FOR_ITER                <span class="hljs-number">34</span> (to <span class="hljs-number">218</span>)<br>           <span class="hljs-number">184</span> STORE_NAME               <span class="hljs-number">9</span> (i)<br><br>   <span class="hljs-comment"># for i in range(len(magic)):</span><br><br><span class="hljs-number">18</span>         <span class="hljs-number">186</span> LOAD_NAME               <span class="hljs-number">10</span> (check)<br>           <span class="hljs-number">188</span> LOAD_NAME                <span class="hljs-number">9</span> (i)<br>           <span class="hljs-number">190</span> BINARY_SUBSCR<br>           <span class="hljs-number">192</span> LOAD_NAME                <span class="hljs-number">0</span> (magic)<br>           <span class="hljs-number">194</span> LOAD_NAME                <span class="hljs-number">9</span> (i)<br>           <span class="hljs-number">196</span> BINARY_SUBSCR<br>           <span class="hljs-number">198</span> COMPARE_OP               <span class="hljs-number">3</span> (!=)<br>           <span class="hljs-number">200</span> POP_JUMP_IF_FALSE      <span class="hljs-number">182</span><br><br>   <span class="hljs-comment">#   if(check[i] != magic[i]):</span><br><br><span class="hljs-number">19</span>         <span class="hljs-number">202</span> LOAD_NAME                <span class="hljs-number">6</span> (<span class="hljs-built_in">print</span>)<br>           <span class="hljs-number">204</span> LOAD_CONST               <span class="hljs-number">2</span> (<span class="hljs-string">'qwq'</span>)<br>           <span class="hljs-number">206</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">208</span> POP_TOP<br><br>   <span class="hljs-comment">#       print("qwq")</span><br><br><span class="hljs-number">20</span>         <span class="hljs-number">210</span> LOAD_NAME                <span class="hljs-number">7</span> (exit)<br>           <span class="hljs-number">212</span> CALL_FUNCTION            <span class="hljs-number">0</span><br>           <span class="hljs-number">214</span> POP_TOP<br>           <span class="hljs-number">216</span> JUMP_ABSOLUTE          <span class="hljs-number">182</span><br><br>   <span class="hljs-comment">#       exit()</span><br><br><span class="hljs-number">22</span>     &gt;&gt;  <span class="hljs-number">218</span> LOAD_NAME                <span class="hljs-number">6</span> (<span class="hljs-built_in">print</span>)<br>           <span class="hljs-number">220</span> LOAD_CONST               <span class="hljs-number">6</span> (<span class="hljs-string">'happy new year!'</span>)<br>           <span class="hljs-number">222</span> CALL_FUNCTION            <span class="hljs-number">1</span><br>           <span class="hljs-number">224</span> POP_TOP<br>           <span class="hljs-number">226</span> LOAD_CONST               <span class="hljs-number">7</span> (<span class="hljs-literal">None</span>)<br>           <span class="hljs-number">228</span> RETURN_VALUE<br><br>   <span class="hljs-comment"># print("happy new year!")</span><br><br><br></code></pre></td></tr></tbody></table></figure><p>之后写个jio本解密就行了.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = [<span class="hljs-number">178</span>, <span class="hljs-number">184</span>, <span class="hljs-number">185</span>, <span class="hljs-number">191</span>, <span class="hljs-number">182</span>, <span class="hljs-number">165</span>, <span class="hljs-number">174</span>, <span class="hljs-number">191</span>,<br>       <span class="hljs-number">129</span>, <span class="hljs-number">183</span>, <span class="hljs-number">187</span>, <span class="hljs-number">176</span>, <span class="hljs-number">129</span>, <span class="hljs-number">169</span>, <span class="hljs-number">191</span>, <span class="hljs-number">167</span>, <span class="hljs-number">163</span>]<br>dec = <span class="hljs-string">""</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    enc[i] = enc[i] ^ <span class="hljs-number">222</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc) // <span class="hljs-number">2</span>):<br>    dec += <span class="hljs-built_in">chr</span>(enc[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>])<br>    dec += <span class="hljs-built_in">chr</span>(enc[<span class="hljs-number">2</span>*i])<br><br><span class="hljs-built_in">print</span>(dec)<br></code></pre></td></tr></tbody></table></figure><p><code>flag{hapi_new_ya</code>, 记得补上 <code>}</code></p><h2 id="0x01-flareon4-igniteme"><a class="markdownIt-Anchor" href="#0x01-flareon4-igniteme"></a> 0x01 FlareOn4 IgniteMe</h2><p><code>die</code>查壳, 确认 32 位 pe 文件, 没壳, IDA 打开, 定位到入口点 <code>start</code>函数.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __noreturn <span class="hljs-title function_">start</span><span class="hljs-params">()</span><br>{<br>  DWORD NumberOfBytesWritten; <span class="hljs-comment">// [esp+0h] [ebp-4h] BYREF</span><br><br>  NumberOfBytesWritten = <span class="hljs-number">0</span>;<br>  stdinHandle = GetStdHandle(<span class="hljs-number">4294967286u</span>);      <span class="hljs-comment">// stdin</span><br>  stdoutHandle = GetStdHandle(<span class="hljs-number">0xFFFFFFF5</span>);      <span class="hljs-comment">// stdout</span><br>  WriteFile(stdoutHandle, aG1v3M3T3hFl4g, <span class="hljs-number">0x13</span>u, &amp;NumberOfBytesWritten, <span class="hljs-number">0</span>);<br>  praseInput();<br>  <span class="hljs-keyword">if</span> ( sub_401050() )<br>    WriteFile(stdoutHandle, aG00dJ0b, <span class="hljs-number">0xA</span>u, &amp;NumberOfBytesWritten, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">else</span><br>    WriteFile(stdoutHandle, aN0tT00H0tRWe7r, <span class="hljs-number">0x24</span>u, &amp;NumberOfBytesWritten, <span class="hljs-number">0</span>);<br>  ExitProcess(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></tbody></table></figure><p><code>GetStdHandle</code>函数没见过, 查了一下<a href="https://docs.microsoft.com/zh-cn/windows/console/getstdhandle">文档</a>, 是获得设备句柄, 参数决定是标准 输入/输出/错误 设备.</p><p>在第 8 行输出提示之后调用了一个函数, 推测是解析输入 - 同时确定的输入缓冲区的第一个零字节的位置作为结尾. 然后在第 10 行调用<code>sub_401050</code>检验 flag,</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_401050</span><span class="hljs-params">()</span><br>{<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp+0h] [ebp-Ch]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+4h] [ebp-8h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [esp+4h] [ebp-8h]</span><br>  <span class="hljs-type">char</span> key; <span class="hljs-comment">// [esp+Bh] [ebp-1h]</span><br><br>  v1 = getFirstZeroBytePos((<span class="hljs-type">int</span>)prasedInput);<br>  key = sub_401000();                           <span class="hljs-comment">// 0x4</span><br>  <span class="hljs-keyword">for</span> ( i = v1 - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i )<br>  {<br>    encIn[i] = key ^ prasedInput[i];<br>    key = prasedInput[i];<br>  }<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">39</span>; ++j )<br>  {<br>    <span class="hljs-keyword">if</span> ( encIn[j] != (<span class="hljs-type">unsigned</span> __int8)enc[j] )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>是一个简单的循环异或加密, 不过注意是反向的, 初始的<code>key</code>是<code>0x4</code>. 写个jio本解密, 拿到 flag.</p><p><code>flag{R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com}</code></p><p><s>还真是晚上做的…</s></p><h2 id="0x02-buuctf-firmware"><a class="markdownIt-Anchor" href="#0x02-buuctf-firmware"></a> 0x02 BUUCTF Firmware</h2><p>看题目是一个路由器固件的分析, 用 binwalk 扫描一下, 得到了文件系统的位置, 也就是提取出来的<code>120200.squashfs</code>文件.</p><p><img src="Strong-Reversers/image-20210210230050652.png" alt="image-20210210230050652"></p><p>用 <code>file</code>命令确认了一下, 是 squashfs 文件系统, 不过不能直接用<code>mount</code>挂载 - 可能是因为有 lzma 压缩了…</p><p>在网上搜索了一下, 得知 <a href="https://github.com/mirror/firmware-mod-kit">firmware-mod-kit</a> (简称 fmk) 可以从 squashfs 提取文件, 不过在我这里总是提取失败, 或者返回成功但是啥也没提取出来… 也许是因为 fmk 从 2013 年之后没更新过吧…</p><p>最后用 <code>unsquashfs</code> 提取成功 (是 <a href="https://github.com/plougher/squashfs-tools">squashfs-tools</a> 下的一个工具), 在 <code>/tmp</code>下发现一个 <code>backdoor</code> 文件…<s>还好这名字挺明显…</s></p><p>确认是 32 位的 ARM ELF 文件, die 检查发现 upx 壳, 脱壳之后 IDA 打开, 定位到 <code>main</code>.</p><p>在前面获取 MAC 等等之后, 这个 <code>initConnection</code>函数引起了我们的注意, 尤其是这里.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br> {<br>   <span class="hljs-keyword">while</span> ( initConnection() )<br>   {<br>     <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Failed to connect..."</span>);<br>     sleep(<span class="hljs-number">5u</span>);<br>   }<br>    <br>   <span class="hljs-comment">// do some other things</span><br>    <br>  }<br></code></pre></td></tr></tbody></table></figure><p>在<code>initConnextion</code>返回不为零时, 会等待五秒再重来 - 这里应该就是回连服务器了. 进去看看, 确定地址<code>echo.byethost51.com</code>, 端口<code>36667</code>.</p><p><code>MD5(echo.byethost51.com:36667) == 33a422c45d551ac6e4756f59812a954b</code></p><p>所以, <code>flag{33a422c45d551ac6e4756f59812a954b}</code></p><h2 id="最后-祝大家新年快乐"><a class="markdownIt-Anchor" href="#最后-祝大家新年快乐"></a> 最后, 祝大家新年快乐🍻</h2><h1 id="2021-week-6-0305"><a class="markdownIt-Anchor" href="#2021-week-6-0305"></a> 2021 Week 6 - 03/05</h1><p><sub>前两周因为题不会(好多知识盲区.jpg)+准备返校，只做出来了两道…不过看题解学到了很多，继续努力</sub></p><h2 id="000-hacking-with-google-2020-beginner"><a class="markdownIt-Anchor" href="#000-hacking-with-google-2020-beginner"></a> 0×00 Hacking with Google 2020 Beginner</h2><p>已经理解了整个过程, 不过还没有拿到 flag… angr 也没有跑出来正确的结果, 可能是没能正确识别 SSE 的函数…?</p><p>跑出来是这样…</p><p><img src="Strong-Reversers/image-20210305182332107.png" alt="image-20210305182332107"></p><p>等我再研究研究, 或许直接用 z3 会比较适合?</p><h2 id="001-vn-公开赛-csre"><a class="markdownIt-Anchor" href="#001-vn-公开赛-csre"></a> 0×01 V&amp;N 公开赛 CSRe</h2><p>看题目是混淆过的 C#, 查了一下, 可以用 <a href="https://github.com/CodingGuru1989/de4dot">detdot的修改版</a> 反混淆, 之后再用 <a href="https://github.com/icsharpcode/ILSpy">ILSpy</a> 反编译.</p><p>一个类一个类地找, 很快就能发现 <code>Class3.Main</code> 方法, 如下.</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-comment">// Class3</span><br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Security.Cryptography;<br><span class="hljs-keyword">using</span> System.Text;<br><br><span class="hljs-keyword">internal</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Class3</span><br>{<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">method_0</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> string_0, <span class="hljs-built_in">string</span> string_1</span>)</span><br>{<br><span class="hljs-built_in">string</span> text = <span class="hljs-built_in">string</span>.Empty;<br><span class="hljs-built_in">char</span>[] array = string_0.ToCharArray();<br><span class="hljs-built_in">char</span>[] array2 = string_1.ToCharArray();<br><span class="hljs-built_in">int</span> num = ((array.Length &lt; array2.Length) ? array.Length : array2.Length);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)<br>{<br>text += array[i] ^ array2[i];<br>}<br><span class="hljs-keyword">return</span> text;<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">smethod_0</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> string_0</span>)</span><br>{<br><span class="hljs-built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(string_0);<br><span class="hljs-built_in">byte</span>[] array = SHA1.Create().ComputeHash(bytes);<br>StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br><span class="hljs-built_in">byte</span>[] array2 = array;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">byte</span> b <span class="hljs-keyword">in</span> array2)<br>{<br>stringBuilder.Append(b.ToString(<span class="hljs-string">"X2"</span>));<br>}<br><span class="hljs-keyword">return</span> stringBuilder.ToString();<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>{<br><span class="hljs-keyword">if</span> (!Class1.smethod_1())<br>{<br><span class="hljs-keyword">return</span>;<br>}<br><span class="hljs-built_in">bool</span> flag = <span class="hljs-literal">true</span>;<br>Class3 @class = <span class="hljs-keyword">new</span> Class3();<br><span class="hljs-built_in">string</span> text = Console.ReadLine();<br><span class="hljs-keyword">if</span> (smethod_0(<span class="hljs-string">"3"</span> + text + <span class="hljs-string">"9"</span>) != <span class="hljs-string">"B498BFA2498E21325D1178417BEA459EB2CD28F8"</span>)<br>{<br>flag = <span class="hljs-literal">false</span>;<br>}<br><span class="hljs-built_in">string</span> text2 = Console.ReadLine();<br><span class="hljs-built_in">string</span> string_ = smethod_0(<span class="hljs-string">"re"</span> + text2);<br><span class="hljs-built_in">string</span> text3 = @class.method_0(string_, <span class="hljs-string">"63143B6F8007B98C53CA2149822777B3566F9241"</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; text3.Length; i++)<br>{<br><span class="hljs-keyword">if</span> (text3[i] != <span class="hljs-string">'0'</span>)<br>{<br>flag = <span class="hljs-literal">false</span>;<br>}<br>}<br><span class="hljs-keyword">if</span> (flag)<br>{<br>Console.WriteLine(<span class="hljs-string">"flag{"</span> + text + text2 + <span class="hljs-string">"}"</span>);<br>}<br>}<br>}<br></code></pre></td></tr></tbody></table></figure><p>flag 一共有两端, 其中<code>text</code>直接就是<code>B498BFA2498E21325D1178417BEA459EB2CD28F8</code>的 SHA1 原文.</p><p>对于 <code>text2</code>, 观察<code>method_0</code>, 发现它会返回两个 string 类型参数的异或值, 而之后的 for 循环会比较异或后的字符串每个字符是否均为<code>"0"</code> - 很明显, <code>x ^ x == 0</code>, 所以<code>"re" + text2</code>的 SHA1 值就是 <code>63143B6F8007B98C53CA2149822777B3566F9241</code>.</p><p>cmd5 上查询, 得到 <code>text = "1415"</code>, <code>text2 = "turn"</code>, 最后得到 flag.</p><p><code>flag{1415turn}</code></p><h2 id="002-zer0pts2020-easy-strcmp"><a class="markdownIt-Anchor" href="#002-zer0pts2020-easy-strcmp"></a> 0×02 Zer0pts2020 easy-strcmp</h2><blockquote><p>“有时候你看见的不一定是真实的”</p><p>​                                                – RX</p></blockquote><p>IDA64 打开, 定位到<code>main</code>函数, 发现 flag 就摆在眼前 (误</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>{<br>  <span class="hljs-keyword">if</span> ( a1 &gt; <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(a2[<span class="hljs-number">1</span>], <span class="hljs-string">"zer0pts{********CENSORED********}"</span>) )<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Correct!"</span>);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Wrong!"</span>);<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Usage: %s &lt;FLAG&gt;\n"</span>, *a2);<br>  }<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p><s>怎么看第五行的那东西都不能是 flag 吧</s></p><p>我们发现它确实调用了一个<code>strcmp</code>比较<code>argv[0]</code>和那东西 (就叫假 flag 吧) 的值, 但是它又确实不是 flag… 看看左侧, 发现还有两个奇怪的函数 <code>sub_6EA</code>和<code>sub_795</code>.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// write access to const memory has been detected, the output may be wrong!</span><br><span class="hljs-type">int</span> (**sub_795())(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2)<br>{<br>  <span class="hljs-type">int</span> (**result)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *); <span class="hljs-comment">// rax</span><br><br>  result = &amp;<span class="hljs-built_in">strcmp</span>;<br>  strcmp_pointer = (__int64 (__fastcall *)(_QWORD, _QWORD))&amp;<span class="hljs-built_in">strcmp</span>;<br>  off_201028 = sub_6EA;<br>  <span class="hljs-keyword">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure><p>(<code>srecmp_pointer</code>是我重命名的)</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">sub_6EA</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br>{<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; *(_BYTE *)(i + a1); ++i )<br>    ;<br>  v4 = (i &gt;&gt; <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; v4; ++j )<br>    *(_QWORD *)(<span class="hljs-number">8</span> * j + a1) -= qword_201060[j];<br>  <span class="hljs-keyword">return</span> strcmp_pointer(a1, a2);<br>}<br></code></pre></td></tr></tbody></table></figure><p>但是我们并没有在<code>main</code>中看到这两个函数的调用, 看一下交叉引用, 发现这两个函数都在<code>.init_array</code>段里 - 会在<code>main</code>前就执行.</p><p><code>sub_795</code>会把在<code>.got.plt</code>段中原先正常的<code>strcmp</code>的地址替换成<code>sub_6EA</code>的地址, 而<code>sub_6EA</code>会把第一个参数按照每 8 个字符一组, 减去<code>qword_201060[j]</code>后再和假 flag 进行真正的<code>strcmp</code>…</p><p>既然这样, 写个 jio 本 - 看上去是这样.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">key = [<span class="hljs-number">0x42</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x41</span>,<br>       <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0B</span>,<br>       <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x4F</span>]<br>enc = <span class="hljs-string">"********CENSORED********"</span><br>dec = <span class="hljs-string">""</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    <span class="hljs-built_in">print</span>(c % <span class="hljs-number">256</span>, end=<span class="hljs-string">" "</span>)<br>    dec = dec + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">chr</span>(c % <span class="hljs-number">256</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">""</span>)<br><span class="hljs-built_in">print</span>(dec)<br>dec = <span class="hljs-string">""</span><br></code></pre></td></tr></tbody></table></figure><p>得到的结果是<code>l3ts_m4k3^4^DDSOUR_t0d4y</code>, 中间部分看上去不太对… 原因在于, 原程序是将整个<code>QWORD</code>作为一个整体进行加减, 但我们的 exp 是对每一个字节进行的计算, 这样进位不会影响到前一位.</p><p>进位影响的是 9 11 13 14 这几个位置, 手动加一就好.</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">key = [<span class="hljs-number">0x42</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x41</span>,<br>       <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0B</span>,<br>       <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x4F</span>]<br>enc = <span class="hljs-string">"********CENSORED********"</span><br>dec = <span class="hljs-string">""</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>):<br>      c = <span class="hljs-built_in">ord</span>(enc[i]) + key[i] + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        c = <span class="hljs-built_in">ord</span>(enc[i]) + key[i]<br>    <span class="hljs-built_in">print</span>(c % <span class="hljs-number">256</span>, end=<span class="hljs-string">" "</span>)<br>    dec = dec + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">chr</span>(c % <span class="hljs-number">256</span>))<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">""</span>)<br><span class="hljs-built_in">print</span>(dec)<br>dec = <span class="hljs-string">""</span><br><br></code></pre></td></tr></tbody></table></figure><p><code>zer0pts{l3ts_m4k3_4_DETOUR_t0d4y}</code></p><p>不过在平台上提交的时候应该是<code>flag{l3ts_m4k3_4_DETOUR_t0d4y}</code></p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/Reverse/">Reverse</category>
      
      <category domain="https://horizonchaser.github.io/tags/Android/">Android</category>
      
      
      <comments>https://horizonchaser.github.io/2021/01/27/Strong-Reversers/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MoeCTF 2020 Write Up for RxEncode</title>
      <link>https://horizonchaser.github.io/2020/10/16/MoeCTF-2020-Write-Up-for-RxEncode/</link>
      <guid>https://horizonchaser.github.io/2020/10/16/MoeCTF-2020-Write-Up-for-RxEncode/</guid>
      <pubDate>Fri, 16 Oct 2020 19:32:50 GMT</pubDate>
      
      <description>RxEncode 的 Writeup</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="rxencode-题解"><a class="markdownIt-Anchor" href="#rxencode-题解"></a> RxEncode 题解</h3><p>这道题当时没有做出来 <s>, 然后就变成了面试作业</s></p><p>使用IDA反汇编, 观察main函数, 发现程序将输入的内容作为RxEncode函数的参数, 再将返回值s1同s2进行比较确定flag正确与否.</p><p>双击RxEncode并反汇编, 得伪代码如下.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *__fastcall <span class="hljs-title function_">RxEncode</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1, <span class="hljs-type">int</span> a2)</span><br>{<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// edx</span><br>  <span class="hljs-type">void</span> *result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">void</span> *Dst; <span class="hljs-comment">// [rsp+28h] [rbp-58h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+30h] [rbp-50h]</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [rsp+34h] [rbp-4Ch]</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+34h] [rbp-4Ch]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [rsp+38h] [rbp-48h]</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [rsp+3Ch] [rbp-44h]</span><br>  _BYTE *v11; <span class="hljs-comment">// [rsp+40h] [rbp-40h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [rsp+48h] [rbp-38h]</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// [rsp+4Ch] [rbp-34h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v14; <span class="hljs-comment">// [rsp+70h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v15; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span><br><br>  v14 = a1;<br>  v15 = a2;<br>  v2 = a2;<br>  v3 = a2 + <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">if</span> ( v2 &lt; <span class="hljs-number">0</span> )<br>    v2 = v3;<br>  v13 = <span class="hljs-number">3</span> * (v2 &gt;&gt; <span class="hljs-number">2</span>);<br>  v12 = <span class="hljs-number">0</span>;<br>  v10 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( a1[v15 - <span class="hljs-number">1</span>] == <span class="hljs-number">61</span> )<br>    v12 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( a1[v15 - <span class="hljs-number">2</span>] == <span class="hljs-number">61</span> )<br>    ++v12;<br>  <span class="hljs-keyword">if</span> ( a1[v15 - <span class="hljs-number">3</span>] == <span class="hljs-number">61</span> )<br>    ++v12;<br>  <span class="hljs-keyword">if</span> ( v12 == <span class="hljs-number">1</span> )<br>  {<br>    v13 += <span class="hljs-number">4</span>;<br>  }<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v12 &gt; <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-keyword">if</span> ( v12 == <span class="hljs-number">2</span> )<br>    {<br>      v13 += <span class="hljs-number">3</span>;<br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v12 == <span class="hljs-number">3</span> )<br>    {<br>      v13 += <span class="hljs-number">2</span>;<br>    }<br>  }<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( !v12 )<br>  {<br>    v13 += <span class="hljs-number">4</span>;<br>  }<br>  Dst = <span class="hljs-built_in">malloc</span>(v13);<br>  <span class="hljs-keyword">if</span> ( Dst )<br>  {<br>    <span class="hljs-built_in">memset</span>(Dst, <span class="hljs-number">0</span>, v13);<br>    v11 = Dst;<br>    <span class="hljs-keyword">while</span> ( v15 - v12 &gt; v10 )<br>    {<br>      v9 = <span class="hljs-number">0</span>;<br>      v7 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> ( v9 &lt;= <span class="hljs-number">3</span> &amp;&amp; v15 - v12 &gt; v10 )<br>      {<br>        v7 = (v7 &lt;&lt; <span class="hljs-number">6</span>) | (<span class="hljs-type">char</span>)find_pos(v14[v10]);<br>        ++v9;<br>        ++v10;<br>      }<br>      v8 = v7 &lt;&lt; <span class="hljs-number">6</span> * (<span class="hljs-number">4</span> - v9);<br>      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">2</span> &amp;&amp; i != v9; ++i )<br>        *v11++ = v8 &gt;&gt; <span class="hljs-number">8</span> * (<span class="hljs-number">2</span> - i);<br>    }<br>    *v11 = <span class="hljs-number">0</span>;<br>    result = Dst;<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"No enough memory.\n"</span>);<br>    result = <span class="hljs-number">0</span>i64;<br>  }<br>  <span class="hljs-keyword">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure><p>注意到 ‘=’ 的ASCII码是61, 结合面试时的提示**"将flag进行**(类似)<strong>base64解码"</strong>, 仔细分析RxEncode的逻辑后, 得出这个函数的作用就是将内容进行类似base64的解码.</p><p>由此我们得出, s2保存的应当就是解码后的flag内容, 将变量的值转为16进制后结果如下.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-type">char</span> s2[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-60h]</span><br> __int64 v15; <span class="hljs-comment">// [rsp+18h] [rbp-58h]</span><br> __int64 v16; <span class="hljs-comment">// [rsp+20h] [rbp-50h]</span><br><br><span class="hljs-comment">/*....................................</span><br><span class="hljs-comment">  其他内容</span><br><span class="hljs-comment">  .....................................*/</span><br><br> *(_QWORD *)s2 = <span class="hljs-number">0x4AD158FEB59C879A</span>LL;<br> v15 = <span class="hljs-number">0xCBEBFDFA6CED0BFE</span>LL;<br> v16 = <span class="hljs-number">0x7A47A38E43A334E8</span>LL;<br></code></pre></td></tr></tbody></table></figure><p>结合s2 v15 v16在main的栈帧中相邻存放这一点, 我们推测s2实际的长度应当不止为8, 而是24.</p><p>事实上, 我认为v15 v16的__int64类型也是IDA的推测(它并不确定真实类型是什么) - 因为在栈帧中将s2的类型由默认的char []改为char [24]后, 三个变量变成了这样.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">*(_QWORD *)s2 = <span class="hljs-number">0x4AD158FEB59C879A</span>LL;<br>*(_QWORD *)v15 = <span class="hljs-number">0xCBEBFDFA6CED0BFE</span>LL;<br>*(_QWORD *)v16 = <span class="hljs-number">0x7A47A38E43A334E8</span>LL;<br></code></pre></td></tr></tbody></table></figure><p>考虑到x86的小端序, 实际的字节顺序应当是 <code>9A 87 9C B5 FE 58</code>这样. 获得解码的flag后, 尝试进行base64编码.</p><p>考虑到flag中含有标准编码表不包含的<code>{ }</code>, 因此我们可以认为这个表不同于标准的编码表.</p><p>观察发现, RxEncode中调用了一个名为find_pos的函数, 它的作用应当是在编码表中查找字符的位置, 进入该函数, 得到编码表<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234{}789+/=</code>.</p><p>对先前得到的字节按照编码表进行编码, 可以得到flag<code>moectf{Y0Ur+C+1s+v3ry+g0o0OOo0d}</code>.</p><p><s>No my C is very poooooooor /(ㄒoㄒ)/</s>~~</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/Reverse/">Reverse</category>
      
      <category domain="https://horizonchaser.github.io/tags/MoeCTF/">MoeCTF</category>
      
      
      <comments>https://horizonchaser.github.io/2020/10/16/MoeCTF-2020-Write-Up-for-RxEncode/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MoeCTF 2020 Write Up</title>
      <link>https://horizonchaser.github.io/2020/10/16/MoeCTF%202020%20WriteUp/</link>
      <guid>https://horizonchaser.github.io/2020/10/16/MoeCTF%202020%20WriteUp/</guid>
      <pubDate>Fri, 16 Oct 2020 17:28:59 GMT</pubDate>
      
      <description>2020 MoeCTF 的部分 Writeup</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="moectf-2020-write-up"><a class="markdownIt-Anchor" href="#moectf-2020-write-up"></a> MoeCTF 2020 Write Up</h1><p><em><strong>By Horizon Chaser, aka. Horizon</strong></em></p><p>第一次参加CTF, 现学现用, 会做的题实在有限😂, 先把自己会的或者有思路的部分题写下来, 以供参考</p><p><s>其他不会的题就等各位巨佬的Write Up辽</s></p><p><s>龟速</s>更新记录</p><ul><li>10.14 Misc + Reverse.Rxencode</li><li>10.16 Reverse</li><li>10.18 Algorithm + Classical Crypto</li></ul><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><p>Misc, 全程Miscellaneous, 本意是"杂项". 在CTF中大概是指多个领域 <s>脑洞</s> 的混合. 因此做起来还是很有意思的.</p><h3 id="welcome"><a class="markdownIt-Anchor" href="#welcome"></a> Welcome</h3><p>Misc入门题, 附件profession.jpg. 打开, 发现是专业团队, 仔细一看右下角有黑白色块, 觉得可能是在jpg文件末端添加了内容.</p><p>使用binwalk分析, 未发现隐写的文件, 有点疑惑.</p><p>使用16进制编辑器打开, 发现flag就在末尾😂</p><p><img src="MoeCTF%202020%20WriteUp/image-20201012183142831.png" alt="welcome"></p><h3 id="hey-fxck-you"><a class="markdownIt-Anchor" href="#hey-fxck-you"></a> hey fxck you!</h3><p>附件good_morning_my_neighbors.png, 表达了诚挚的问候(大雾)</p><p>除了最下方被裁剪了, 图片没有发现什么问题, 使用binwalk分析, 发现末尾有一个zip文件, 解压得fk u.txt, 内容如下</p><blockquote><p><ins><ins><ins><ins>[&gt;&gt;</ins>&gt;</ins></ins>&gt;</ins><ins><ins>&gt;</ins></ins><ins><ins>&gt;</ins></ins><ins><ins><ins>&gt;</ins></ins></ins><ins><ins><ins>&gt;</ins></ins></ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins><ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins></ins><ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins></ins><ins><ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins></ins></ins><ins><ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins></ins></ins><ins><ins><ins><ins><ins><ins><ins><ins>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;—.</ins>.&lt;</ins></ins>+.–.&gt;</ins></ins>+.&lt;</ins>+.&gt;&gt;-----.–.&lt;&lt;-.&gt;-.&lt;&lt;&lt;&lt;&lt;+.&gt;&gt;&gt;&gt;&gt;&gt;.&lt;&lt;.&gt;.&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;+.</ins></ins>+.------------.&lt;+<ins><ins>.&gt;.&lt;&lt;&lt;</ins>.&lt;.&gt;&gt;&gt;&gt;&gt;&gt;</ins>++.</p></blockquote><p>搜索, 得知这是BrainFuck语言, 解密得到flag <code>moectf{yes!yes!fk_U_2!}</code></p><p><s>这是对此前问候的友好回应(确信)</s></p><h3 id="base64"><a class="markdownIt-Anchor" href="#base64"></a> base64？¿</h3><p>题面是一个以等号结尾的字符串  <code>0H9MJjCNPiMgJHMQJNtfyEJgIjtS1Ig=</code>, 结合名称, 确定是base64编码的文本.</p><p>按照标准的字符表无法解密, 查看hint, 得到字符表为<code>vwxrstuopq34567ABCDEFGHIJyz012PQRSTKLMNOZabcdUVWXYefghijklmn89+/</code>, 按照这个字符表解码, 得到flag<code>moectf{itai_base64_qaq}</code></p><h3 id="a3fxck"><a class="markdownIt-Anchor" href="#a3fxck"></a> A3FXCK</h3><p><s>所以a3又干啥了这是</s></p><p>题面是一个jpg, binwalk分析, 得到隐藏的A3FXCK.txt, 打开, 发现内容可被拆分为两类: <code>luoqXan</code>与<code>arttnbaX</code>, X为1~6的正整数.</p><p>结合首行的<code>123456[]()+!</code>, 推测1~6的值分别代表<code>[]()+!</code>, 替换后得到一坨奇怪的东西, 尝试按照JavaScript运行后得到flag <code>moectf{J5Fxck_1s_1nt3res7in9!}</code></p><p>新知识: <a href="https://github.com/aemkei/jsfuck">JSFuck</a>是将(小段的)JS代码加密为仅包含<code>[]()+!</code>的文本, 但是会造成严重的体积膨胀. 所以替换后得到的那一坨解密之后也只是一行<code>alert('moectf{J5Fxck_1s_1nt3res7in9!}'</code></p><p><s>由此得知, JS确实是最强大的编程语言</s></p><h2 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h2><h3 id="welcome-to-re"><a class="markdownIt-Anchor" href="#welcome-to-re"></a> Welcome To Re!</h3><p>签到题, 也是第一道我做出来的逆向的题😂</p><p>下载附件, 打开, 按照入门指南和Hint提示, 使用IDA64分析SignIn.exe, 在左侧定位main函数, 双击跳转到对应位置, 按下F5反汇编, 得到伪代码如下</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>{<br>  <span class="hljs-type">char</span> Str1; <span class="hljs-comment">// [rsp+20h] [rbp-60h]</span><br>  <span class="hljs-type">char</span> Str2[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+50h] [rbp-30h]</span><br><br>  _main();<br>  <span class="hljs-built_in">strcpy</span>(Str2, <span class="hljs-string">"moectf{W3lc0me-T0_th3-W0rld_Of_R3v3rsE!}"</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Welcome to MoeCTF! --by Reverier\nPlease Input your flag and I will check it:"</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%41s"</span>, &amp;Str1);<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(&amp;Str1, Str2) )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congratulations!"</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Ruaaaaaaaaaaaaa~~~Wrong!"</span>);<br>  getchar();<br>  getchar();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>在main函数中, 首先将flag内容复制到str2中, 然后输出提示信息并将输入保存到Str1中. 之后通过strcmp比较输入的Str2与保存的Str1的值是否一致. 由此我们得出, Str2的值就是flag<code>moectf{W3lc0me-T0_th3-W0rld_Of_R3v3rsE!}</code>. <s>虽然说是显然的, 但是该分析还是要分析的</s></p><p>总之, Welcome to the World of Reverse 🍻!</p><h3 id="rxencode"><a class="markdownIt-Anchor" href="#rxencode"></a> RxEncode</h3><p>这道题当时没有做出来 <s>, 然后就变成了面试作业</s></p><p>使用IDA反汇编, 观察main函数, 发现程序将输入的内容作为RxEncode函数的参数, 再将返回值s1同s2进行比较确定flag正确与否.</p><p>双击RxEncode并反汇编, 得伪代码如下.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *__fastcall <span class="hljs-title function_">RxEncode</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1, <span class="hljs-type">int</span> a2)</span><br>{<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// edx</span><br>  <span class="hljs-type">void</span> *result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">void</span> *Dst; <span class="hljs-comment">// [rsp+28h] [rbp-58h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+30h] [rbp-50h]</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [rsp+34h] [rbp-4Ch]</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+34h] [rbp-4Ch]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [rsp+38h] [rbp-48h]</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [rsp+3Ch] [rbp-44h]</span><br>  _BYTE *v11; <span class="hljs-comment">// [rsp+40h] [rbp-40h]</span><br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [rsp+48h] [rbp-38h]</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// [rsp+4Ch] [rbp-34h]</span><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *v14; <span class="hljs-comment">// [rsp+70h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v15; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span><br><br>  v14 = a1;<br>  v15 = a2;<br>  v2 = a2;<br>  v3 = a2 + <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">if</span> ( v2 &lt; <span class="hljs-number">0</span> )<br>    v2 = v3;<br>  v13 = <span class="hljs-number">3</span> * (v2 &gt;&gt; <span class="hljs-number">2</span>);<br>  v12 = <span class="hljs-number">0</span>;<br>  v10 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( a1[v15 - <span class="hljs-number">1</span>] == <span class="hljs-number">61</span> )<br>    v12 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( a1[v15 - <span class="hljs-number">2</span>] == <span class="hljs-number">61</span> )<br>    ++v12;<br>  <span class="hljs-keyword">if</span> ( a1[v15 - <span class="hljs-number">3</span>] == <span class="hljs-number">61</span> )<br>    ++v12;<br>  <span class="hljs-keyword">if</span> ( v12 == <span class="hljs-number">1</span> )<br>  {<br>    v13 += <span class="hljs-number">4</span>;<br>  }<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v12 &gt; <span class="hljs-number">1</span> )<br>  {<br>    <span class="hljs-keyword">if</span> ( v12 == <span class="hljs-number">2</span> )<br>    {<br>      v13 += <span class="hljs-number">3</span>;<br>    }<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v12 == <span class="hljs-number">3</span> )<br>    {<br>      v13 += <span class="hljs-number">2</span>;<br>    }<br>  }<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( !v12 )<br>  {<br>    v13 += <span class="hljs-number">4</span>;<br>  }<br>  Dst = <span class="hljs-built_in">malloc</span>(v13);<br>  <span class="hljs-keyword">if</span> ( Dst )<br>  {<br>    <span class="hljs-built_in">memset</span>(Dst, <span class="hljs-number">0</span>, v13);<br>    v11 = Dst;<br>    <span class="hljs-keyword">while</span> ( v15 - v12 &gt; v10 )<br>    {<br>      v9 = <span class="hljs-number">0</span>;<br>      v7 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> ( v9 &lt;= <span class="hljs-number">3</span> &amp;&amp; v15 - v12 &gt; v10 )<br>      {<br>        v7 = (v7 &lt;&lt; <span class="hljs-number">6</span>) | (<span class="hljs-type">char</span>)find_pos(v14[v10]);<br>        ++v9;<br>        ++v10;<br>      }<br>      v8 = v7 &lt;&lt; <span class="hljs-number">6</span> * (<span class="hljs-number">4</span> - v9);<br>      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">2</span> &amp;&amp; i != v9; ++i )<br>        *v11++ = v8 &gt;&gt; <span class="hljs-number">8</span> * (<span class="hljs-number">2</span> - i);<br>    }<br>    *v11 = <span class="hljs-number">0</span>;<br>    result = Dst;<br>  }<br>  <span class="hljs-keyword">else</span><br>  {<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"No enough memory.\n"</span>);<br>    result = <span class="hljs-number">0</span>i64;<br>  }<br>  <span class="hljs-keyword">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure><p>注意到 ‘=’ 的ASCII码是61, 结合面试时的提示**"将flag进行**(类似)<strong>base64解码"</strong>, 仔细分析RxEncode的逻辑后, 得出这个函数的作用就是将内容进行类似base64的解码.</p><p>由此我们得出, s2保存的应当就是解码后的flag内容, 将变量的值转为16进制后结果如下.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C">  <span class="hljs-type">char</span> s2[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-60h]</span><br> __int64 v15; <span class="hljs-comment">// [rsp+18h] [rbp-58h]</span><br> __int64 v16; <span class="hljs-comment">// [rsp+20h] [rbp-50h]</span><br><br><span class="hljs-comment">/*....................................</span><br><span class="hljs-comment">  其他内容</span><br><span class="hljs-comment">  .....................................*/</span><br><br> *(_QWORD *)s2 = <span class="hljs-number">0x4AD158FEB59C879A</span>LL;<br> v15 = <span class="hljs-number">0xCBEBFDFA6CED0BFE</span>LL;<br> v16 = <span class="hljs-number">0x7A47A38E43A334E8</span>LL;<br></code></pre></td></tr></tbody></table></figure><p>结合s2 v15 v16在main的栈帧中相邻存放这一点, 我们推测s2实际的长度应当不止为8, 而是24.</p><p>事实上, 我认为v15 v16的__int64类型也是IDA的推测(它并不确定真实类型是什么) - 因为在栈帧中将s2的类型由默认的char []改为char [24]后, 三个变量变成了这样.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">*(_QWORD *)s2 = <span class="hljs-number">0x4AD158FEB59C879A</span>LL;<br>*(_QWORD *)v15 = <span class="hljs-number">0xCBEBFDFA6CED0BFE</span>LL;<br>*(_QWORD *)v16 = <span class="hljs-number">0x7A47A38E43A334E8</span>LL;<br></code></pre></td></tr></tbody></table></figure><p>考虑到x86的小端序, 实际的字节顺序应当是 <code>9A 87 9C B5 FE 58</code>这样. 获得解码的flag后, 尝试进行base64编码.</p><p>考虑到flag中含有标准编码表不包含的<code>{ }</code>, 因此我们可以认为这个表不同于标准的编码表.</p><p>观察发现, RxEncode中调用了一个名为find_pos的函数, 它的作用应当是在编码表中查找字符的位置, 进入该函数, 得到编码表<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234{}789+/=</code>.</p><p>对先前得到的字节按照编码表进行编码, 可以得到flag<code>moectf{Y0Ur+C+1s+v3ry+g0o0OOo0d}</code>.</p><p><s>No my C is very poooooooor /(ㄒoㄒ)/</s>~~</p><h4 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h4><p>在分析时我不小心改错了s2的类型, 却又改不回去, 而IDA本身又不支持撤销…<br>当时我通过菜单栏的New Instance新打开了一个IDA实例重新分析, 得到的main函数中解码后的flag的相关内容变成了这样, 栈帧也发生了相应的改变…</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">Str2 = <span class="hljs-number">-98</span>;<br>v11 = <span class="hljs-number">-101</span>;<br>v12 = <span class="hljs-number">-100</span>;<br>v13 = <span class="hljs-number">-75</span>;<br>v14 = <span class="hljs-number">-2</span>;<br>v15 = <span class="hljs-number">112</span>;<br>v16 = <span class="hljs-number">-45</span>;<br>v17 = <span class="hljs-number">15</span>;<br>v18 = <span class="hljs-number">-78</span>;<br>v19 = <span class="hljs-number">-47</span>;<br>v20 = <span class="hljs-number">79</span>;<br>v21 = <span class="hljs-number">-100</span>;<br>v22 = <span class="hljs-number">2</span>;<br>v23 = <span class="hljs-number">127</span>;<br>v24 = <span class="hljs-number">-85</span>;<br>v25 = <span class="hljs-number">-34</span>;<br>v26 = <span class="hljs-number">89</span>;<br>v27 = <span class="hljs-number">101</span>;<br>v28 = <span class="hljs-number">99</span>;<br>v29 = <span class="hljs-number">-25</span>;<br>v30 = <span class="hljs-number">64</span>;<br>v31 = <span class="hljs-number">-99</span>;<br>v32 = <span class="hljs-number">-51</span>;<br>v33 = <span class="hljs-number">-6</span>;<br>v34 = <span class="hljs-number">4</span>;<br>v35 = <span class="hljs-number">0</span>;<br>v36 = <span class="hljs-number">0</span>;<br>v37 = <span class="hljs-number">0</span>;<br>v38 = <span class="hljs-number">0</span>;<br>v39 = <span class="hljs-number">0</span>;<br>v40 = <span class="hljs-number">0</span>;<br>v41 = <span class="hljs-number">0</span>;<br>v42 = <span class="hljs-number">0</span>;<br></code></pre></td></tr></tbody></table></figure><p>不过除此之外整体的结构并未发生过多改变, 其余内容一样.</p><h3 id="simple-re"><a class="markdownIt-Anchor" href="#simple-re"></a> Simple Re</h3><p>下载解压, 拖入IDA中反汇编, 得到伪代码. 观察发现, main中会将输入的字符串作为参数调用enc()函数.</p><p>双击跳转进该函数, 反汇编后得到伪代码如下.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">enc</span><span class="hljs-params">(<span class="hljs-type">char</span> *a1)</span><br>{<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>    <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  ............</span><br><span class="hljs-comment">  循环用变量定义</span><br><span class="hljs-comment">  ............</span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">30</span>; ++i )<br>    out[i] = a1[i] ^ <span class="hljs-number">0x17</span>;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">30</span>; ++j )<br>    out[j] ^= <span class="hljs-number">0x39</span>u;<br>  <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">30</span>; ++k )<br>    out[k] ^= <span class="hljs-number">0x4B</span>u;<br>  <span class="hljs-keyword">for</span> ( l = <span class="hljs-number">0</span>; l &lt;= <span class="hljs-number">30</span>; ++l )<br>    out[l] ^= <span class="hljs-number">0x4A</span>u;<br>  <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">30</span>; ++m )<br>    out[m] ^= <span class="hljs-number">0x49</span>u;<br>  <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">0</span>; n &lt;= <span class="hljs-number">30</span>; ++n )<br>    out[n] ^= <span class="hljs-number">0x26</span>u;<br>  <span class="hljs-keyword">for</span> ( ii = <span class="hljs-number">0</span>; ii &lt;= <span class="hljs-number">30</span>; ++ii )<br>    out[ii] ^= <span class="hljs-number">0x15</span>u;<br>  <span class="hljs-keyword">for</span> ( jj = <span class="hljs-number">0</span>; jj &lt;= <span class="hljs-number">30</span>; ++jj )<br>    out[jj] ^= <span class="hljs-number">0x61</span>u;<br>  <span class="hljs-keyword">for</span> ( kk = <span class="hljs-number">0</span>; kk &lt;= <span class="hljs-number">30</span>; ++kk )<br>    out[kk] ^= <span class="hljs-number">0x56</span>u;<br>  <span class="hljs-keyword">for</span> ( ll = <span class="hljs-number">0</span>; ll &lt;= <span class="hljs-number">30</span>; ++ll )<br>    out[ll] ^= <span class="hljs-number">0x1B</span>u;<br>  <span class="hljs-keyword">for</span> ( mm = <span class="hljs-number">0</span>; mm &lt;= <span class="hljs-number">30</span>; ++mm )<br>    out[mm] ^= <span class="hljs-number">0x21</span>u;<br>  <span class="hljs-keyword">for</span> ( nn = <span class="hljs-number">0</span>; nn &lt;= <span class="hljs-number">30</span>; ++nn )<br>    out[nn] ^= <span class="hljs-number">0x40</span>u;<br>  <span class="hljs-keyword">for</span> ( i1 = <span class="hljs-number">0</span>; i1 &lt;= <span class="hljs-number">30</span>; ++i1 )<br>    out[i1] ^= <span class="hljs-number">0x57</span>u;<br>  <span class="hljs-keyword">for</span> ( i2 = <span class="hljs-number">0</span>; i2 &lt;= <span class="hljs-number">30</span>; ++i2 )<br>    out[i2] ^= <span class="hljs-number">0x2E</span>u;<br>  <span class="hljs-keyword">for</span> ( i3 = <span class="hljs-number">0</span>; i3 &lt;= <span class="hljs-number">30</span>; ++i3 )<br>    out[i3] ^= <span class="hljs-number">0x49</span>u;<br>  <span class="hljs-keyword">for</span> ( i4 = <span class="hljs-number">0</span>; i4 &lt;= <span class="hljs-number">30</span>; ++i4 )<br>    out[i4] ^= <span class="hljs-number">0x37</span>u;<br>  byte_40807F = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(out, aim) )<br>    result = <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Congratulations!"</span>);<br>  <span class="hljs-keyword">else</span><br>    result = <span class="hljs-built_in">puts</span>(<span class="hljs-string">"no...Don't Give up!"</span>);<br>  <span class="hljs-keyword">return</span> result;<br>}<br></code></pre></td></tr></tbody></table></figure><p>可以看到, 它是将输入依次对 0x17 0x39 0x4A … 0x37 进行异或, 然后将运算结果out与aim进行比较. 双击aim变量名, 跳转到栈帧中, 得到aim的值<code>rpz|kydKw^qTl@Y/m2f/J-@o^k.,qkb</code>.</p><p>由 <code>a^b^b == a</code>, 不难发现将aim依次同 0x37 0x49 … 0x39 0x17 进行异或即可得到flag<code>moectf{ThAnKs_F0r-y0U2_pAt13nt}</code></p><p><s>是挺需要耐心的…</s></p><h3 id="protection"><a class="markdownIt-Anchor" href="#protection"></a> Protection</h3><p>下载文件, 根据提示, 程序应该是加了个壳… 检测一下, 是一个UPX的壳, 根据 <a href="https://linux.die.net/man/1/upx">UPX的文档</a>, 我们可以使用<code>-d</code>选项解压缩.</p><p><img src="MoeCTF%202020%20WriteUp/image-20201017215239958.png" alt="image-20201017215239958"></p><p>去掉UPX壳之后, 又到了IDA大显神通的时间了. 我们得到main函数的伪代码如下.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>{<br>  <span class="hljs-type">signed</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-34h]</span><br>  <span class="hljs-type">char</span> v5[<span class="hljs-number">40</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">printf</span>((<span class="hljs-type">unsigned</span> __int64)<span class="hljs-string">"please input your flag: "</span>);<br>  _isoc99_scanf((<span class="hljs-type">unsigned</span> __int64)<span class="hljs-string">"%28s"</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">27</span>; ++i )<br>  {<br>    <span class="hljs-keyword">if</span> ( ((<span class="hljs-type">unsigned</span> __int8)x[i] ^ (<span class="hljs-type">unsigned</span> __int8)v5[i]) != y[i] )<br>    {<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">"wrong!"</span>, v5);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    }<br>  }<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"right!"</span>, v5);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><p>不难看出, 这里是将输入和 x 进行逐个字符异或后再同 y 比较. 用同样的方法, 我们得到<code>x = aouv#@!V08asdozpnma&amp;*#%!$^&amp;*</code>, <code>y ={0x0c, 0x0, 0x10, 0x15, 0x57, 0x26, 0x5a, 0x23, 0x40, 0x40, 0x3e, 0x42, 0x37, 0x30, 0x9, 0x19, 0x3, 0x1d, 0x50, 0x43, 0x7, 0x57, 0x15, 0x7e, 0x51, 0x6d, 0x43, 0x57, 0, 0, 0, 0}</code>.</p><p>写个Java脚本 <s>暂时还不会py</s> 异或之后得到 flag <code>moectf{upx_1S_simp1e-t0_u3e}</code></p><p><s>UPX是挺好用的</s></p><h2 id="algorithm"><a class="markdownIt-Anchor" href="#algorithm"></a> Algorithm</h2><p>算法题, 据说在正式的CTF比赛中不会出现…</p><h3 id="mess"><a class="markdownIt-Anchor" href="#mess"></a> mess</h3><p><s>What a mess !</s></p><p>查看Python脚本, 发现是将flag转为ASCII码之后, 再向其中随机插入字母.</p><p>解法也简单, 去掉字母后将相邻的两个(或三个数字, 范围是 20~126 )转换为该ASCII码对应的字符.</p><p>flag: <code>moectf{pyth0n_1s_s0_s1mple}</code></p><h3 id="曲奇饼"><a class="markdownIt-Anchor" href="#曲奇饼"></a> 曲奇饼</h3><p>统计非重复子串的最大长度.</p><p>简单的滑动窗口即可解决, 细节参见代码.</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> { <span class="hljs-comment">//或者用自带的max也行</span><br>    <span class="hljs-type">int</span> max = a;<br>    <span class="hljs-keyword">if</span> (b &gt; max) {<br>        <span class="hljs-keyword">return</span> b;<br>    } <span class="hljs-keyword">else</span> {<br>        <span class="hljs-keyword">return</span> a;<br>    }<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getMaxSubStrLeng</span><span class="hljs-params">(<span class="hljs-built_in">string</span> inStr)</span> {<br>    <span class="hljs-comment">//滑动窗口, 应该很直观</span><br>    <span class="hljs-type">int</span> max = <span class="hljs-number">0</span>, currBegin = <span class="hljs-number">0</span>, currEnd = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len = inStr.size();<br>    <span class="hljs-built_in">string</span> currContent = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">while</span> (currBegin &lt; len &amp;&amp; currEnd &lt; len) {<br>        <span class="hljs-keyword">if</span> (currContent.find(inStr[currEnd]) == currContent.npos) {<br>            currContent.insert(currContent.end(), inStr[currEnd]);<br>            currEnd++;<br>            max = getMax(max, currEnd - currBegin);  <span class="hljs-comment">//更新最大值</span><br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-comment">//cout &lt;&lt; currContent.find(inStr[currBegin]) &lt;&lt; endl;</span><br>            currContent.erase(currContent.find(inStr[currBegin]), <span class="hljs-number">1</span>);<br>            currBegin++;<br>            <span class="hljs-comment">//遇到重复则逐渐从左端删除currContent中的字符,</span><br>            <span class="hljs-comment">//直到不再有字符和inStr[currEnd]重复</span><br>        }<br>    }<br>    <span class="hljs-comment">//cout &lt;&lt; currContent &lt;&lt; endl;</span><br>    <span class="hljs-keyword">return</span> max;<br>}<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> {<br>    <span class="hljs-built_in">string</span> inStr;<br>    getline(<span class="hljs-built_in">cin</span>, inStr);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; getMaxSubStrLeng(inStr) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="frank-赤道企鹅-永远的神"><a class="markdownIt-Anchor" href="#frank-赤道企鹅-永远的神"></a> Frank &amp; 赤道企鹅, 永远的神</h3><p>这两道题解法相似, 都是统计文件内容, 可参见repo中对应的FrankCounter.java 与EquatorCounter.java</p><p>其余略😜</p><h2 id="classic-crypto"><a class="markdownIt-Anchor" href="#classic-crypto"></a> Classic Crypto</h2><blockquote><p>“古典密码在现代的CTF比赛中已经很少出现”    – FAQ</p></blockquote><h3 id="大帝的征程-1-2"><a class="markdownIt-Anchor" href="#大帝的征程-1-2"></a> 大帝的征程 #1 &amp; #2</h3><p>凯撒密码是一种经典的移位密码, 由flag格式, 得前六个字符为<code>moectf</code>, 然后在此基础上计算密文相对于已知明文的偏移量即可</p><p><s>已知明文攻击 (大概)</s></p><h3 id="大帝的征程-3"><a class="markdownIt-Anchor" href="#大帝的征程-3"></a> 大帝的征程 #3</h3><p>由上述经验, 我们推测偏移量应该为 +47(注意由于ASCII码的范围为0~127, 我们需要对127取余作为结果), 写个java脚本解密, 我们得到了<code>moectf{cnquer_th_X#S$"}</code>…</p><p>看起来大部分是正确的, 只是有一些字符没有正确的解出来. 结合之前的经验, 我们推测<code>cnquer</code> 应该是<code>c0nquer</code>, <code>th</code>应该是<code>th3</code>. 计算可得这时的偏移量是-47, 再计算一次, 我们得到了全部明文: flag <code>moectf{c0nquer_th3_XDSEC}</code></p><p><s>I’m afraid I’m too vegetable to do that 😭</s></p><h3 id="大帝的征程-维吉尼亚-维吉尼亚ex"><a class="markdownIt-Anchor" href="#大帝的征程-维吉尼亚-维吉尼亚ex"></a> 大帝的征程 维吉尼亚 &amp; 维吉尼亚Ex</h3><h4 id="背景知识-维吉尼亚密码"><a class="markdownIt-Anchor" href="#背景知识-维吉尼亚密码"></a> 背景知识: 维吉尼亚密码</h4><p>维吉尼亚密码由凯撒密码扩展而来，引入了密钥的概念。即根据密钥来决定用哪一行的密表(或者你也可以理解成偏移量…)来进行替换，以此来对抗字频统计。</p><p>也就是说, 实际上, 维吉尼亚分解之后还是相当于多个凯撒密码的组合…</p><p>那现在(至少相邻字符的)偏移量不再固定, 我们应该怎么做呢…?</p><h4 id="friedman测试法确定密钥长度"><a class="markdownIt-Anchor" href="#friedman测试法确定密钥长度"></a> Friedman测试法确定密钥长度</h4><p>我们知道, 不同字母在同一文本的出现概率并不相同(至少对于包括英文在内的大多数语言如此). 那么, 我们可以定义一个叫做"重合指数"的量, 来量化两个串之间的对应程度.</p><p>设x=x1x2…xn是一条n个字母的串，x的重合指数记为CI，定义为x中两个随机元素相同的概率。</p><p>而通过对大量的英文文本进行统计, 我们得到每个字母的出现概率如下.</p><p><img src="MoeCTF%202020%20WriteUp/b91e4e49c93c2db554922f8ecb22f56a_thumb.png" alt="【密码学】维吉尼亚密码加解密原理及其破解算法Java实现"></p><p>由此, 我们可以得到英文文本的重合指数为 <strong>0.065</strong>(我们假定明文的重合指数大致也是这个值).</p><p>结合之前的"维吉尼亚密码相当于多个凯撒密码的组合"这一特点, 我们就可以把长为n的密文先分为m组, 按照列的形式组成一个 m*(n/m)的矩阵, 然后检测每一组密文的重合指数.</p><p>如果m正好就是密钥的长度, 那么每一组的CI值应当大致也是0.065; 如果不是的话, 那么分组后的密文看起来应该很随机. 而对于一个随机串, 重合指数约为 <strong>0.038</strong>.</p><p>综上, 我们就通过Friedman测试法得到了密钥的最可能长度.</p><h4 id="字母频度分析确定密钥"><a class="markdownIt-Anchor" href="#字母频度分析确定密钥"></a> 字母频度分析确定密钥</h4><p>有了密钥长度m, 我们就可以将密文按照密钥长度分解为k = n/m组, 每一组都是凯撒密码, 然后用类似上图的字母频度分析即可解密.</p><blockquote><p>由上面的分析可知, 要破解维吉尼亚密码, 还是需要收集到大量的密文的. 不过这两道题的密文都很长, 足够破解了.</p></blockquote><h2 id="android"><a class="markdownIt-Anchor" href="#android"></a> Android</h2><p>其实Android我之前也没接触过, 这里就简单的记录一下简单的Android逆向过程吧.</p><p><s>“你之前到底接触过啥??” “啥也没接触过…”</s></p><p><img src="MoeCTF%202020%20WriteUp/5442499-52cadc4569714633.png" alt="img"></p><p>借一张图(来自<a href="https://www.jianshu.com/p/d29c37dda256">这里</a>)说明apk的打包过程.</p><p>我们看到, java文件在编译后会生成class文件, 然后与其他第三方的class文件与library一起组成dex文件, 然后再经过一些处理, zip压缩, 签名, 对齐后就是我们看到的apk文件了.</p><p>所以, 我们可以直接将apk按照zip解压, 然后获得dex文件. 不过dex是Android的Dalvik虚拟机专用的字节码文件, 我们得把它转成标准的java虚拟机的class文件.</p><p>幸运的是, 已经有大佬实现了相关的工具: <a href="https://github.com/pxb1988/dex2jar">dex2jar</a>. 获得jar/class文件后, 我们可以使用<a href="https://github.com/java-decompiler/jd-gui">jd-gui</a>反编译class文件, 得到源码.</p><h3 id="baby-android"><a class="markdownIt-Anchor" href="#baby-android"></a> Baby Android</h3><p>(稍后再更…)</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/Misc/">Misc</category>
      
      <category domain="https://horizonchaser.github.io/tags/Reverse/">Reverse</category>
      
      <category domain="https://horizonchaser.github.io/tags/MoeCTF/">MoeCTF</category>
      
      <category domain="https://horizonchaser.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="https://horizonchaser.github.io/tags/Classical-Crypto/">Classical Crypto</category>
      
      <category domain="https://horizonchaser.github.io/tags/Android/">Android</category>
      
      
      <comments>https://horizonchaser.github.io/2020/10/16/MoeCTF%202020%20WriteUp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>About Horizon Blog</title>
      <link>https://horizonchaser.github.io/2020/10/15/The-Beginning-of-Everything/</link>
      <guid>https://horizonchaser.github.io/2020/10/15/The-Beginning-of-Everything/</guid>
      <pubDate>Thu, 15 Oct 2020 21:52:08 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;the-beginning-of-everything&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#the-beginning-of-everything&quot;&gt;&lt;/a&gt; The Beginning of</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="the-beginning-of-everything"><a class="markdownIt-Anchor" href="#the-beginning-of-everything"></a> The Beginning of Everything</h2><p>其实很早之前就想在 Github Pages 上搭一个个人博客了, CSDN 总是让人很难受</p><p><s>但是拖延症晚期的我现在才搭完hhh</s></p><p>言归正传, 基于 Hexo 和 Travis CI 的 Pages 并不难部署, 只是基于 YMAL 的主题配置写起来有点麻烦, 向 Markdown 中插入图片也是一件麻烦事儿…</p><p>博客在 <a href="https://horizonchaser.gitee.io/">Gitee Pages</a> 上有一份镜像, <s>不过在我搞定 Github 的 workflow 之前, Gitee 的更新可能不是很及时😂</s>已经搞定了🍻</p><p>就这样吧, 欢迎大家来玩儿~</p><h2 id="known-issue"><a class="markdownIt-Anchor" href="#known-issue"></a> Known Issue</h2><ul><li>[ ] Gitalk 由于 Github 的 CORS 限制无法使用</li></ul><h2 id="develop-plan"><a class="markdownIt-Anchor" href="#develop-plan"></a> Develop Plan</h2><p>开发计划 <s>挖坑计划</s></p><ul><li>[ ] 添加一个 Live2D 看板娘</li><li>[ ] 魔改一下 <code>hexo-bilibili-bangumi</code>, 加个进度显示</li><li>[ ] 加个音乐播放器</li><li>[ ] 把 RSS 订阅显示的更新日期改成文章的更新日期</li><li>[ ] 整个随机 Banner</li></ul><h2 id="更新日志"><a class="markdownIt-Anchor" href="#更新日志"></a> 更新日志</h2><h3 id="update-20201015"><a class="markdownIt-Anchor" href="#update-20201015"></a> Update 2020/10/15</h3><p>Horizon Blog 搭起来了! 👏👏👏</p><h3 id="update-20210131"><a class="markdownIt-Anchor" href="#update-20210131"></a> Update 2021/01/31</h3><p>把博客的 CI 从 Travis 迁移到 Github Actions 上了, 前者太慢了, 排队能排半个小时…</p><h3 id="update-20210205"><a class="markdownIt-Anchor" href="#update-20210205"></a> Update 2021/02/05</h3><p>从 <a href="https://www.bfcounter.vip/">蝴蝶计数器</a> 拿到了一个统计的小工具, 放到这里</p><p><s>看起来并没有多少人看…</s></p><h3 id="update-20210614"><a class="markdownIt-Anchor" href="#update-20210614"></a> Update 2021/06/14</h3><p>把 hexo 升级到了 hexo 5, 主题和其他依赖包也一并升级了下</p><p>为了<s>更好看地</s>用 LaTex 写公式, 把渲染器换成了 <code>hexo-renderer-markdown-it-plus</code>, 并用 <code>katex</code> 作为解析器</p><h3 id="update-20210615"><a class="markdownIt-Anchor" href="#update-20210615"></a> Update 2021/06/15</h3><p>增加了 RSS 订阅支持</p><h3 id="update-20210831"><a class="markdownIt-Anchor" href="#update-20210831"></a> Update 2021/08/31</h3><p>修好了 RSS 订阅地址, 原来一直是 <a href="example.com">example.com</a>, 还在想为啥, 原来是因为 <code>_config.yml</code> 里面的地址忘改了…</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
      
      <category domain="https://horizonchaser.github.io/tags/Develop/">Develop</category>
      
      
      <comments>https://horizonchaser.github.io/2020/10/15/The-Beginning-of-Everything/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
