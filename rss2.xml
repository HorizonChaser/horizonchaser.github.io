<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Horizon Blog</title>
    <link>https://horizonchaser.github.io/</link>
    
    <image>
      <url>https://horizonchaser.github.io/avatar_small_round.png</url>
      <title>Horizon Blog</title>
      <link>https://horizonchaser.github.io/</link>
    </image>
    
    <atom:link href="https://horizonchaser.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 31 Aug 2021 15:39:17 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>CSAPP 第三章 笔记</title>
      <link>https://horizonchaser.github.io/2021/08/31/CSAPP-%E7%AC%94%E8%AE%B0/</link>
      <guid>https://horizonchaser.github.io/2021/08/31/CSAPP-%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Tue, 31 Aug 2021 21:41:22 GMT</pubDate>
      
      <description>CSAPP 第三章的笔记, 包括初级汇编</description>
      
      
      
      <content:encoded><![CDATA[<blockquote><p>CSAPP 采用的是 x64 ATT 汇编, 然而平时用的 IDA 什么的都是 MASM 汇编… 有点头大<br>话说回来, 都会肯定不是坏事… 大概</p></blockquote><h1 id="编译-汇编与反汇编"><a class="markdownIt-Anchor" href="#编译-汇编与反汇编"></a> 编译 汇编与反汇编</h1><h2 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h2><p><code>gcc -Og -o [output file] [source files]</code></p><p>包括四个步骤: 预处理, 编译, 汇编, 链接</p><ul><li><strong>预处理</strong><ul><li>把 <code>#</code> 开头的预处理指令展开, 比如头文件展开, 宏展开</li><li>处理完了也是 <code>*.c</code> 或者 <code>*.cpp</code></li><li><code>gcc -E [source files] -o [output file]</code></li></ul></li><li><strong>编译</strong><ul><li>把预处理完的源代码转化成汇编代码</li><li>对于 <code>gcc</code>, 默认是 ATT 格式, 用 <code>-masm=intel</code> 指定采用 Intel 格式</li><li><code>gcc -S &lt;source&gt;.c -o &lt;output&gt;.s</code></li></ul></li><li><strong>汇编</strong><ul><li>把汇编代码转为二进制的目标文件</li><li><code>gcc -c &lt;source&gt;.c -o &lt;output&gt;.o</code></li></ul></li><li><strong>链接</strong><ul><li>将该目标文件与其他目标文件、库文件、启动文件等链接起来生成可执行文件</li><li><code>gcc &lt;object&gt;.o -o &lt;executable&gt;</code></li></ul></li></ul><h2 id="反汇编"><a class="markdownIt-Anchor" href="#反汇编"></a> 反汇编</h2><p>用 <code>objdump</code></p><ul><li><code>-d &lt;file(s)&gt;</code>: 将代码段反汇编；</li><li><code>-S &lt;file(s)&gt;</code>: 将代码段反汇编的同时，将反汇编代码与源代码交替显示，编译时需要使用-g- 参数，即需要调试信息；</li><li><code>-C &lt;file(s)&gt;</code>: 将C++符号名逆向解析</li><li><code>-l &lt;file(s)&gt;</code>: 反汇编代码中插入文件名和行号</li><li><code>-j section &lt;file(s)&gt;</code>: 仅反汇编指定的section</li></ul><h1 id="汇编语言-初步"><a class="markdownIt-Anchor" href="#汇编语言-初步"></a> 汇编语言 - 初步</h1><h2 id="数据格式"><a class="markdownIt-Anchor" href="#数据格式"></a> 数据格式</h2><blockquote><p>为什么一个字是两字节?</p><p>实际上, 一个字并不一定是两个字节 - 比如 ARM 的 NEON 指令集下, 一个字就是 32 位 (四字节). 但是在 x86/x64 环境下, 一个字规定为两字节, 从 8086 开始就是这样了<br>另外, 一个字节也不一定是 8 位…</p><p>Reference: <a href="https://stackoverflow.com/questions/28066462/how-many-bits-is-a-word">StackOverflow</a></p></blockquote><table><thead><tr><th>名称</th><th>长度 (字节)</th><th>ATT格式后缀</th><th>MASM中的类型</th></tr></thead><tbody><tr><td>字节</td><td>1</td><td>b</td><td>BYTE</td></tr><tr><td>字</td><td>2</td><td>w</td><td>WORD</td></tr><tr><td>双字</td><td>4</td><td>l</td><td>DWORD</td></tr><tr><td>四字</td><td>8</td><td>q</td><td>QWORD</td></tr></tbody></table><h2 id="关于-lea-指令"><a class="markdownIt-Anchor" href="#关于-lea-指令"></a> 关于 LEA 指令</h2><p><code>lea</code> 指令名为 “加载有效地址” (load effective address), 实际上也可以进行简单的四则运算 (利用那些繁杂但必要的寻址方式).</p><p>相对于使用多条<code>add</code> <code>sub</code>指令, 简单的四则运算用 <code>lea</code> 显然更便捷 - 这个时候和地址计算就没任何关系了</p><blockquote><p>这点坑了我半天</p></blockquote><h2 id="条件判断"><a class="markdownIt-Anchor" href="#条件判断"></a> 条件判断</h2><h3 id="cmp-指令"><a class="markdownIt-Anchor" href="#cmp-指令"></a> CMP 指令</h3><p>和 <code>SUB</code> 进行的运算一样, 但不改变操作数寄存器的值</p><h3 id="test-指令"><a class="markdownIt-Anchor" href="#test-指令"></a> TEST 指令</h3><p>和 <code>AND</code> 进行的运算一样, 但不改变操作数寄存器的值</p><p>所以 <code>test %rax, %rax</code> 这类两个操作数相同的指令可以用来<strong>判断其值的正负</strong></p><h2 id="switch-的实现"><a class="markdownIt-Anchor" href="#switch-的实现"></a> switch 的实现</h2><p>在分支较多且数值较为接近的时候<strong>可能</strong>会采用跳转表</p><h1 id="过程控制"><a class="markdownIt-Anchor" href="#过程控制"></a> 过程控制</h1><p>//TODO</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</category>
      
      <category domain="https://horizonchaser.github.io/tags/CSAPP/">CSAPP</category>
      
      
      <comments>https://horizonchaser.github.io/2021/08/31/CSAPP-%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CS Network Review and Summary</title>
      <link>https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/</link>
      <guid>https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/</guid>
      <pubDate>Sun, 13 Jun 2021 20:47:19 GMT</pubDate>
      
      <description>2021期末计网复习总结</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="说明-食用方法"><a class="markdownIt-Anchor" href="#说明-食用方法"></a> 说明 &amp; 食用方法</h1><p>按照计网老师发的提纲从书上总结的重点</p><p>标题后标有 <code>[IMP]</code> 的为提纲上加粗的, 大概就是重点中的重点了吧<br><s>前面的几章还没标</s></p><p>当前进度: 27 / 27 章, 100.0%<br><s>计划在 06/22 完成所有内容</s><br>已在 06/22 完成</p><p>CC-BY-<strong>NC</strong>-SA 4.0<br>修订: 2021/06/22 Rev-1</p><h1 id="part-1-概述"><a class="markdownIt-Anchor" href="#part-1-概述"></a> Part 1 概述</h1><h2 id="chapter-1-绪论"><a class="markdownIt-Anchor" href="#chapter-1-绪论"></a> Chapter 1 绪论</h2><h3 id="数据通信的概念"><a class="markdownIt-Anchor" href="#数据通信的概念"></a> 数据通信的概念</h3><ul><li>四个关键因素: 传递性 准确性 及时性 抖动性</li><li>五个组成部分: 报文 发送方 接收方 传输介质 协议</li></ul><h3 id="数据流-imp"><a class="markdownIt-Anchor" href="#数据流-imp"></a> 数据流 [IMP]</h3><ul><li>单工: 通信是单方向的</li><li>半双工: 通信是双向的, 但不能同时收发</li><li>全双工: 双向通信, 可同时收发</li></ul><h3 id="连接类型"><a class="markdownIt-Anchor" href="#连接类型"></a> 连接类型</h3><ul><li>点到点: 两设备间的专用线路</li><li>多点连接: 两台以上的设备共用单一链路</li></ul><h3 id="物理拓扑结构"><a class="markdownIt-Anchor" href="#物理拓扑结构"></a> 物理拓扑结构</h3><ul><li>网状: 任意两设备间都有专用的点到点线路, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>台设备需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n*(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">∗</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 条双工链路</li><li>星型: 每台设备仅拥有一条与中央控制器 (被称为集线器, hub) 相连的点到点线路</li><li>总线: 用一条较长的线缆作为主干来连接网络上的所有设备, 各设备通过引出线连接到主干</li><li>环状: 每台设备只与两侧设备有一条专用的点到点连接, 信号以一个方向在环中传输, 每台设备均有中继器 (可再生并转发收到的所有信号)</li><li>混合型</li></ul><h3 id="网络分类-imp"><a class="markdownIt-Anchor" href="#网络分类-imp"></a> 网络分类 [IMP]</h3><ul><li>局域网 (local area network, LAN): 小范围内的共享, 例如一间办公室或一所学校, 通常仅采用一种传输介质</li><li>广域网 (wide area network, WAN):<ul><li>交换广域网: 将不同的网络连接起来, 通常包含至少一个网际互联设备 (例如路由器)</li><li>点到点广域网: 将一台设备连接到广域网, 例如 ISP (Internet service provider, 网络服务提供商) 提供的网络服务</li></ul></li><li>城域网 (metropolitian area network, MAN): 规模介于 LAN 和 WAN 之间, 覆盖范围通常是一个乡镇 / 城市</li></ul><h3 id="协议和标准-imp"><a class="markdownIt-Anchor" href="#协议和标准-imp"></a> 协议和标准 [IMP]</h3><h4 id="协议三要素"><a class="markdownIt-Anchor" href="#协议三要素"></a> 协议三要素</h4><ul><li>语法: 数据的结构或格式, 即数据是以何种顺序表示的</li><li>语义: 每一个位片段的含义, 即如何理解每一个位置上的位的含义</li><li>时序: 报文发送的时间和发送的速率</li></ul><h4 id="标准"><a class="markdownIt-Anchor" href="#标准"></a> 标准</h4><ul><li>事实标准: 未经团体或组织承认但已经在广泛使用中的标准</li><li>法定标准: 有官方认可的组织制定的标准</li></ul><h2 id="chapter-2-网络模型"><a class="markdownIt-Anchor" href="#chapter-2-网络模型"></a> Chapter 2 网络模型</h2><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210616190804.png" alt="Model"></p><h3 id="osi模型-imp"><a class="markdownIt-Anchor" href="#osi模型-imp"></a> OSI模型 [IMP]</h3><p>OSI (Open System Interconnection, 开放系统互连) 模型, <strong>不是协议, 也不是 ISO 那个组织</strong></p><h4 id="分层的概念与层间连接"><a class="markdownIt-Anchor" href="#分层的概念与层间连接"></a> 分层的概念与层间连接</h4><ul><li>对等过程: 设备间同一层次的通信过程, 例如物理层 - 物理层, 传输层 - 传输层</li><li>层间接口: 每层的接口都定义了本层向上下两层提供的服务, 无关层内的具体实现, 便于修改</li><li>封装: 第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 层的分组中的数据部分是第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 层的完整分组, 后者被 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 层视为一个完整的数据单元, 不关心内部结构</li></ul><h4 id="各层功能"><a class="markdownIt-Anchor" href="#各层功能"></a> 各层功能</h4><h5 id="物理层"><a class="markdownIt-Anchor" href="#物理层"></a> 物理层</h5><p><strong>负责位从一个节点到另一个节点的传递</strong>, 定义了接口和介质的物理特性, <strong>不对数据进行任何改动</strong></p><h6 id="功能"><a class="markdownIt-Anchor" href="#功能"></a> 功能</h6><ul><li>位的表示 (把0 1转换为对应种类的信号)</li><li>传输速率 (发送位的速度, 每一位持续的时间)</li><li>位同步, 线路配置, 物理拓扑结构, 传输方式等等</li></ul><h5 id="数据链路层"><a class="markdownIt-Anchor" href="#数据链路层"></a> 数据链路层</h5><p><strong>负责帧从一个节点 (node, 通常也被称作一跳, one hop)到下一个节点 (即下一跳) 的传递, 在同一个网络内部</strong>, 将物理层变为可靠的链路</p><h6 id="功能-2"><a class="markdownIt-Anchor" href="#功能-2"></a> 功能</h6><ul><li>成帧: 将来自网络层的位流分割为帧 (frame)</li><li>物理寻址: <strong>在本地网络范围内</strong>, 按照网络设备的物理地址寻找接收者, 例如 MAC 地址</li><li>流量控制: 协调发送速率, 防止过载</li><li>差错控制: 检测与重发损坏与丢失的帧, 并防止重复的帧</li><li>访问控制: 并发访问同一条链路时决定访问的顺序</li></ul><h5 id="网络层"><a class="markdownIt-Anchor" href="#网络层"></a> 网络层</h5><p><strong>负责将各个分组从源地址传送到目的地址 (源端到目的端, 即端到端), 可以跨网络传送</strong>, 但不保证报文间的到达顺序 - <s>所以叫网络层(个人理解)</s></p><h6 id="功能-3"><a class="markdownIt-Anchor" href="#功能-3"></a> 功能</h6><ul><li>逻辑寻址: 与物理寻址相对, 可以跨网络</li><li>路由选择: 提供在网络间传递分组的路径</li></ul><h5 id="传输层"><a class="markdownIt-Anchor" href="#传输层"></a> 传输层</h5><p><strong>负责报文的进程到进程传递</strong>, 保证报文间的<strong>顺序</strong>与内容正确并提供给相应的进程</p><h6 id="功能-4"><a class="markdownIt-Anchor" href="#功能-4"></a> 功能</h6><ul><li>服务点寻址: 也叫端口寻址, 把报文送到对应端口的进程中</li><li>分段和组装: 将进程发来的长报文进行切分并标上序号, 保证数据的顺序正确且不会丢失</li><li>连接控制: 传输层可以是面向连接或者无连接的, 对前者在数据开始传输前需要建立连接</li><li>流量控制: 和数据链路层类似, 但是是端口到端口级别的</li><li>差错控制: 和数据链路层类似, 但是是端口到端口级别的</li></ul><h5 id="会话层"><a class="markdownIt-Anchor" href="#会话层"></a> 会话层</h5><p>负责对话控制 (半双工或者全双工) 与同步 (增加检查点以便快速恢复)</p><h5 id="表示层"><a class="markdownIt-Anchor" href="#表示层"></a> 表示层</h5><p>负责翻译, 压缩与加密数据, 是两个系统间交换信息的语义和语法</p><h5 id="应用层"><a class="markdownIt-Anchor" href="#应用层"></a> 应用层</h5><p><strong>使用户可以访问网络</strong>, 提供了服务支持, 例如文件传输, 邮件服务, 虚拟终端等</p><h3 id="tcpip-协议族-imp"><a class="markdownIt-Anchor" href="#tcpip-协议族-imp"></a> TCP/IP 协议族 [IMP]</h3><p>TCP/IP 协议族在 OSI 模型之前开发, 有四个层次, 两者并不严格对应</p><h4 id="各层功能-2"><a class="markdownIt-Anchor" href="#各层功能-2"></a> 各层功能</h4><h5 id="主机到网络层"><a class="markdownIt-Anchor" href="#主机到网络层"></a> 主机到网络层</h5><p><strong>相当于 OSI 的物理层和数据链路层</strong>, TCP/IP 支持所有的标准与专用协议, 没有在这一层进行任何定义</p><h5 id="互联网层"><a class="markdownIt-Anchor" href="#互联网层"></a> 互联网层</h5><p><strong>相当于 OSI 的网络层</strong>, TCP/IP 支持网际协议 (即IP), 后者使用四个支持协议: ARP, RARP, ICMP, IGMP</p><ul><li>IP: 网际协议, 是无连接, 不可靠的尽力传递服务, 无差错检测</li><li>ARP: 逻辑地址 -&gt; 物理地址</li><li>RARP: 物理地址 -&gt; 逻辑地址</li><li>ICMP: 因特网控制报文协议</li><li>IGMP: 因特网组报文协议, 实现一个报文同时发送给一组接收者</li></ul><h5 id="传输层-2"><a class="markdownIt-Anchor" href="#传输层-2"></a> 传输层</h5><p><strong>相当于 OSI 的传输层</strong>, 有三个协议: TCP ,UDP 和 SCTP (流传输控制协议)<br>TCP 是有连接的可靠的流传输协议, UDP 无连接, 不可靠</p><h5 id="应用层-2"><a class="markdownIt-Anchor" href="#应用层-2"></a> 应用层</h5><p><strong>相当于 OSI 的会话层, 表示层和应用层</strong>, 常见的 FTP, HTTP, SMTP 等协议在这一层</p><h3 id="地址与寻址-imp"><a class="markdownIt-Anchor" href="#地址与寻址-imp"></a> 地址与寻址 [IMP]</h3><p>地址有物理地址, 逻辑地址, 端口地址, 专用地址</p><h4 id="物理地址"><a class="markdownIt-Anchor" href="#物理地址"></a> 物理地址</h4><p><strong>在物理层+数据链路层</strong>, 最低级的地址, 在本地网络中有效, 不同种类网络可能不同</p><h4 id="逻辑地址"><a class="markdownIt-Anchor" href="#逻辑地址"></a> 逻辑地址</h4><p><strong>在网络层</strong>, 与物理地址<strong>无关</strong>, 唯一定义了因特网的一台主机<br>跳到跳时<strong>物理地址改变</strong> (因为通过了不同的网络设备的中继), 但是<strong>逻辑地址不变</strong> (因为预期的收发者对应的主机不变)</p><blockquote><p>在多数协议中, 逻辑源地址在逻辑目的地址之前, 和物理地址刚好相反</p></blockquote><h4 id="端口地址"><a class="markdownIt-Anchor" href="#端口地址"></a> 端口地址</h4><p><strong>在传输层</strong>, 端口对应主机上的进程, 显然在跳到跳传递时端口地址也不变</p><h4 id="专用地址"><a class="markdownIt-Anchor" href="#专用地址"></a> 专用地址</h4><p><strong>在网络层</strong>, 例如电子邮件地址, 统一资源定位符 (URL, 例如网址)<br>由发送计算机转换成对应的端口地址和逻辑地址</p><h1 id="part-2-物理层与介质"><a class="markdownIt-Anchor" href="#part-2-物理层与介质"></a> Part 2 物理层与介质</h1><p>最核心的两个公式 - 波长 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span>, 波速 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>, 周期 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>, 频率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 之间的关系</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mo>=</mo><mi>v</mi><mo>×</mo><mi>T</mi><mo>=</mo><mfrac><mi>v</mi><mi>f</mi></mfrac></mrow><annotation encoding="application/x-tex">\lambda = v \times T = \frac{v}{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9880000000000002em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>=</mo><mfrac><mn>1</mn><mi>f</mi></mfrac></mrow><annotation encoding="application/x-tex">T = \frac{1}{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>国际单位制下的量级表示</p><table><thead><tr><th>词头</th><th>单位</th><th>词头</th><th>单位</th></tr></thead><tbody><tr><td>毫 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></td><td>千 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">10^{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>微 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>6</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></td><td>兆 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">10^{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>纳 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>9</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span></td><td>吉 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^{9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td>皮 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>12</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{-12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></td><td>太 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">10^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></td></tr></tbody></table><h2 id="chapter-3-数据与信号"><a class="markdownIt-Anchor" href="#chapter-3-数据与信号"></a> Chapter 3 数据与信号</h2><h3 id="关于频率-频域与带宽"><a class="markdownIt-Anchor" href="#关于频率-频域与带宽"></a> 关于频率, 频域与带宽</h3><p>通过傅里叶分析, 可以将任何复合信号分解为一系列正弦波</p><p>对于周期复合信号, 正弦波的频率是离散的; 对于非周期复合信号, 正弦波的频率是连续的</p><p>将分解后得到的正弦波系列表示到 频率 - 振幅 图上, 即得频域图</p><p>复合信号包含的频率范围称为带宽, 即信号最高频率与最低频率的差值</p><h3 id="数字信号与传输"><a class="markdownIt-Anchor" href="#数字信号与传输"></a> 数字信号与传输</h3><p>数字信号是<strong>带宽无穷大</strong>的复合模拟信号, 每一个电平可以表示多个位</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">每</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">电</mi><mi mathvariant="normal">平</mi><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">位</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">量</mi><mo>=</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mrow><mi mathvariant="normal">电</mi><mi mathvariant="normal">平</mi><mi mathvariant="normal">数</mi></mrow></mrow><annotation encoding="application/x-tex">每个电平表示的位的数量 = \log_2{电平数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">量</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord cjk_fallback">电</span><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">数</span></span></span></span></span></span></p><h4 id="比特率"><a class="markdownIt-Anchor" href="#比特率"></a> 比特率</h4><p>一秒钟内发送的位数, 以 bps 表示</p><h4 id="位长"><a class="markdownIt-Anchor" href="#位长"></a> 位长</h4><p>一个位在传输介质上的持续时间</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">位</mi><mi mathvariant="normal">长</mi><mo>=</mo><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">度</mi><mo>×</mo><mi mathvariant="normal">位</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">持</mi><mi mathvariant="normal">续</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow><annotation encoding="application/x-tex">位长 = 传播速度 \times 位的持续时间</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">长</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">度</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">持</span><span class="mord cjk_fallback">续</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span></span></span></p><h4 id="传输"><a class="markdownIt-Anchor" href="#传输"></a> 传输</h4><h5 id="基带传输"><a class="markdownIt-Anchor" href="#基带传输"></a> 基带传输</h5><p>通过通道<strong>直接</strong>发送数字信号, 不转换为模拟信号, <strong>需要一个下限频率为0的低通通道</strong></p><h6 id="宽带宽的低通通道"><a class="markdownIt-Anchor" href="#宽带宽的低通通道"></a> 宽带宽的低通通道</h6><p>基本可以保持数字信号的形状, 例如同轴电缆和光纤</p><h6 id="有限带宽的低通通道"><a class="markdownIt-Anchor" href="#有限带宽的低通通道"></a> 有限带宽的低通通道</h6><p>发送的数字信号需要近似成模拟信号,比特率为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 的数字信号传输最小需要的带宽 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">B_{min}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 满足</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><mfrac><mi>N</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">B_{min} = \frac{N}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>通过增加更多谐波可以更好地近似</p><h5 id="宽带传输"><a class="markdownIt-Anchor" href="#宽带传输"></a> 宽带传输</h5><p>通过调制把数字信号转换成模拟信号传输, 可以使用带通通道 (带宽不从零开始的通道)</p><h4 id="传输减损-imp"><a class="markdownIt-Anchor" href="#传输减损-imp"></a> 传输减损 [IMP]</h4><h5 id="衰减"><a class="markdownIt-Anchor" href="#衰减"></a> 衰减</h5><p>能量的损失, 可以使用放大器来补偿</p><h6 id="分贝"><a class="markdownIt-Anchor" href="#分贝"></a> 分贝</h6><p>定义了信号损失或者增益的相对强度, 可以直接加减, 若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">P_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 为信号在两点处的<strong>功率</strong>, 则</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>B</mi><mo>=</mo><mn>10</mn><mo>∗</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><mfrac><msub><mi>P</mi><mn>2</mn></msub><msub><mi>P</mi><mn>1</mn></msub></mfrac></mrow><annotation encoding="application/x-tex">dB = 10 * \log_{10}\frac{P_2}{P_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>需要记住的结论:</p><ul><li>衰减为负, 放大为正</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>3</mn><mi>d</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">-3dB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>d</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">3dB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 衰减说明信号的功率衰减了一半</li></ul><p>分贝有时候也被用作以毫瓦计量信号功率的单位, 这时称作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><msub><mi>B</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">dB_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><msub><mi>B</mi><mi>m</mi></msub><mo>=</mo><mn>10</mn><mo>×</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><msub><mi>P</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">dB_m = 10 \times \log_{10}P_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><h5 id="失真"><a class="markdownIt-Anchor" href="#失真"></a> 失真</h5><p>信号改变了形态或形状, 产生在有不同频率成分的复合信号中</p><h5 id="噪声"><a class="markdownIt-Anchor" href="#噪声"></a> 噪声</h5><p>信号在传输过程中被掺杂的非信号成分</p><h6 id="信噪比"><a class="markdownIt-Anchor" href="#信噪比"></a> 信噪比</h6><p>信号功率与噪声功率的比值, 用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">SNR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 表示</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">平</mi><mi mathvariant="normal">均</mi><mi mathvariant="normal">信</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">功</mi><mi mathvariant="normal">率</mi></mrow><mrow><mi mathvariant="normal">平</mi><mi mathvariant="normal">均</mi><mi mathvariant="normal">噪</mi><mi mathvariant="normal">声</mi><mi mathvariant="normal">功</mi><mi mathvariant="normal">率</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">SNR = \frac{平均信号功率}{平均噪声功率}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.363em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">均</span><span class="mord cjk_fallback">噪</span><span class="mord cjk_fallback">声</span><span class="mord cjk_fallback">功</span><span class="mord cjk_fallback">率</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">平</span><span class="mord cjk_fallback">均</span><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">功</span><span class="mord cjk_fallback">率</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>使用分贝单位描述信噪比, 被称为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mi>d</mi><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{SNR}_{dB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mi>d</mi><mi>B</mi></mrow></msub><mo>=</mo><mn>10</mn><mo>×</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn></msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow></mrow><annotation encoding="application/x-tex">{SNR}_{dB} = 10 \times \log_{10}{SNR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></span></span></p><h3 id="数据速率限制-imp"><a class="markdownIt-Anchor" href="#数据速率限制-imp"></a> 数据速率限制 [IMP]</h3><p>取决于三个因素: 有效带宽, 使用的信号电平数, 信道的质量 (噪声有多大)</p><p>下面 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 表示带宽, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 表示比特率, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 表示使用的信号电平的数量, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">SNR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 表示信噪比</p><h4 id="无噪声通道-奈奎斯特比特率"><a class="markdownIt-Anchor" href="#无噪声通道-奈奎斯特比特率"></a> 无噪声通道: 奈奎斯特比特率</h4><p>对无噪声通道, 奈奎斯特比特率公式给出了理论上的最大比特率:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>=</mo><mn>2</mn><mo>×</mo><mi>B</mi><mo>×</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>L</mi></mrow><annotation encoding="application/x-tex">N = 2 \times B \times \log_{2}L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">L</span></span></span></span></span></p><p>在带宽一定时, 通过增加 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 可以提高传输速率, 但会让接收方难以区分, 降低可靠性</p><h4 id="有噪声通道-香农容量定理"><a class="markdownIt-Anchor" href="#有噪声通道-香农容量定理"></a> 有噪声通道: 香农容量定理</h4><p>香农容量定理给出了有噪声通道的通道容量:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">通</mi><mi mathvariant="normal">道</mi><mi mathvariant="normal">容</mi><mi mathvariant="normal">量</mi><mo>=</mo><mi>B</mi><mo>×</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>S</mi><mi>N</mi><mi>R</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">通道容量 = B \times \log_{2}{(1 + SNR)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">道</span><span class="mord cjk_fallback">容</span><span class="mord cjk_fallback">量</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span></span></span></p><p>公式与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 无关, 说明无论使用多少电平都无法获得超过通道容量的数据传输速率</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">SNR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 很大时, 有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>N</mi><mi>R</mi><mo>≈</mo><mi>S</mi><mi>N</mi><mi>R</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">SNR \approx SNR+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 所以通道容量可化简为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">通</mi><mi mathvariant="normal">道</mi><mi mathvariant="normal">容</mi><mi mathvariant="normal">量</mi><mo>=</mo><mi>B</mi><mo>×</mo><mfrac><msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mtext>&nbsp;</mtext><mtext mathvariant="bold">dB</mtext><mtext>&nbsp;</mtext></mrow></msub><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">通道容量 = B \times \frac{ {SNR}_\textbf{ {dB} } }{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">道</span><span class="mord cjk_fallback">容</span><span class="mord cjk_fallback">量</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord textbf mtight">&nbsp;</span><span class="mord mtight"><span class="mord textbf mtight">d</span><span class="mord textbf mtight">B</span></span><span class="mord textbf mtight">&nbsp;</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>注意此时使用的是 <strong>SNR <sub>dB</sub></strong></p><h4 id="总结-imp"><a class="markdownIt-Anchor" href="#总结-imp"></a> 总结 [IMP]</h4><p>香农定理给出数据传输速率的上限, 奈奎斯特公式给出所需的信号电平数</p><h3 id="性能"><a class="markdownIt-Anchor" href="#性能"></a> 性能</h3><h4 id="带宽"><a class="markdownIt-Anchor" href="#带宽"></a> 带宽</h4><p>可以指两个东西: 以频率衡量, 或以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">bps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span></span></span></span> 衡量<br>前者表明通道的频率范围, 后者表明每秒能发送的位数</p><h4 id="吞吐量"><a class="markdownIt-Anchor" href="#吞吐量"></a> 吞吐量</h4><p>衡量通过网络发送数据的快慢, 必定小于等于带宽</p><h4 id="延迟"><a class="markdownIt-Anchor" href="#延迟"></a> 延迟</h4><p>第一个位从源端到最后一个位 (即整个报文) 到达目的端的时间, 由四部分组成</p><h5 id="传播时间"><a class="markdownIt-Anchor" href="#传播时间"></a> 传播时间</h5><p>介质中一个位从源端到目标的时间</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">距</mi><mi mathvariant="normal">离</mi></mrow><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">度</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">传播时间 = \frac{距离}{传播速度}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.363em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">度</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">距</span><span class="mord cjk_fallback">离</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h5 id="传输时间"><a class="markdownIt-Anchor" href="#传输时间"></a> 传输时间</h5><p>报文的第一个位与最后一个位离开发送方的时间, 也就是发送方把报文加载到介质上所用的时间</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">输</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">报</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">长</mi><mi mathvariant="normal">度</mi></mrow><mrow><mi mathvariant="normal">带</mi><mi mathvariant="normal">宽</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">传输时间 = \frac{报文长度}{带宽}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.363em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">宽</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">报</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">长</span><span class="mord cjk_fallback">度</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h5 id="排队时间"><a class="markdownIt-Anchor" href="#排队时间"></a> 排队时间</h5><p>网络上每个中间设备在收到本报文后, 处理本报文前的时间 (因为有其他先到的报文等待处理)</p><h5 id="处理延迟"><a class="markdownIt-Anchor" href="#处理延迟"></a> 处理延迟</h5><p>接收者处理报文所用的时间 (书上不知道为啥没写这点…)</p><h4 id="带宽与延迟的乘积"><a class="markdownIt-Anchor" href="#带宽与延迟的乘积"></a> 带宽与延迟的乘积</h4><p>充满整个链路的位的个数</p><h2 id="chapter-4-数字传输"><a class="markdownIt-Anchor" href="#chapter-4-数字传输"></a> Chapter 4 数字传输</h2><h3 id="线路编码"><a class="markdownIt-Anchor" href="#线路编码"></a> 线路编码</h3><h4 id="数据元素与信号元素-imp"><a class="markdownIt-Anchor" href="#数据元素与信号元素-imp"></a> 数据元素与信号元素 [IMP]</h4><ul><li>数据元素: 表示信息的最小实体, 即位</li><li>信号元素: 发送的最小单元</li></ul><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>: 每个信号元素承载的数据元素的数量</p><h5 id="数据速率与信号速率"><a class="markdownIt-Anchor" href="#数据速率与信号速率"></a> 数据速率与信号速率</h5><ul><li>数据速率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> : 每秒发送的数据元素的数量, 单位是 <em>每秒位 (bps)</em>, 也称作<strong>比特率</strong></li><li>信号速率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> : 每秒发送的信号元素的数量, 单位是 <em>波特 (baud)</em>, 也称作调制速率, <strong>波特率</strong></li><li>情形因子 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> : 会根据每种情形改变</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>c</mi><mo>×</mo><mi>N</mi><mo>×</mo><mfrac><mn>1</mn><mi>r</mi></mfrac><mtext>&nbsp;&nbsp;</mtext><mi>b</mi><mi>a</mi><mi>u</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">S = c \times N \times \frac{1}{r} \ \ baud</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace">&nbsp;</span><span class="mspace">&nbsp;</span><span class="mord mathdefault">b</span><span class="mord mathdefault">a</span><span class="mord mathdefault">u</span><span class="mord mathdefault">d</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>B</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><mi>c</mi><mo>×</mo><mi>N</mi><mo>×</mo><mfrac><mn>1</mn><mi>r</mi></mfrac></mrow><annotation encoding="application/x-tex">B_{min} = c \times N \times \frac{1}{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>注意第二个公式和奈奎斯特公式的关系 (可以相互推导, 书 p69 中间 例4.2)</p><h4 id="基线偏移"><a class="markdownIt-Anchor" href="#基线偏移"></a> 基线偏移</h4><ul><li>基线偏移: 接收方通过计算接收的信号的功率平均值 (即"基线") 来确定高低电平, 连续的 0 或者 1 会影响基线</li><li>直流成分: 信号中的电平保持一定时间的恒定时, 会产生很低的频率, 近似直流 (DC)</li></ul><h4 id="自同步"><a class="markdownIt-Anchor" href="#自同步"></a> 自同步</h4><p>通过在信号中添加能提示接收方的定时信息来实现双方的时钟同步</p><h3 id="线路编码-imp"><a class="markdownIt-Anchor" href="#线路编码-imp"></a> 线路编码 [IMP]</h3><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210615193504.png" alt="编码方案"></p><h4 id="nrz-不归零编码"><a class="markdownIt-Anchor" href="#nrz-不归零编码"></a> NRZ (不归零编码)</h4><p>1 为正电平, 0 为零电平, 因为在位中间电平不为零而得名</p><h5 id="nrz-l-与-nrz-i"><a class="markdownIt-Anchor" href="#nrz-l-与-nrz-i"></a> NRZ-L 与 NRZ-I</h5><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210615193725.png" alt="NRZ-L/I"></p><p>NRZ-L 中电平决定位的值, NRZ-I 中每一个周期的电平和前一个周期相比是否反转决定位的值</p><ul><li>基线偏移: 均有, 但 NRZ-I 中仅全 0 的序列会导致偏移</li><li>同步问题: 均有, 但 NRZ-I 中仅全 0 的序列会导致同步问题</li><li>直流成分: 均有</li><li>平均信号速率: 均为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mn>2</mn><mtext>&nbsp;</mtext><mrow><mi>B</mi><mi>d</mi></mrow></mrow><annotation encoding="application/x-tex">N/2 \ {Bd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord">2</span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">d</span></span></span></span></span></li></ul><blockquote><p>因为全 0 时 NRZ-I 的电平不变, 但全 1 时能一直反转</p></blockquote><h4 id="rz-归零编码"><a class="markdownIt-Anchor" href="#rz-归零编码"></a> RZ (归零编码)</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210615194511.png" alt="RZ"></p><p>在位中间信号必定归零, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">r = \frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h4 id="曼彻斯特编码-和-差分曼彻斯特编码"><a class="markdownIt-Anchor" href="#曼彻斯特编码-和-差分曼彻斯特编码"></a> 曼彻斯特编码 和 差分曼彻斯特编码</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210615194637.png" alt="Manchester/DiffMan"></p><ul><li>双向编码, 也称作两项编码</li><li>均有自同步信号</li><li>均无直流成分</li><li>平均信号速率: 均为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mtext>&nbsp;</mtext><mrow><mi>B</mi><mi>d</mi></mrow></mrow><annotation encoding="application/x-tex">N \ {Bd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">d</span></span></span></span></span></li></ul><h5 id="曼彻斯特编码"><a class="markdownIt-Anchor" href="#曼彻斯特编码"></a> 曼彻斯特编码</h5><ul><li>RZ 和 NRZ-L 思想组合而成</li><li>位中间的跳变提供了自同步信号</li></ul><h5 id="差分曼彻斯特编码"><a class="markdownIt-Anchor" href="#差分曼彻斯特编码"></a> 差分曼彻斯特编码</h5><ul><li>RZ 和 NRZ-I 思想组合而成</li><li>位中间的跳变提供了自同步信号</li></ul><h4 id="ami-和-伪三元编码"><a class="markdownIt-Anchor" href="#ami-和-伪三元编码"></a> AMI 和 伪三元编码</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210615195837.png" alt="AMI/Pseudo"></p><ul><li>双极性编码, 使用三种电平 (正, 负, 零)</li><li>0 和 1 其中一个电平固定为0, 另一个由交替的正负电平表示</li><li>AMI 没有直流成分 (因为长 0 的电平为零, 长 1 正负交替抵消了)</li><li>AMI 在长 0 序列中存在同步问题, 采用扰动解决</li><li>平均信号速率: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi mathvariant="normal">/</mi><mn>2</mn><mtext>&nbsp;</mtext><mrow><mi>B</mi><mi>d</mi></mrow></mrow><annotation encoding="application/x-tex">N/2 \ {Bd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">/</span><span class="mord">2</span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">d</span></span></span></span></span></li></ul><h4 id="多电平与多线路编码"><a class="markdownIt-Anchor" href="#多电平与多线路编码"></a> 多电平与多线路编码</h4><p>按老师给的 pdf 仅要求了解, 看书就行</p><h4 id="线路编码-总结"><a class="markdownIt-Anchor" href="#线路编码-总结"></a> 线路编码 总结</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210615200432.png" alt="Summary"></p><blockquote><p>Biphase: 双向, 即曼彻斯特编码 和 差分曼彻斯特编码</p></blockquote><h3 id="块编码"><a class="markdownIt-Anchor" href="#块编码"></a> 块编码</h3><p>按老师给的 pdf 仅要求了解, 看书就行</p><h3 id="扰码"><a class="markdownIt-Anchor" href="#扰码"></a> 扰码</h3><p>建议看书 😵, p79</p><h3 id="脉冲码调制-pcm"><a class="markdownIt-Anchor" href="#脉冲码调制-pcm"></a> 脉冲码调制 (PCM)</h3><p>将模拟信号转为数字信号的最常用方法, 分为三步: <strong>采样  量化  编码</strong></p><h4 id="采样"><a class="markdownIt-Anchor" href="#采样"></a> 采样</h4><p>也被称作 脉冲振幅调制 (PAM)</p><ul><li>采样率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">f_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> : 每隔 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">T_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 对模拟信号进行采样, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>S</mi></msub><mo>=</mo><mfrac><mn>1</mn><msub><mi>T</mi><mi>S</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">f_S = \frac{1}{T_S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.290413em;vertical-align:-0.44530499999999995em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44530499999999995em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>奈奎斯特采样定理: <strong>采样速率至少是信号所含最高频率的两倍</strong></li></ul><h4 id="量化"><a class="markdownIt-Anchor" href="#量化"></a> 量化</h4><ol><li>假定原始信号在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>V</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo separator="true">,</mo><msub><mi>V</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[V_{min}, V_{max}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 范围中</li><li>将范围等分为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 个区间 (称为量化等级), 每个区间的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span></span></span></span></li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi><mo>=</mo><mfrac><mrow><msub><mi>V</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>−</mo><msub><mi>V</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><mi>L</mi></mfrac></mrow><annotation encoding="application/x-tex">delta = \frac{V_{max} - V_{min}}{L}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">L</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ol start="3"><li>取每个区间的中点作为每个区间的量化值, 然后将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>∼</mo><mi>L</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0 \sim L-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的量化值分配给这些区间</li><li>将样本的振幅近似为量化值</li></ol><blockquote><p>建议参考 p83 的例子</p></blockquote><h5 id="量化误差"><a class="markdownIt-Anchor" href="#量化误差"></a> 量化误差</h5><ul><li>任何一个样本的误差值都小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{delta}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>量化误差对信号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mi>d</mi><mi>B</mi></mrow></msub></mrow><annotation encoding="application/x-tex">{SNR}_{dB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的影响取决于量化级别 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> 或每个样本的位数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">n_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi>S</mi><mi>N</mi><mi>R</mi></mrow><mrow><mi>d</mi><mi>B</mi></mrow></msub><mo>=</mo><mn>6.02</mn><mtext>&nbsp;</mtext><msub><mi>n</mi><mi>b</mi></msub><mo>+</mo><mn>1.76</mn><mtext>&nbsp;&nbsp;</mtext><mi>d</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">{SNR}_{dB} = 6.02\ n_b + 1.76 \ \ dB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">6</span><span class="mord">.</span><span class="mord">0</span><span class="mord">2</span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">7</span><span class="mord">6</span><span class="mspace">&nbsp;</span><span class="mspace">&nbsp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></span></p><h4 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h4><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>=</mo><msub><mi>f</mi><mi>S</mi></msub><mo>×</mo><msub><mi>n</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">N = f_S \times n_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 为编码后的比特率</p><h4 id="delta-调制"><a class="markdownIt-Anchor" href="#delta-调制"></a> Delta 调制</h4><p>对量化后的信号, 调制器内的比较器把它和一个梯形的基准信号进行比较, 前者大则为 1, 反之为 0.</p><p>梯形基准信号来自于调制器自身的输出, 1 为上升, 0 为下降, 变化量即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mi>t</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span></span></span></span>, 经过延迟后送入比较器.</p><p>Delta 调制同样存在量化误差, 但是远小于 PCM 的误差.</p><h3 id="传输模式-imp"><a class="markdownIt-Anchor" href="#传输模式-imp"></a> 传输模式 [IMP]</h3><h4 id="串行与并行"><a class="markdownIt-Anchor" href="#串行与并行"></a> 串行与并行</h4><ul><li>并行: 利用多个通道, 每次发送多个位</li><li>串行: 仅需一个通道, 每次仅发送一个位, 可采用同步, 异步或等时传输</li></ul><h4 id="同步与异步"><a class="markdownIt-Anchor" href="#同步与异步"></a> 同步与异步</h4><ul><li>异步: 将位流组合成组 (通常称为字节), 需要起始位和停止位, 不需要关心时序</li><li>同步: 将位流组合成帧 (更长, 包含多个字节), 没有时隙, 起始位与停止位</li><li>等时: 数据以恒定速率到达</li></ul><h2 id="chapter-5-模拟传输"><a class="markdownIt-Anchor" href="#chapter-5-模拟传输"></a> Chapter 5 模拟传输</h2><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210616184347.png" alt="AnalogTrans"></p><h3 id="比特率和波特率-imp"><a class="markdownIt-Anchor" href="#比特率和波特率-imp"></a> 比特率和波特率 [IMP]</h3><p>定义带宽为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></p><ul><li>比特率: 数据速率, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></li><li>波特率: 信号速率, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>N</mi><mo>×</mo><mfrac><mn>1</mn><mi>r</mi></mfrac><mtext>&nbsp;&nbsp;</mtext><mi mathvariant="normal">波</mi><mi mathvariant="normal">特</mi></mrow><annotation encoding="application/x-tex">S=N \times \frac{1}{r} \ \ 波特</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace">&nbsp;</span><span class="mspace">&nbsp;</span><span class="mord cjk_fallback">波</span><span class="mord cjk_fallback">特</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>=</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>L</mi><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>L</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">信</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">元</mi><mi mathvariant="normal">素</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">种</mi><mi mathvariant="normal">类</mi><mi mathvariant="normal">数</mi></mrow><annotation encoding="application/x-tex">r = \log_2{L},\  L为信号元素的种类数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">L</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">L</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">元</span><span class="mord cjk_fallback">素</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">种</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">数</span></span></span></span></span></p><h3 id="幅移键控-ask-imp"><a class="markdownIt-Anchor" href="#幅移键控-ask-imp"></a> 幅移键控 (ASK) [IMP]</h3><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210616184439.png" alt="ASK"></p><ul><li>仅通过改变信号的振幅来生成信号元素, 不改变频率 相位等</li><li>若仅有两个振幅, 则称为 BASK (二进制 ASK) 或 OOK (开关键控)</li><li>带宽: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>d</mi><mo stretchy="false">)</mo><mo>×</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">B=(1+d) \times S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d \in [0, 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> , 取决于调制和过滤处理</li><li>载波频率 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mi>c</mi></msub></mrow><annotation encoding="application/x-tex">f_c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 位于带宽中间</li></ul><h3 id="频移键控-fsk-imp"><a class="markdownIt-Anchor" href="#频移键控-fsk-imp"></a> 频移键控 (FSK) [IMP]</h3><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210616184518.png" alt="FSK"></p><ul><li>使用多种频率, 一种振幅, 若相邻两信号元素间相位一致, 称为"相干", 反之为"非相干"</li><li>若仅有两个频率, 则称为 BFSK (二进制 FSK)</li><li>带宽: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>d</mi><mo stretchy="false">)</mo><mo>×</mo><mi>S</mi><mo>+</mo><mn>2</mn><mi>D</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">B=(1+d) \times S + 2Df</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>D</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">2Df</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 为两个载波频率之差, 最小即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> (此时两个段紧贴)</li></ul><h3 id="相移键控-psk-imp"><a class="markdownIt-Anchor" href="#相移键控-psk-imp"></a> 相移键控 (PSK) [IMP]</h3><h4 id="二进制psk-bpsk"><a class="markdownIt-Anchor" href="#二进制psk-bpsk"></a> 二进制PSK (BPSK)</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210616185709.png" alt="BPSK"></p><ul><li>仅使用两个不同的相位: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">0 \degree</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">°</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>180</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">180 \degree</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mord">0</span><span class="mord">°</span></span></span></span></li><li>带宽: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>d</mi><mo stretchy="false">)</mo><mo>×</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">B=(1+d) \times S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>, 和 BASK 一样, 但抗噪声能力更强</li></ul><h4 id="正交psk-qpsk"><a class="markdownIt-Anchor" href="#正交psk-qpsk"></a> 正交PSK (QPSK)</h4><ul><li>使用两个独立的 BPSK 调制, 一个同相一个正交 (即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>90</mn><mi mathvariant="normal">°</mi></mrow><annotation encoding="application/x-tex">90\degree</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">0</span><span class="mord">°</span></span></span></span>)</li><li>带宽: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>d</mi><mo stretchy="false">)</mo><mo>×</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">B=(1+d) \times S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span>, 和 BFSK 一样</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>r</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">L=4, \ r = 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></li></ul><h4 id="星座图"><a class="markdownIt-Anchor" href="#星座图"></a> 星座图</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210616190219.png" alt="Constellation"></p><ul><li>X 轴为同相成分振幅, Y 轴为正交成分振幅</li><li>与原点距离为总振幅, 与 X 轴正半轴夹角为相位</li></ul><h3 id="正交振幅调制-qam-imp"><a class="markdownIt-Anchor" href="#正交振幅调制-qam-imp"></a> 正交振幅调制 (QAM) [IMP]</h3><ul><li>结合了 ASK 和 PSK 的理念, 同时利用了振幅和相位的变化</li><li>最小带宽: 和 ASK, PSK 相同 (忘了的话往前看看)</li></ul><h3 id="模拟信号调制"><a class="markdownIt-Anchor" href="#模拟信号调制"></a> 模拟信号调制</h3><p>AM, FM, PM, 提纲完全没提, 自己看一下书 p99 ~ p102 就行</p><h2 id="chapter-6-带宽利用"><a class="markdownIt-Anchor" href="#chapter-6-带宽利用"></a> Chapter 6 带宽利用</h2><h3 id="fdm-频分复用-imp"><a class="markdownIt-Anchor" href="#fdm-频分复用-imp"></a> FDM (频分复用) [IMP]</h3><ul><li>在同一介质上使用不同的频率传输信号</li><li>是模拟复用技术 (直接发送的是模拟信号, 因此数字信号需要先调制)</li><li>在分离时通过特定频段的滤波器实现通道分离</li><li>复用的要求<ul><li>链路带宽大于要传输的信号带宽之和</li><li>载波信号之间的频率差必须能容纳调制信号的带宽 (不发生重叠)</li><li>载波频率不影响原始的数据频率</li></ul></li></ul><h3 id="tdm-时分复用-imp"><a class="markdownIt-Anchor" href="#tdm-时分复用-imp"></a> TDM (时分复用) [IMP]</h3><ul><li>数字化复用过程</li><li>每个连接占用链路的一个时间段</li></ul><h4 id="同步-tdm"><a class="markdownIt-Anchor" href="#同步-tdm"></a> 同步 TDM</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617185037.png" alt="S-TDM"></p><ul><li>每个输入的数据流划分为多个数据单元</li><li>所有输入的数据单元按照顺序组合成一个帧, 每个数据单元占一个<strong>时隙</strong></li><li>若有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个输入, 一帧的持续时间为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>:<ul><li>一帧中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个时隙</li><li>每个时隙的持续时间是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">T/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">/</span><span class="mord mathdefault">n</span></span></span></span></li><li>链路速率是每个连接数据速率的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 倍</li></ul></li><li>需要在每帧开始的时候添加一些用来同步的<strong>帧指示位</strong></li><li>缺点: 当某个连接无数据发送时会出现<strong>空时隙</strong></li></ul><h5 id="t-1-帧-imp"><a class="markdownIt-Anchor" href="#t-1-帧-imp"></a> T-1 帧 [IMP]</h5><ul><li>将 24 路语音信号通过 TDM 组合为 1 路</li><li>采样: 每秒 8000 次, 每样本 8 位</li><li>每秒发送 8000 帧, 链路带宽 1.544 Mbps</li></ul><p>帧大小: 193位, 其中 1 位用于同步</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover><mover><mn>24</mn><mo stretchy="true">⏞</mo></mover><mrow><mi mathvariant="normal">通</mi><mi mathvariant="normal">道</mi><mi mathvariant="normal">数</mi></mrow></mover><mo>×</mo><mover><mover><mn>8</mn><mo stretchy="true">⏞</mo></mover><mrow><mi mathvariant="normal">样</mi><mi mathvariant="normal">本</mi><mi mathvariant="normal">大</mi><mi mathvariant="normal">小</mi></mrow></mover><mo>+</mo><mover><mover><mn>1</mn><mo stretchy="true">⏞</mo></mover><mrow><mi mathvariant="normal">同</mi><mi mathvariant="normal">步</mi><mi mathvariant="normal">位</mi></mrow></mover><mo>=</mo><mn>193</mn></mrow><annotation encoding="application/x-tex">\overbrace{24}^{通道数} \times \overbrace{8}^{样本大小} + \overbrace{1}^{同步位} = 193</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.57577em;vertical-align:-0.08333em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.49244em;"><span style="top:-3.29244em;"><span class="pstrut" style="height:3.29244em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.29244em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">4</span></span></span><span class="svg-align" style="top:-3.74444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMinYMin slice"><path d="M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z"></path></svg></span><span class="brace-center" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMidYMin slice"><path d="M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z"></path></svg></span><span class="brace-right" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMaxYMin slice"><path d="M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z"></path></svg></span></span></span></span></span></span></span></span><span style="top:-4.78488em;"><span class="pstrut" style="height:3.29244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">通</span><span class="mord cjk_fallback mtight">道</span><span class="mord cjk_fallback mtight">数</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.57577em;vertical-align:-0.08333em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.49244em;"><span style="top:-3.29244em;"><span class="pstrut" style="height:3.29244em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.29244em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span class="svg-align" style="top:-3.74444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMinYMin slice"><path d="M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z"></path></svg></span><span class="brace-center" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMidYMin slice"><path d="M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z"></path></svg></span><span class="brace-right" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMaxYMin slice"><path d="M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z"></path></svg></span></span></span></span></span></span></span></span><span style="top:-4.78488em;"><span class="pstrut" style="height:3.29244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">样</span><span class="mord cjk_fallback mtight">本</span><span class="mord cjk_fallback mtight">大</span><span class="mord cjk_fallback mtight">小</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.49244em;vertical-align:0em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.49244em;"><span style="top:-3.29244em;"><span class="pstrut" style="height:3.29244em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.29244em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span class="svg-align" style="top:-3.74444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMinYMin slice"><path d="M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z"></path></svg></span><span class="brace-center" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMidYMin slice"><path d="M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z"></path></svg></span><span class="brace-right" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMaxYMin slice"><path d="M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z"></path></svg></span></span></span></span></span></span></span></span><span style="top:-4.78488em;"><span class="pstrut" style="height:3.29244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">同</span><span class="mord cjk_fallback mtight">步</span><span class="mord cjk_fallback mtight">位</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mord">3</span></span></span></span></span></p><p>带宽: 1.544 Mbps</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>193</mn><mtext>&nbsp;</mtext><mi>b</mi><mi>p</mi><mi>s</mi><mo>×</mo><mover><mover><mn>8000</mn><mo stretchy="true">⏞</mo></mover><mrow><mi mathvariant="normal">每</mi><mi mathvariant="normal">秒</mi><mi mathvariant="normal">帧</mi><mi mathvariant="normal">数</mi></mrow></mover><mo>=</mo><mn>1.544</mn><mtext>&nbsp;</mtext><mi>M</mi><mi>b</mi><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">193 \ bps \times \overbrace{8000}^{每秒帧数} = 1.544 \ Mbps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">9</span><span class="mord">3</span><span class="mspace">&nbsp;</span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.49244em;vertical-align:0em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.49244em;"><span style="top:-3.29244em;"><span class="pstrut" style="height:3.29244em;"></span><span class="mord mover"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.29244em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span><span class="svg-align" style="top:-3.74444em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMinYMin slice"><path d="M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7 5-6 9-10 13-.7 1-7.3 1-20 1H6z"></path></svg></span><span class="brace-center" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMidYMin slice"><path d="M200428 334c-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z"></path></svg></span><span class="brace-right" style="height:0.548em;"><svg width="400em" height="0.548em" viewBox="0 0 400000 548" preserveAspectRatio="xMaxYMin slice"><path d="M400000 542l-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5s-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1c124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z"></path></svg></span></span></span></span></span></span></span></span><span style="top:-4.78488em;"><span class="pstrut" style="height:3.29244em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">每</span><span class="mord cjk_fallback mtight">秒</span><span class="mord cjk_fallback mtight">帧</span><span class="mord cjk_fallback mtight">数</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span><span class="mord">4</span><span class="mord">4</span><span class="mspace">&nbsp;</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">b</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span></span></span></span></span></p><h5 id="e-线路"><a class="markdownIt-Anchor" href="#e-线路"></a> E 线路</h5><p>T 线路的欧洲版本, 原理与概念相同, 但是容量不同</p><h4 id="统计-tdm"><a class="markdownIt-Anchor" href="#统计-tdm"></a> 统计 TDM</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617191722.png" alt="Stat-TDM"></p><ul><li>循环检测每个输入, 若某输入无数据则不分配时隙 -&gt; 避免了空时隙</li><li>每个时隙需要添加地址, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个输入需要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log_2{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span></span></span> 位地址</li><li><strong>没有同步位, 因为统计 TDM 不依赖时间同步来拆分数据</strong></li><li>链路容量可以小于输入的带宽之和 (因为无数据就不分配时隙了)</li></ul><h3 id="wdm-波分复用"><a class="markdownIt-Anchor" href="#wdm-波分复用"></a> WDM (波分复用)</h3><p>以光线为介质, 通过不同波长的频率实现复用, 和 FDM 类似</p><h3 id="扩频"><a class="markdownIt-Anchor" href="#扩频"></a> 扩频</h3><h4 id="跳频扩频-fhss"><a class="markdownIt-Anchor" href="#跳频扩频-fhss"></a> 跳频扩频 (FHSS)</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617192640.png" alt="FHSS"></p><ul><li>通过伪随机噪声在频率表中选择一个频率</li><li>在一段时间内 (称为跳), 将源信号使用选出的频率进行调制</li><li>伪随机噪声周期性重复</li><li>通过多频率FSK可以实现带宽共享</li></ul><h4 id="直接序列扩频"><a class="markdownIt-Anchor" href="#直接序列扩频"></a> 直接序列扩频</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617193003.png" alt="DSSS"></p><ul><li>使用固定的扩频码对源信号进行调制</li><li>每个数据位使用扩频码的n位代替</li></ul><h2 id="chapter-7-传输介质"><a class="markdownIt-Anchor" href="#chapter-7-传输介质"></a> Chapter 7 传输介质</h2><h3 id="有向介质"><a class="markdownIt-Anchor" href="#有向介质"></a> 有向介质</h3><ul><li>在设备间提供通路的介质</li><li>包括双绞线, 同轴电缆, 光缆</li></ul><h4 id="双绞线-imp"><a class="markdownIt-Anchor" href="#双绞线-imp"></a> 双绞线 [IMP]</h4><ul><li>由两条导线缠绕在一起组成</li><li>通过缠绕可以保证两条线受到的外部影响 (例如噪声) 一致, 故绞合密度越高质量越高</li><li>分为非屏蔽双绞线 (UTP) 和屏蔽双绞线 (STP), 前者更常用, 后者用金属屏蔽层包裹每一对双绞线</li><li>最常用的连接器是 RJ45 (就是最常见的那个网线接头, 8根线)</li></ul><h4 id="同轴线缆"><a class="markdownIt-Anchor" href="#同轴线缆"></a> 同轴线缆</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617210129.png" alt="CCable"></p><ul><li>仅使用中央的一根实心 (或者是多股绞合的金属丝) 导体, 外面有金属屏蔽层</li><li>使用 BNC 连接器, 带宽高但衰减大</li></ul><h4 id="光纤"><a class="markdownIt-Anchor" href="#光纤"></a> 光纤</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617210412.png" alt="Fiber"></p><ul><li>通过传导光实现通信, 带宽很大</li><li>分为单模光纤和多模光纤<ul><li>单模: 光束接近水平, 几乎均沿中间传播</li><li>多模: 多个光束沿着不同路径, 依赖折射</li></ul></li></ul><h3 id="无线通信"><a class="markdownIt-Anchor" href="#无线通信"></a> 无线通信</h3><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617210557.png" alt="ElecSpectrum"></p><ul><li>无线电波: 3 kHz ~ 1 GHz, 大部分全方向</li><li>微波: 1 GHz ~ 300 GHz, 指向性强, 使用单向天线 (定向天线)</li><li>红外: 300 GHz ~ 400 THz, 视线传播, 太阳会干扰</li></ul><h2 id="chapter-8-交换"><a class="markdownIt-Anchor" href="#chapter-8-交换"></a> Chapter 8 交换</h2><h3 id="电路交换-imp"><a class="markdownIt-Anchor" href="#电路交换-imp"></a> 电路交换 [IMP]</h3><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617211550.png" alt="CircuitExchange"></p><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617211411.png" alt="CircuitExchange"></p><ul><li>在物理层, 由物理链路连接的一组交换机组成, 链路会被复用</li><li>在通信开始前要预先建立通道, 在整个传输过程中一直保留, 直到最后的拆除阶段</li><li>数据传输期间无需寻址, 建立时需要端到端的寻址</li><li>延迟:<ul><li>源计算机请求信息到目标计算机</li><li>目标计算机确认信息到源计算机</li><li>数据传输时间</li><li>拆除信息从一端到另一端的时间</li></ul></li></ul><h3 id="数据报交换-imp"><a class="markdownIt-Anchor" href="#数据报交换-imp"></a> 数据报交换 [IMP]</h3><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617212244.png" alt="DatagramExchange"></p><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617212312.png" alt="DatagramExchange"></p><ul><li>在网络层, <strong>是因特网在网络层采用的交换方法</strong></li><li>不需要建立连接, 也不需要拆除 (也被称作无连接网络, 交换机不保存连接信息), 按需分配资源, 先来先服务</li><li>各分组单独处理 (即使某个分组是某个多分组传输的一部分), 到达同一目的地的路径可能不一致<ul><li>可能会出现分组丢失或错序, 由上层协议负责修正</li></ul></li><li>交换机使用基于目的地址的路由表, 它记载了目的地址和交换机端口的对应关系</li><li>延迟:<ul><li>各交换机的排队与处理延迟</li><li>传输时间</li></ul></li></ul><h3 id="虚电路网络-imp"><a class="markdownIt-Anchor" href="#虚电路网络-imp"></a> 虚电路网络 [IMP]</h3><blockquote><p>建议看书, p143 ~ p147, 提纲仅作为总结</p></blockquote><ul><li>结合了电路交换与数据报交换</li><li>通常在数据链路层实现, 但未来可能变化</li><li>需要在数据传输前建立连接</li></ul><h4 id="编址"><a class="markdownIt-Anchor" href="#编址"></a> 编址</h4><ul><li>全局编址: 源端和目的端的地址, 广域网唯一</li><li>虚电路标识符: 仅在两交换机间有效, 作为帧前的标识符</li><li>交换机的表: 不是路由表, 有四列: 输入端口, 输入VCI, 输出端口, 输出VCI</li></ul><h4 id="连接建立"><a class="markdownIt-Anchor" href="#连接建立"></a> 连接建立</h4><p>设源端为 A, 目的端为 B</p><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617214418.png" alt="setup1"></p><ol><li>A 向交换机 1 发送建立连接帧</li><li>交换机1从端口1接受帧, 分配一个VCI, 通过路由表得到应发往端口3, 但输出VCI留空</li><li>交换机2~3相同</li></ol><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210617214431.png" alt="setup2"></p><ol start="4"><li>B 收到建立连接帧, 给从 A 来的帧分配一个VCI, 发给交换机3</li><li>交换机3接受, 得到表中缺失的VCI项, 发给交换机2</li><li>交换机1~2相同, A 收到确认, 之后向 B 发送的帧使用交换机1指定的VCI, 连接建立</li></ol><h4 id="连接拆除"><a class="markdownIt-Anchor" href="#连接拆除"></a> 连接拆除</h4><p>同样是请求 - 确认两步</p><h4 id="延迟-2"><a class="markdownIt-Anchor" href="#延迟-2"></a> 延迟</h4><p>类似数据报交换, 建立 + 传输 + 拆除, 如果预留资源的话没有等待延迟</p><h3 id="交换机结构"><a class="markdownIt-Anchor" href="#交换机结构"></a> 交换机结构</h3><p>提纲没有, 看两眼书就行</p><h3 id="chapter-9-使用电话网和有线电视网进行数据传输"><a class="markdownIt-Anchor" href="#chapter-9-使用电话网和有线电视网进行数据传输"></a> Chapter 9 使用电话网和有线电视网进行数据传输</h3><h4 id="信令的概念-imp"><a class="markdownIt-Anchor" href="#信令的概念-imp"></a> 信令的概念 [IMP]</h4><blockquote><p>信令: 指为使通信网中各种设备协调运作，在设备之间传递的有关控制信息<br>- 来自维基百科</p></blockquote><p>简单来说, 信令就是用来控制设备的指令信息</p><ul><li>带内信令: 用和数据通信同一链路传递的信令</li><li>带外信令: 和数据通信用不同链路传递的信令, 是现代电话网采用的方式</li></ul><h4 id="调制与解调"><a class="markdownIt-Anchor" href="#调制与解调"></a> 调制与解调</h4><ul><li>调制: 从二进制数据生成带通模拟信号</li><li>解调: 👆 反过来</li><li>调制解调器: 调制器 + 解调器, modem</li></ul><h4 id="adsl-非对称数字用户线路"><a class="markdownIt-Anchor" href="#adsl-非对称数字用户线路"></a> ADSL (非对称数字用户线路)</h4><ul><li>属于 DSL 技术之一</li><li>下行速率比上行快 (所以是非对称)</li><li>需要调制解调器</li></ul><h1 id="part-3-数据链路层"><a class="markdownIt-Anchor" href="#part-3-数据链路层"></a> Part 3 数据链路层</h1><h2 id="chapter-10-检错与纠错"><a class="markdownIt-Anchor" href="#chapter-10-检错与纠错"></a> Chapter 10 检错与纠错</h2><h3 id="差错的类型"><a class="markdownIt-Anchor" href="#差错的类型"></a> 差错的类型</h3><ul><li>单个位差错: 在给定的数据单元中只有一个位出错</li><li>突发性差错: 在给定的数据单元中有两位或更多位出错</li></ul><h3 id="块编码-2"><a class="markdownIt-Anchor" href="#块编码-2"></a> 块编码</h3><p>把报文划分为块, 每个块有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 位, 并增加 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 个冗余位</p><p>总长度: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>k</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">n=k+r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 位的块称为码字</p><h3 id="纠错"><a class="markdownIt-Anchor" href="#纠错"></a> 纠错</h3><ul><li>向前纠错: 接收方利用冗余位推测正确的报文</li><li>重传: 检测出差错后要求发送方重发</li></ul><h4 id="汉明距离"><a class="markdownIt-Anchor" href="#汉明距离"></a> 汉明距离</h4><p>两个相同长度的字中对应位置的位不同的数量, 以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d(x,\ y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 表示</p><p>可以采用异或后计算 1 的个数求得</p><h4 id="最小汉明距离-imp"><a class="markdownIt-Anchor" href="#最小汉明距离-imp"></a> 最小汉明距离 [IMP]</h4><p>所有字两两组合求得的汉明距离的最小值</p><ul><li>为了检测最多 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> 个差错, 块编码中最小汉明距离一定满足 $d_{min} \ge s+1 $</li><li>为了纠正最多 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 个差错, 块编码中最小汉明距离一定满足 $d_{min} \ge 2t+1 $</li></ul><h3 id="线性块编码"><a class="markdownIt-Anchor" href="#线性块编码"></a> 线性块编码</h3><h4 id="简单奇偶校验"><a class="markdownIt-Anchor" href="#简单奇偶校验"></a> 简单奇偶校验</h4><p>添加一位, 使得码字中的 1 为偶数 (或奇数)</p><h4 id="二维奇偶校验"><a class="markdownIt-Anchor" href="#二维奇偶校验"></a> 二维奇偶校验</h4><p>每一行和每一列均进行一次奇偶校验, 同时角落上的那个按照列进行校验</p><p>四位差错可能检测不到</p><h4 id="汉明编码"><a class="markdownIt-Anchor" href="#汉明编码"></a> 汉明编码</h4><p>看计组书吧, 这里对计网来说不是重点</p><h3 id="循环冗余校验-crc"><a class="markdownIt-Anchor" href="#循环冗余校验-crc"></a> 循环冗余校验 (CRC)</h3><p>假设有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 位数据, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 位码字, 校验码有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n-k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 位</p><h4 id="计算-imp"><a class="markdownIt-Anchor" href="#计算-imp"></a> 计算 [IMP]</h4><ol><li><p>将数据字右侧补 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n-k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 位零</p></li><li><p>对 1 的结果除以除数</p><ul><li>因为是模 2 的二进制除法, 所以加减都等价于异或运算</li><li>若最左侧的位为 0, 则商 0, 否则商 1</li><li>每一步保留后 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 位, 然后最后一位从被除数中对应位置移下来</li></ul></li><li><p>当没有可移下来的位时, 计算完成, 余数即为结果</p></li></ol><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210618003752.png" alt="CRC"></p><h5 id="多项式除法"><a class="markdownIt-Anchor" href="#多项式除法"></a> 多项式除法</h5><ul><li>每一项的幂次表示在二进制表示法中对应的位置, 若该项系数为 1 则对应位为 1</li><li>和上面的二进制算法本质一样</li><li>同样用异或代替加减法, 所以不会有负的系数</li></ul><h4 id="差错检测能力"><a class="markdownIt-Anchor" href="#差错检测能力"></a> 差错检测能力</h4><h5 id="单个位差错"><a class="markdownIt-Anchor" href="#单个位差错"></a> 单个位差错</h5><p>若 <strong>生成多项式至少两项</strong> 且 <strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">x^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>的系数为 1</strong>, 则所有的单个位差错均可检测</p><h5 id="两个独立的单个位差错"><a class="markdownIt-Anchor" href="#两个独立的单个位差错"></a> 两个独立的单个位差错</h5><p>若 生成多项式不能整除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>t</mi></msup><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x^t+1,\ t \in [1,\ n-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8768859999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>, 则所有独立的双差错均可检测</p><h5 id="奇数个差错"><a class="markdownIt-Anchor" href="#奇数个差错"></a> 奇数个差错</h5><p>若 生成多项式包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 则可检测所有的奇数个差错</p><h5 id="突发性差错"><a class="markdownIt-Anchor" href="#突发性差错"></a> 突发性差错</h5><ul><li>所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>≤</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">L \le r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> 的突发性差错均可检测</li><li>所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>=</mo><mi>r</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">L = r+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的突发性差错有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><msup><mrow><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">1-{(\frac{1}{2})}^{(r-1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.468008em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.123008em;"><span style="top:-3.298008em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> 的概率被检测</li><li>所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mo>&gt;</mo><mi>r</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">L &gt; r+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的突发性差错有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><msup><mrow><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo></mrow><mi>r</mi></msup></mrow><annotation encoding="application/x-tex">1-{(\frac{1}{2})}^{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2444em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8994em;"><span style="top:-3.2980080000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span></span></span></span></span> 的概率被检测</li></ul><h5 id="表现较好的生成多项式"><a class="markdownIt-Anchor" href="#表现较好的生成多项式"></a> 表现较好的生成多项式</h5><ul><li>至少两项</li><li>包含 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">x^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></li><li>不能整除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mi>t</mi></msup><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x^t+1,\ t \in [1,\ n-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8768859999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></li><li>有因子 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul><h3 id="校验和"><a class="markdownIt-Anchor" href="#校验和"></a> 校验和</h3><p>核心是求和<strong>取反</strong></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 位的校验和计算方法</p><ul><li>报文按照 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 位划分为字</li><li>校验和设为 0, 每个字求和</li><li>对和求反码作为校验和</li></ul><p>接收方计算相同, 若得到的校验和为 0 说明校验成功</p><h2 id="chapter-11-数据链路控制"><a class="markdownIt-Anchor" href="#chapter-11-数据链路控制"></a> Chapter 11 数据链路控制</h2><h3 id="成帧"><a class="markdownIt-Anchor" href="#成帧"></a> 成帧</h3><ul><li>通过添加发送方和接收方地址, 将一条从源端到目的端的报文同其他报文分离开来</li><li>固定长度成帧: 通过帧的长度本身作为边界, 不需要分隔符</li><li>可变长度成帧: 需要规定每一帧的起始和结束, 分为面向字符协议和面向位协议</li></ul><h4 id="面向字符协议"><a class="markdownIt-Anchor" href="#面向字符协议"></a> 面向字符协议</h4><ul><li>数据表示为固定位数的字符 (比如说 8 位的 ASCII 码)</li><li>在帧的起始和结束有固定的标记</li><li>若数据中出现和标记或转义字符相同的字符时, 采用<strong>字节填充</strong><ul><li>发送方: 需要在前面添加转义字符</li><li>接收方: 去掉转义字符, 并将后面的字符作为数据处理</li></ul></li></ul><h4 id="面向位协议"><a class="markdownIt-Anchor" href="#面向位协议"></a> 面向位协议</h4><ul><li>数据表示为位流</li><li>在帧的起始和结束有固定的标记 (<code>01111110</code>)</li><li>数据中出现与标记相同的模式时, 采用<strong>位填充</strong><ul><li>发送方: 在遇到 <code>011111</code> 时强制在后面添加一个 <code>0</code>, 防止和标记重复</li><li>接收方: 接受时把添加的 <code>0</code> 移走</li></ul></li></ul><h3 id="流量控制与差错控制"><a class="markdownIt-Anchor" href="#流量控制与差错控制"></a> 流量控制与差错控制</h3><ul><li>流量控制: 限制发送方在得到接受方确认前能够发送的数据的数量</li><li>差错控制: 在任何时候检测到差错时重传出错的帧, 称为自动重复请求, 即 <strong>ARQ</strong></li></ul><h3 id="协议"><a class="markdownIt-Anchor" href="#协议"></a> 协议</h3><h4 id="无噪声通道"><a class="markdownIt-Anchor" href="#无噪声通道"></a> 无噪声通道</h4><p>看书 p205 ~ p209, 提纲没提</p><h4 id="有噪声通道"><a class="markdownIt-Anchor" href="#有噪声通道"></a> 有噪声通道</h4><blockquote><p><strong>务必看书</strong>, <strong>务必</strong></p></blockquote><h5 id="停止等待-arq-imp"><a class="markdownIt-Anchor" href="#停止等待-arq-imp"></a> 停止等待 ARQ [IMP]</h5><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210618154248.png" alt="S-W ARQ"></p><ul><li>发送方每发送一个帧就停止, 启动一个计时器并等待接收方发送 ACK</li><li>若计时器超时且未收到 ACK, 发送方自动重发</li><li>接收方对每个正确到达的帧回应 ACK</li></ul><h5 id="后退-n-帧-arq-imp"><a class="markdownIt-Anchor" href="#后退-n-帧-arq-imp"></a> 后退 N 帧 ARQ [IMP]</h5><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210618154515.png" alt="B-N ARQ Window"></p><blockquote><p>发送方窗口变化</p></blockquote><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210618154554.png" alt="B-N ARQ Window"></p><blockquote><p>接收方窗口变化</p></blockquote><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210618154629.png" alt="B-N ARQ"></p><blockquote><p>流程图</p></blockquote><ul><li>帧的序列号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 位</li><li>发送窗口大小 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^m-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 接收窗口大小 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li><li>发送窗口中的变量<ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">S_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>: 第一个还没有被确认的帧</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">S_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: 下一个要发送的帧</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{size}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>: 窗口大小, 固定为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>m</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^m-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul></li><li>发送方仅对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">S_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 指向的帧使用定时器 (因为它必定最先到时)</li><li>接收方仅对顺序和数据正确的帧响应 ACK, 并后移窗口</li><li>发送方收到 ACK 即可后移窗口 (即增大 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">S_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>), 故一个 ACK 可以确认多个帧</li><li>若发送方定时器到时, 则会<strong>重发所有未确认的帧</strong> -&gt; 回退 N 帧</li></ul><h5 id="选择性重复-arq-imp"><a class="markdownIt-Anchor" href="#选择性重复-arq-imp"></a> 选择性重复 ARQ [IMP]</h5><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210618155458.png" alt="S ARQ SW"></p><blockquote><p>发送方窗口</p></blockquote><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210618155523.png" alt="S ARQ RW"></p><blockquote><p>接收方窗口</p></blockquote><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210618155553.png" alt="S ARQ"></p><blockquote><p>流程图</p></blockquote><ul><li>帧的序列号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 位</li><li>发送窗口, 接收窗口大小均为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{m-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></li><li>发送方<ul><li>每个发送的帧均有计时器</li><li>计时器到时或收到对应的 NAK 时重发对应的帧</li><li>收到 ACK 时直接右移窗口到对应的位置 (可移动多个)</li></ul></li></ul><blockquote><p>你看到的这个位置是 <a href="https://github.com/HorizonChaser/horizonchaser.github.io/blob/backup/source/_posts/CS-Network-Review-and-Summary.md#L1000">源 markdown 文件的第 1000 行</a> !</p></blockquote><ul><li>接收方<ul><li>每次窗口移动前最多发送一次 NAK</li><li>若收到的帧序号不为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">R_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 则发送 NAK</li><li>若接收到的帧序号在窗口中, 则保存帧并<strong>尝试</strong>右移窗口至第一个未收到的帧</li></ul></li></ul><h3 id="hdlc-高级数据链路控制-imp"><a class="markdownIt-Anchor" href="#hdlc-高级数据链路控制-imp"></a> HDLC (高级数据链路控制) [IMP]</h3><blockquote><p>看书 p226 ~ p230, 书上也是语焉不详…</p></blockquote><ul><li>分为主-从类型的 正常相应方式 和地位平等的 异步平衡方式</li><li>有三种帧: 信息帧 (I-frame), 管理帧 (S-frame) 和无编号帧 (U-frame)</li></ul><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210618160740.png" alt="HDLC Frame"></p><blockquote><p>FCS: Frame CheckSum, 帧校验和<br>Flag: 标记</p></blockquote><ul><li>信息帧: 主要运载数据, 但通过捎带也能包含流量控制和差错控制信息</li><li>管理帧: 仅包含流量控制和差错控制信息</li><li>无编号帧: 交换会话管理和控制信息, 主要在在控制字段的编码里</li></ul><h3 id="点到点协议-ppp"><a class="markdownIt-Anchor" href="#点到点协议-ppp"></a> 点到点协议 (PPP)</h3><ul><li>仅负责点到点的传输</li><li>没有流量控制, 只有基于 CRC 的简单差错控制</li><li>面向字节</li><li>可以提供身份鉴别 (PAP, CHAP 等), 支持多种网络层协议</li></ul><blockquote><p>无关内容: 现在点到点以太网也用 PPP, 称为 PPPoE (PPP over Ethernet)<br>是不是很眼熟? 宽带连接一般就用这玩意儿</p></blockquote><h2 id="chapter-12-多路访问"><a class="markdownIt-Anchor" href="#chapter-12-多路访问"></a> Chapter 12 多路访问</h2><h3 id="随机访问"><a class="markdownIt-Anchor" href="#随机访问"></a> 随机访问</h3><h4 id="aloha"><a class="markdownIt-Anchor" href="#aloha"></a> ALOHA</h4><h5 id="纯-aloha"><a class="markdownIt-Anchor" href="#纯-aloha"></a> 纯 ALOHA</h5><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619000926.png" alt="Pure ALHOA"></p><ul><li>各站点之间直接竞争, 有数据直接发送, 不管其他站点</li><li>每帧都有定时器, 超时未收到接收方的确认帧则等待一段时间 (称为补偿时间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>B</mi></msub></mrow><annotation encoding="application/x-tex">T_B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) 后重发</li><li>若传输的最长时间为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>P</mi></msub></mrow><annotation encoding="application/x-tex">T_P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 帧平均传输时间为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>f</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{fr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>,<ul><li>则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>B</mi></msub><mo>=</mo><mi>R</mi><mo>×</mo><mo stretchy="false">(</mo><msub><mi>T</mi><mi>P</mi></msub><mtext>&nbsp;</mtext><mi mathvariant="normal">或</mi><mtext>&nbsp;</mtext><msub><mi>T</mi><mrow><mi>f</mi><mi>r</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_B=R \times (T_P \ 或 \ T_{fr})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace">&nbsp;</span><span class="mord cjk_fallback">或</span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mtext>&nbsp;</mtext><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">R \in [0,\ 2^k-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace">&nbsp;</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>, 取决于实现</li><li>称为二进制指数退避</li></ul></li><li>脆弱时间: 可能发生冲突的时间, 这里是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>×</mo><msub><mi>T</mi><mrow><mi>f</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">2\times T_{fr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></li><li>吞吐量: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>G</mi><mo>×</mo><msup><mi>e</mi><mrow><mo>−</mo><mn>2</mn><mi>G</mi></mrow></msup></mrow><annotation encoding="application/x-tex">S=G \times e^{-2G}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">G</span></span></span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">G = 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mn>0.184</mn></mrow><annotation encoding="application/x-tex">S_{max} = 0.184</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">8</span><span class="mord">4</span></span></span></span><ul><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span> 为一个帧传输时间内系统产生的帧的平均数</li></ul></li></ul><h5 id="时隙-aloha"><a class="markdownIt-Anchor" href="#时隙-aloha"></a> 时隙 ALOHA</h5><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619000952.png" alt="Slot ALOHA"></p><ul><li>将时间按照 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>f</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{fr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 分割为时隙, 必须在时隙开始发送帧</li><li>脆弱时间: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>f</mi><mi>r</mi></mrow></msub></mrow><annotation encoding="application/x-tex">T_{fr}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></li><li>吞吐量: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><mi>G</mi><mo>×</mo><msup><mi>e</mi><mrow><mo>−</mo><mn>2</mn><mi>G</mi></mrow></msup></mrow><annotation encoding="application/x-tex">S=G \times e^{-2G}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">G</span></span></span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">G = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mn>0.368</mn></mrow><annotation encoding="application/x-tex">S_{max} = 0.368</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">3</span><span class="mord">6</span><span class="mord">8</span></span></span></span></li></ul><h4 id="csma-载波侦听多路访问-imp"><a class="markdownIt-Anchor" href="#csma-载波侦听多路访问-imp"></a> CSMA (载波侦听多路访问) [IMP]</h4><blockquote><p>CSMA: Carrier Sense Mutiple Access</p></blockquote><ul><li>在发送前先检测介质是否空闲</li><li>脆弱时间: 传播时间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>P</mi></msub></mrow><annotation encoding="application/x-tex">T_P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 即相邻最远的两站点的传播时间</li></ul><h5 id="持续方法"><a class="markdownIt-Anchor" href="#持续方法"></a> 持续方法</h5><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619001045.png" alt="Persistent"></p><ul><li>定义了站点发现通道繁忙时的检测策略</li><li>1-持续: 不停地侦听直到介质空闲</li><li>非持续: 每隔随机时间进行一次侦听</li><li>p-持续: 若通道空闲, 则有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 的概率发送数据, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">1-p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> 的概率等待一个时隙后再次检测<br>若空闲则重新进行判定, 否则认为发生冲突, 使用补偿程序</li></ul><h5 id="csmacd-带冲突检测的-载波侦听多路访问"><a class="markdownIt-Anchor" href="#csmacd-带冲突检测的-载波侦听多路访问"></a> CSMA/CD (带冲突检测的 载波侦听多路访问)</h5><blockquote><p>CD: Collision Detect, 冲突检测</p></blockquote><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619001132.png" alt="CSMA/CD"></p><ul><li>发送的时候同时检测是否发生冲突</li><li>冲突说明至少有两个站点在发送, 会导致介质上的能量水平高于正常值 (检测冲突的方法)</li><li>若冲突, 则立即放弃传输, 发送干扰信号 (高能短信号, 保证每个站点都能分辨出冲突), 然后应用二进制指数退避</li><li>最短帧长: <strong>传输时间至少是两倍的(最大)传播时间</strong>, 保证即使相邻最远的站点发生冲突, 在传输结束前也能收到对方的帧到达, 帧长即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">输</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mo>×</mo><mi mathvariant="normal">带</mi><mi mathvariant="normal">宽</mi></mrow><annotation encoding="application/x-tex">传输时间 \times 带宽</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">宽</span></span></span></span></li></ul><h5 id="csmaca-带冲突避免的-载波侦听多路访问"><a class="markdownIt-Anchor" href="#csmaca-带冲突避免的-载波侦听多路访问"></a> CSMA/CA (带冲突避免的 载波侦听多路访问)</h5><blockquote><p>CA: Collision Avoid</p></blockquote><ul><li>在无线网络等情况下, 冲突不会显著改变介质的能量水平, 故不能检测冲突</li><li>使用帧间间隔, 竞争窗口和确认三种方法来实现避免冲突</li></ul><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619001153.png" alt="Methods"></p><h6 id="帧间间隔-ifs"><a class="markdownIt-Anchor" href="#帧间间隔-ifs"></a> 帧间间隔 (IFS)</h6><blockquote><p>IFS: InterFrame Space</p></blockquote><ul><li>使得远端站点的信号能到达本站点</li><li>较低的 IFS 说明优先级较高</li></ul><h6 id="竞争窗口"><a class="markdownIt-Anchor" href="#竞争窗口"></a> 竞争窗口</h6><ul><li>被划分为时隙, 预备发送的站点各自选择一个时隙作为目标</li><li>时隙的数量根据补偿策略中的二元指数变化, 每次 IFS 后若仍无空闲则翻倍</li><li>若站点在等待对应时隙时检测到繁忙, 不会重置计时器, 而是暂停直到空闲, 然后继续等待</li></ul><h6 id="确认"><a class="markdownIt-Anchor" href="#确认"></a> 确认</h6><p>即接收方发送的 ACK</p><h3 id="受控访问"><a class="markdownIt-Anchor" href="#受控访问"></a> 受控访问</h3><h4 id="预约"><a class="markdownIt-Anchor" href="#预约"></a> 预约</h4><ul><li>将时间划分为时隙, 每一个时隙内在发送前需要先在预约帧中进行预约</li><li>对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个子站点, 预约帧中会有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个预约子时隙, 想发送数据的各站点在自己对应的子时隙中进行标记</li><li>然后进行了预约的各站点按照编号顺序逐个发送数据</li></ul><h4 id="轮询"><a class="markdownIt-Anchor" href="#轮询"></a> 轮询</h4><ul><li>一个站点作为主站, 其他作为从站</li><li>所有的数据都要经过主站传递</li><li>主站轮流询问各个从站是否要发送 -&gt; 轮询</li></ul><h4 id="令牌传递"><a class="markdownIt-Anchor" href="#令牌传递"></a> 令牌传递</h4><ul><li>持有令牌的站点可以发送数据</li><li>各个站点轮流持有令牌, 构成一个逻辑环</li></ul><h2 id="chapter-13-有线局域网以太网"><a class="markdownIt-Anchor" href="#chapter-13-有线局域网以太网"></a> Chapter 13 有线局域网：以太网</h2><h3 id="ieee-标准"><a class="markdownIt-Anchor" href="#ieee-标准"></a> IEEE 标准</h3><ul><li>将数据链路层划分为 LLC (逻辑链路控制层) 和 MAC子层 (介质访问控制层), 前者在后者上面</li><li>LLC 对所有的IEEE局域网均适用(使MAC子层变得透明), 定义了一个协议数据单元, 提供流量控制和差错控制</li><li>MAC子层为每种相应的局域网协议定义了网络方法和成帧格式</li></ul><h3 id="标准以太网的mac子层"><a class="markdownIt-Anchor" href="#标准以太网的mac子层"></a> 标准以太网的MAC子层</h3><p>标准以太网: 10Mbps</p><h4 id="帧格式-imp"><a class="markdownIt-Anchor" href="#帧格式-imp"></a> 帧格式 [IMP]</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619205903.png" alt="Frame"></p><ul><li>由七部分组成: 前导符, 起始帧分界符(SFD), 目的地址, 源地址, 长度/类型, 数据, CRC-32</li><li>帧的最小长度: 512 位, 对应数据为 46 字节 (不包含前导符和SFD)</li><li>帧的最大长度: 1518 字节, 对应数据为 1500 字节 (不包含前导符和SFD)</li></ul><h4 id="mac-地址-imp"><a class="markdownIt-Anchor" href="#mac-地址-imp"></a> MAC 地址 [IMP]</h4><ul><li>48 位, 即 6 个字节, 采用 12 个十六进制数表示, 两两一组, 冒号分隔</li><li>单播, 多播与广播地址:<ul><li>第一个字节的最低位若为 0, 则为单播地址; 为 1, 则为多播地址</li><li>广播地址的每一位都是 1, 是多播的特例</li></ul></li><li>发送顺序: 每个字节的低位在前, 逐字节发送<ul><li>例如 <code>47:20</code>, 发送顺序为 <code>11100010 00000100</code></li></ul></li></ul><h4 id="csmacd-最短帧长-imp"><a class="markdownIt-Anchor" href="#csmacd-最短帧长-imp"></a> CSMA/CD 最短帧长 [IMP]</h4><ul><li>时隙: 一个帧最大的往返时间加上发送干扰信号所需的时间<ul><li>对以太网, 定义为发送一个 512 位的帧(最小帧)所需的时间, 10Mbps 下为 51.2us</li></ul></li><li>网络最大长度:<ul><li>理论上最大长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">度</mi><mo>×</mo><mo stretchy="false">(</mo><mi mathvariant="normal">时</mi><mi mathvariant="normal">隙</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mn>51.2</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>6</mn></mrow></msup><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>5120</mn><mtext>&nbsp;</mtext><mi>m</mi></mrow><annotation encoding="application/x-tex">传播速度 \times (时隙/2) = (2 \times 10^8) \times (51.2 \times 10^{-6}/2) = 5120 \ m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">度</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">隙</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">5</span><span class="mord">1</span><span class="mord">.</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mspace">&nbsp;</span><span class="mord mathdefault">m</span></span></span></span></li><li>实际上为 2500m, 由于中继器等延迟</li></ul></li></ul><h4 id="编码与解码"><a class="markdownIt-Anchor" href="#编码与解码"></a> 编码与解码</h4><ul><li>所有标准都使用 10Mbps 的数字信号</li><li>采用曼彻斯特编码</li></ul><h4 id="标准以太网的分类"><a class="markdownIt-Anchor" href="#标准以太网的分类"></a> 标准以太网的分类</h4><ul><li>10Base5: 总线型 同轴电缆 粗缆</li><li>10Base2: 总线型 同轴电缆 细缆</li><li>10Base-T: 星形 UTP, 双绞线在站点和集线器间形成了两条通路, 冲突在集线器中</li><li>10Base-F: 星形 光纤, 两条</li></ul><h3 id="桥接以太网"><a class="markdownIt-Anchor" href="#桥接以太网"></a> 桥接以太网</h3><ul><li>通过网桥连接两个以太网</li><li>网桥在每个网中作为一个站点</li><li>网桥作用:<ul><li>提高带宽 (有限的总带宽不变, 但是由于划分共享的站点数少了)</li><li>划分冲突域</li></ul></li></ul><h3 id="交换式以太网"><a class="markdownIt-Anchor" href="#交换式以太网"></a> 交换式以太网</h3><ul><li>通过二层交换机连接 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个以太网, 相当于一个多口网桥</li><li>带宽仅有站点和交换机之间共享</li><li>冲突域也划分为了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个</li></ul><h3 id="全双工以太网"><a class="markdownIt-Anchor" href="#全双工以太网"></a> 全双工以太网</h3><ul><li>站点和交换机间点对点, 不需要共享, 没有冲突, 也就不需要 CSMA/CD 等</li><li>使用两条线路, 一收一发</li><li>为提供流量控制和差错控制, 在 LLC 和 MAC子层 之间增加了新的 MAC控制子层</li></ul><h3 id="快速以太网"><a class="markdownIt-Anchor" href="#快速以太网"></a> 快速以太网</h3><ul><li>100Mbps</li><li>不触及 MAC子层</li><li>取消总线拓扑, 仅保留星型拓扑</li><li>不需要 CSMA/CD, 但为了兼容保留</li><li>支持自动协商速率</li><li>类型:<ul><li>100Base-TX: 两条五类双绞线, MLT-3 编码</li><li>100Base-FX: 两条双光纤, NRZ-I 编码</li><li>100Base-T4: 四条三类UTP, 8B/6T 编码</li></ul></li></ul><h3 id="千兆以太网"><a class="markdownIt-Anchor" href="#千兆以太网"></a> 千兆以太网</h3><ul><li>1000Mbps</li><li>修改了 MAC子层</li><li>半双工与全双工方法:<ul><li>半双工方法:<ul><li>使用集线器而不是交换机</li><li>传统方法: 相同的最小帧长 (512位)</li><li>载波扩展方法: 最小帧长 512 字节, 4096 位</li><li>帧突发方法: 发送成倍的帧, 类似一个大型帧</li></ul></li><li>全双工方法:<ul><li>使用交换机, 不需要 CSMA/CD</li></ul></li></ul></li><li>类型:<ul><li>1000Base-SX: 两条短波光纤</li><li>1000Base-LX: 两条长波光纤</li><li>1000Base-CS: 两条铜管线 STP</li><li>1000Base-T: 四条 UTP</li></ul></li></ul><h3 id="总线型以太网的信道利用率简单分析"><a class="markdownIt-Anchor" href="#总线型以太网的信道利用率简单分析"></a> 总线型以太网的信道利用率简单分析</h3><blockquote><p>看 PPT 吧, ch13 那个, 提纲上没加粗, 请自行把握 🐶</p></blockquote><h2 id="chapter-14-无线局域网"><a class="markdownIt-Anchor" href="#chapter-14-无线局域网"></a> Chapter 14 无线局域网</h2><h3 id="ieee-80211-imp"><a class="markdownIt-Anchor" href="#ieee-80211-imp"></a> IEEE 802.11 [IMP]</h3><ul><li>无线局域网规范</li><li>涵盖了物理层和数据链路层</li></ul><h3 id="体系结构"><a class="markdownIt-Anchor" href="#体系结构"></a> 体系结构</h3><h4 id="基本服务集-bss"><a class="markdownIt-Anchor" href="#基本服务集-bss"></a> 基本服务集 (BSS)</h4><ul><li>无线局域网的基本组成部分</li><li>分为特别网络和基础设施网络<ul><li>特别网络: 不带 AP (access point, 访问点/接入点)</li><li>基础设施网络: 有一个 AP, 也称作基础网络</li></ul></li></ul><h4 id="扩展服务集-ess"><a class="markdownIt-Anchor" href="#扩展服务集-ess"></a> 扩展服务集 (ESS)</h4><ul><li>由两个或更多个带有 AP 的 BSS 组成</li><li>通过分布式系统连接各 AP, 连接方式为任意的 IEEE 局域网, 例如以太网</li><li>移动站点: 普通的站点; 固定站点: AP</li><li>同 BSS 内可以直接通信, 但不同 BSS 下不能直接通信</li><li>移动站点可以同时属于多个 BSS</li></ul><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619230019.png" alt="ESS"></p><h4 id="站点类型"><a class="markdownIt-Anchor" href="#站点类型"></a> 站点类型</h4><ul><li>不迁移: 不动或者仅在一个 BSS 内部移动</li><li>BSS 迁移: 在同一个 ESS 下, 可以在 BSS 间移动</li><li>ESS 迁移: 可以在不同的 ESS 间迁移, 但不保证连续</li></ul><h3 id="mac层-imp"><a class="markdownIt-Anchor" href="#mac层-imp"></a> MAC层 [IMP]</h3><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619230043.png" alt="MAC Layer"></p><h4 id="分布式协调功能-dcf"><a class="markdownIt-Anchor" href="#分布式协调功能-dcf"></a> 分布式协调功能 (DCF)</h4><blockquote><p>DCF: Distributed Coordination Function</p></blockquote><ul><li>采用 CSMA/CA 作为访问方式, 原因:<ul><li>否则需要发送时同时侦听, 提高成本</li><li>由于隐藏站点可能无法检测冲突</li><li>站点间距导致的信号衰减可能会使两端无法检测到对方的冲突</li></ul></li></ul><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619230422.png" alt="CSMA/CA Flowchart"></p><h4 id="点协调功能-pcf"><a class="markdownIt-Anchor" href="#点协调功能-pcf"></a> 点协调功能 (PCF)</h4><blockquote><p>PCF: Point Coordination Function</p></blockquote><ul><li>集中式无竞争轮询</li><li>优先级高于 DCF, 主动权在 AP</li><li>主要用于对时间敏感数据的传输</li></ul><h4 id="帧格式-imp-2"><a class="markdownIt-Anchor" href="#帧格式-imp-2"></a> 帧格式 [IMP]</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619230923.png" alt="Frame"></p><ul><li>9 个字段: 帧控制 (FC), D, 地址 (有四个), 序列号, 帧主题, FCS (帧校验和, CRC-32)</li><li>三种类型: 管理帧, 控制帧, 数据帧</li></ul><h4 id="寻址机制"><a class="markdownIt-Anchor" href="#寻址机制"></a> 寻址机制</h4><ul><li>四种情况: 站点间, AP 间, 站点和 AP 之间 (双向)</li><li>通过 FC 中的 To DS (发往分布式系统, 差不多就是某个 AP) 和 From DS (来自分布式系统, 如前) 确定具体情况, 见下</li></ul><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619231301.png" alt="Situations"></p><ol><li>该帧既不是发往一个分布式系统，也不是来自于一个分布式系统，而是从同一个BSS中的一个站点到另外一个站点，不经过DS，需要给原始发送站回送ACK帧</li><li>该帧来自于分布式系统，从一个AP来，到一个站点去，ACK帧将被回送给AP</li><li>该帧要发送给一个分布式系统，从一个站点发往AP，ACK帧将被发送到原始站点</li><li>暗示分布式系统也是无线的，从一个DS的AP发送到另外一个DS的AP；<br>因为如果其中一个DS是一个有线局域网，则这里就不需要定义地址</li></ol><h4 id="隐藏站点-imp"><a class="markdownIt-Anchor" href="#隐藏站点-imp"></a> 隐藏站点 [IMP]</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619231646.png" alt="Hidden Station"></p><ul><li>若 B -&gt; A, C -&gt; A, 由于 B C 之间相互隐藏, 不知道对方存在, 因此会造成冲突</li><li>解决方法: 使用握手帧 (RTS 和 CTS, 请求发送和允许发送)</li></ul><h4 id="暴露站点-imp"><a class="markdownIt-Anchor" href="#暴露站点-imp"></a> 暴露站点 [IMP]</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210619232117.png" alt="Exposed Station"></p><ul><li>若 A -&gt; B, 开始后 C -&gt; D, 由于前者干扰导致后者必须等待 (即使 D 不在 A 范围)</li></ul><h4 id="物理层-imp"><a class="markdownIt-Anchor" href="#物理层-imp"></a> 物理层 [IMP]</h4><blockquote><p>各协议细节建议看书 p288 ~ p289</p></blockquote><ul><li>除红外线外, 均在 ISM 频带: 902~928 MHz, 2.4~4.835 GHz, 5.725~5.850 GHz<ul><li>ISM: 工业的, 科学的, 医学的</li></ul></li></ul><h2 id="chapter-15-连接局域网-主干网和虚拟局域网"><a class="markdownIt-Anchor" href="#chapter-15-连接局域网-主干网和虚拟局域网"></a> Chapter 15 连接局域网、主干网和虚拟局域网</h2><h3 id="连接设备-imp"><a class="markdownIt-Anchor" href="#连接设备-imp"></a> 连接设备 [IMP]</h3><ul><li>根据设备在网络中工作的层次划分</li></ul><h4 id="无源集线器"><a class="markdownIt-Anchor" href="#无源集线器"></a> 无源集线器</h4><ul><li>仅仅是一个连接器, 把不同分支物理上连接起来</li><li>是来自不同站点信号的冲突点</li><li>在物理层之下, 作为介质的一部分</li></ul><h4 id="中继器"><a class="markdownIt-Anchor" href="#中继器"></a> 中继器</h4><ul><li>连接同一个局域网的各个分段</li><li>工作在物理层</li><li>通过自己识别信号然后再生, 不会放大噪声</li></ul><h4 id="有源集线器"><a class="markdownIt-Anchor" href="#有源集线器"></a> 有源集线器</h4><ul><li>工作在在物理层</li><li>相当于多端口的中继器</li><li>可以级联, 通常用于星型拓扑结构中</li></ul><h4 id="网桥"><a class="markdownIt-Anchor" href="#网桥"></a> 网桥</h4><ul><li>工作在物理层和数据链路层<ul><li>在物理层: 类似中继器, 再生信号</li><li>在数据链路层: 通过物理地址 (例如 MAC) 转发帧</li><li>不改变物理地址</li></ul></li><li>过滤: 通过查阅自己的表 (可以是手工配置的静态表, 也可以是透明网桥自学习的表) 决定向外转发帧的目的端口</li></ul><h5 id="透明网桥"><a class="markdownIt-Anchor" href="#透明网桥"></a> 透明网桥</h5><ul><li>通过学习网络中的帧传输方式生成自己的表<ul><li>接收到帧时, 即可记录下该帧的物理地址和接受端口的对应关系</li><li>转发时, 若无包含目的地址的条目, 则从每个端口转发<ul><li>可能造成帧泛滥</li></ul></li></ul></li><li>在两个 LAN 之间存在多个透明网桥时, 可能会出现循环问题 (同一帧被转发多次)<ul><li>使用生成树算法建立无循环的拓扑结构 (因为树必定无环)<ul><li>网桥和 LAN 都视为节点</li><li>从网桥到 LAN 的跳数为 1, LAN 到网桥跳数为 0</li><li>网桥广播自己的 ID, 最小的作为树根</li><li>计算根网桥到每个网桥与 LAN 的最小成本的路径</li><li>路径组合即为生成树</li></ul></li><li>属于生成树的为转发端口, 不属于的为阻塞端口 (相当于被禁用了)</li></ul></li></ul><h5 id="源路由网桥"><a class="markdownIt-Anchor" href="#源路由网桥"></a> 源路由网桥</h5><ul><li>通过发送方指定要经过的每一个网桥</li><li>并不普及</li></ul><h4 id="二层交换机"><a class="markdownIt-Anchor" href="#二层交换机"></a> 二层交换机</h4><ul><li>工作在物理层和数据链路层</li><li>端口可以很多, 让每一个站点都有一个端口 -&gt; 没有通信竞争</li><li>通过物理地址转发帧</li></ul><h4 id="路由器"><a class="markdownIt-Anchor" href="#路由器"></a> 路由器</h4><ul><li>工作在物理层, 数据链路层和网络层</li><li>通过逻辑地址转发帧</li><li>使用路由表进行转发决策</li></ul><h4 id="三层交换机"><a class="markdownIt-Anchor" href="#三层交换机"></a> 三层交换机</h4><ul><li>是路由器, 但"更快更复杂"</li><li>书中和 路由器 互换使用</li></ul><h4 id="网关"><a class="markdownIt-Anchor" href="#网关"></a> 网关</h4><ul><li>工作在每一层的计算机</li></ul><h3 id="冲突域与广播域-imp"><a class="markdownIt-Anchor" href="#冲突域与广播域-imp"></a> 冲突域与广播域 [IMP]</h3><h4 id="冲突域"><a class="markdownIt-Anchor" href="#冲突域"></a> 冲突域</h4><ul><li>在物理层, 在同一总线 (或者其他物理网段) 上的站点之和</li><li>因此, 仅工作在物理层或之下的设备无法划分冲突域, 例如<ul><li>无源集线器, 有源集线器</li><li>中继器</li></ul></li></ul><blockquote><p>是物理层面的概念</p></blockquote><h4 id="广播域"><a class="markdownIt-Anchor" href="#广播域"></a> 广播域</h4><ul><li>能接收到同样广播帧的节点的之和, 在数据链路层</li><li>因此, 仅工作在数据链路层及以下的设备无法划分广播域, 例如<ul><li>无法划分冲突域的设备 👆</li><li>二层交换机</li><li>网桥和透明网桥</li></ul></li><li>通过划分 VLAN 可以隔离广播域, 所以每一个 VLAN 都是一个广播域</li></ul><blockquote><p>涉及到了帧, 是数据链路层的概念</p></blockquote><h3 id="vlan-虚拟局域网"><a class="markdownIt-Anchor" href="#vlan-虚拟局域网"></a> VLAN (虚拟局域网)</h3><ul><li>将 LAN 划分为逻辑上的网段</li><li>不同 VLAN 之间不能直接通信, 这就划分了广播域</li><li>可以基于端口, 物理地址, 逻辑地址, 多播地址等划分 VLAN</li></ul><blockquote><p><em>想想计网实验</em></p></blockquote><h2 id="chapter-16-无线-wan移动电话和卫星网络"><a class="markdownIt-Anchor" href="#chapter-16-无线-wan移动电话和卫星网络"></a> Chapter 16 无线 WAN：移动电话和卫星网络</h2><p>仅要求了解, 看书即可</p><h2 id="chapter-17-广域网-sonetsdh"><a class="markdownIt-Anchor" href="#chapter-17-广域网-sonetsdh"></a> Chapter 17 广域网 SONET/SDH</h2><p>仅要求了解 SONET 的基本概念</p><h2 id="chapter-18-虚电路网络帧中继和-atm"><a class="markdownIt-Anchor" href="#chapter-18-虚电路网络帧中继和-atm"></a> Chapter 18 虚电路网络：帧中继和 ATM</h2><h3 id="帧中继"><a class="markdownIt-Anchor" href="#帧中继"></a> 帧中继</h3><h4 id="特征-imp"><a class="markdownIt-Anchor" href="#特征-imp"></a> 特征 [IMP]</h4><ul><li>相对于此前的 X.25 虚电路交换网, 具有更快的速率 (1.544Mbps ~ 44.376Mbps)</li><li>工作在物理层和数据链路层</li><li>允许突发性数据 (速率不均衡, 可按需分配带宽)</li><li>最大帧大小 9000 字节, 支持所有局域网的帧</li><li>仅在数据链路层有错误检测, 无流量与差错控制, 更快</li><li>帧中继中的 VCI (虚电路标识符) 称作 DLCI</li></ul><blockquote><p>VCI: Virtual Circuit Identifer<br>DLCI: DataLink Connection Identifer</p></blockquote><h4 id="永久交换虚电路-pvc"><a class="markdownIt-Anchor" href="#永久交换虚电路-pvc"></a> 永久交换虚电路 (PVC)</h4><blockquote><p>PVC: Permanent Virtual Circuit</p></blockquote><ul><li>由管理员为所有的交换机建立统一设置: 源地址分配一个 VCI, 目的地址分配一个 VCI</li><li>缺点:<ul><li>花费大, 即使未使用也需一直付费 (因为连接一直存在)</li><li>只能在一个源地址和一个目的地址间建立连接</li></ul></li></ul><h4 id="交换虚电路-svc"><a class="markdownIt-Anchor" href="#交换虚电路-svc"></a> 交换虚电路 (SVC)</h4><blockquote><p>SVC: Switched Virtual Circuit</p></blockquote><ul><li>建立短的, 临时的连接</li><li>需要连接建立和终止阶段</li></ul><h4 id="帧结构"><a class="markdownIt-Anchor" href="#帧结构"></a> 帧结构</h4><p>建议看书 p344</p><h3 id="atm-异步传输模式"><a class="markdownIt-Anchor" href="#atm-异步传输模式"></a> ATM (异步传输模式)</h3><blockquote><p>ATM: Asychoronous Transfer Mode</p></blockquote><h4 id="特征"><a class="markdownIt-Anchor" href="#特征"></a> 特征</h4><ul><li>高速互联, 作为网间主干互联的协议</li><li>面向连接, 提供准确可预测的传输</li><li>是信元网络, 采用固定大小的信元作为数据交换的基本单位<ul><li>可以避免多路复用时先到达的大型帧对后到达的小型帧的长时间阻塞</li></ul></li><li>采用异步的时分复用 (TDM) 实现多路复用<ul><li>时隙大小为一个信元的大小</li><li>可以存在空时隙</li></ul></li></ul><h4 id="结构-imp"><a class="markdownIt-Anchor" href="#结构-imp"></a> 结构 [IMP]</h4><ul><li>用户设备称为端点</li><li>端点到网络接口: 用户到网络接口, UNI (User-to-Network Interface)</li><li>交换机之间: 网络到网络接口, NNI (Network-to-Network Interface)</li><li>传输路径 TP<ul><li>Transmission Path</li><li>是端点与交换机之间, 或两交换机之间的所有物理连接</li><li>类似于连接两个城市的高速公路的集合</li></ul></li><li>虚路径 VP<ul><li>Virtual Path</li><li>两个交换机之间的一条或多条连接的集合</li><li>类似于两城市间的一条高速公路</li></ul></li><li>虚电路 VC<ul><li>Virtual Circuit</li><li>信元网络基于虚电路</li><li>属于同一报文的所有信元沿着同一条虚电路传输, 同时保持先后次序</li></ul></li><li>通过 VPI 和 VCI 来定义一个虚连接, 前者定义特定 VP, 后者定义特定 VC</li></ul><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210620160805.png" alt="TP VP VC"></p><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210620160831.png" alt="TP VP VC"></p><blockquote><p>TP VP VC 间关系</p></blockquote><h1 id="part-4-网络层"><a class="markdownIt-Anchor" href="#part-4-网络层"></a> Part 4 网络层</h1><h2 id="chapter-19-逻辑寻址-imp"><a class="markdownIt-Anchor" href="#chapter-19-逻辑寻址-imp"></a> Chapter 19 逻辑寻址 [IMP]</h2><h3 id="ipv4-地址"><a class="markdownIt-Anchor" href="#ipv4-地址"></a> IPv4 地址</h3><ul><li>32 位长</li><li>在网络中唯一与通用</li><li>使用二进制标记法和点分十进制标记法<ul><li>二进制标记法: 二进制表示, 八位一个空格</li><li>点分十进制: 每个字节表示为十进制数, 中间用小数点分割</li></ul></li></ul><h4 id="分类寻址"><a class="markdownIt-Anchor" href="#分类寻址"></a> 分类寻址</h4><ul><li>划分为五类: A ~ E</li><li>通过第一个字节最开始有几个 1 决定分类</li></ul><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210621005156.png" alt="Class"></p><table><thead><tr><th>类</th><th>块的个数</th><th>块长度</th><th>应用类型</th></tr></thead><tbody><tr><td>A</td><td>128</td><td>16 777 216</td><td>单播</td></tr><tr><td>B</td><td>16 384</td><td>65 536</td><td>单播</td></tr><tr><td>C</td><td>2 097 152</td><td>256</td><td>单播</td></tr><tr><td>D</td><td>1</td><td>268 435 456</td><td>多播</td></tr><tr><td>E</td><td>1</td><td>268 435 456</td><td>保留</td></tr></tbody></table><ul><li>A B C 类分为网络号和主机号<ul><li>网络号各自占 1 2 3 个字节</li></ul></li><li>通过掩码划分, 掩码 32 位</li><li>子网化: 通过延长掩码中 1 的长度来将一个大的地址块儿划分为包含较少主机的子网</li><li>超网化: 通过缩短掩码中 1 的长度来将几个小的地址块儿划分为一个大的子网, 无类寻址不需要 (因为你可以直接划分出来大的地址块儿)</li></ul><h4 id="无类寻址"><a class="markdownIt-Anchor" href="#无类寻址"></a> 无类寻址</h4><ul><li>没有类的概念, 但是仍划分为地址块</li><li>地址块的限制条件<ul><li>块中地址必须连续</li><li>块中地址个数必须为 2 的整数次幂</li><li>块的起始地址必须能被块中地址个数整除</li></ul></li><li>通过 CIDR 标记法定义块地址<ul><li>x.y.z.t/n</li><li>其中 /n 为掩码, n 为掩码中 1 的位数 (掩码中的 1 必定连续)</li></ul></li><li>起始地址: 通过将块中某个地址的后 32-n 位置为 0 求得 (也就是把地址和掩码进行与运算)</li><li>最后的地址: 通过将块中某个地址的后 32-n 位置为 1 求得</li><li>地址个数: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mo stretchy="false">(</mo><mn>32</mn><mo>−</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">2^{(32-n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">3</span><span class="mord mtight">2</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></li><li>网络地址: 代表整个网络, 通常是块的起始地址</li></ul><h5 id="层次结构"><a class="markdownIt-Anchor" href="#层次结构"></a> 层次结构</h5><ul><li>二级层次结构: 没有子网化, 只有网络前缀 (前 n 位) 和定义主机的后 n 位</li><li>三级层次结构: 有子网化, 通过子网前缀划分子网 -&gt; 增加掩码中 1 长度, 即 n</li></ul><h4 id="nat-网络地址转换"><a class="markdownIt-Anchor" href="#nat-网络地址转换"></a> NAT (网络地址转换)</h4><blockquote><p>NAT: Network Address Translation</p></blockquote><ul><li>使大量主机共享有限的外部地址</li><li>在内部网络分配专用地址, 对外表现为公网地址<ul><li>在向外网发送时把分组的源地址替换为公网地址, 同时在表中添加专用地址-公网地址的条目</li><li>接受时通过查表确定对应关系</li><li>可以采用 IP 地址池来对外同时使用多个公网地址</li><li>可以在转换表中同时采用使用 IP 地址和端口号来实现内外网多对多的转换<ul><li>表中有五列: 专用地址与端口, 外部地址与端口, 传输协议</li><li>外部的响应报文通过目的地址和目的端口号(和内网中的发起方使用的临时端口相同)确定内网的接收者</li><li>临时端口号必须唯一</li></ul></li></ul></li></ul><h3 id="ipv6-地址"><a class="markdownIt-Anchor" href="#ipv6-地址"></a> IPv6 地址</h3><ul><li>16 个字节, 128 位</li><li>采用十六进制冒号标记法<ul><li>每两个字节一部分, 作为四个十六进制数字</li><li>每部分之间用冒号分隔</li></ul></li><li>可以缩短, 需要满足<ul><li>在两个冒号之间 (所以开头和结尾不能缩短)</li><li>高位的连续的 0 可以缩短</li><li>若有连续的几个部分仅包含 0, 则可以把这些 0 用两个冒号代替, <strong>但这种缩短只能用一次</strong></li><li>例如 FDEC : 0074 : 0000 : 0000 : 0000 : B0FF : 0000 : FFF0<ul><li>缩短: FDEC : 74 : 0 : 0 : 0 : B0FF : 0 : FFF0 (去掉了每个部分的前导 0)</li><li>更缩短: FDEC : 74 :: B0FF : 0 : FFF0 (把连续的 0 合并)</li></ul></li></ul></li><li>缩短地址的恢复<ul><li>将未缩短的部分对齐</li><li>将 0 插入</li></ul></li></ul><h2 id="chapter-20-ip协议"><a class="markdownIt-Anchor" href="#chapter-20-ip协议"></a> Chapter 20 IP协议</h2><h3 id="网际互连"><a class="markdownIt-Anchor" href="#网际互连"></a> 网际互连</h3><ul><li>因特网中的网络层交换采用数据包分组交换<ul><li>是无连接的</li><li>各分组之间没有联系</li><li>同一报文的各分组可能采用不同路径</li></ul></li></ul><h3 id="ipv4"><a class="markdownIt-Anchor" href="#ipv4"></a> IPv4</h3><h4 id="数据报格式-imp"><a class="markdownIt-Anchor" href="#数据报格式-imp"></a> 数据报格式 [IMP]</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210621151131.png" alt="ipv4"></p><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210621150443.png" alt="ipv4"></p><blockquote><p>HLEN: Header Length, 头部长度</p></blockquote><ul><li>版本: 定义 IPv4 版本, 若错误则直接丢弃数据报</li><li>头部长度: 数据报头部的总长度<strong>除以4</strong>, 对不含选项的头部, 长度为 20 字节, 值为 5</li><li>服务: 有两种解释方法, 服务类型和差分服务<ul><li>服务类型<ul><li>前三位指定优先级, 在遇到拥塞时先丢弃低优先级的 (未使用)</li><li>后四位称为 TOS 位, 前三位分别指定低延迟, 最大化吞吐量和最高可靠性, 最后一位没用</li></ul></li><li>差分服务<ul><li>后两位不用</li><li>前六位组成码点子字段<ul><li>最右侧三位为 0, 则前三位和"服务类型"的解释方式相同</li><li>否则, 定义 64 种服务 (然而具体的分配方式还没定下来, 看看就行)</li></ul></li></ul></li></ul></li><li>总长度: 以字节计算的数据报总长度, 包括头部长度和数据长度<ul><li>可以靠这个把数据报和填充分开, 比如以太网最低要求 46 字节的帧</li></ul></li><li>标识, 标记和分段偏移: 和分段有关, 见后面</li><li>生存时间: 能经过路由器转发的数量, 每个路由器收到后先减一, 为 0 时直接丢弃, 并回送一个错误信息</li><li>协议: 指定了该数据报使用的高层协议, 例如 TCP UDP ICMP 等</li><li>校验和: 仅计算头部 (数据部分的校验和由高层协议负责)<ul><li>将头部按照 16 位划分</li><li>对这些数求和, 正常进位, 同时最高位的进位加到最低位上</li><li>对结果取反码</li></ul></li><li>选项: 可选的选项, 看书 p393</li></ul><h4 id="mtu-最大传输单元-与分段"><a class="markdownIt-Anchor" href="#mtu-最大传输单元-与分段"></a> MTU (最大传输单元) 与分段</h4><blockquote><p>MTU: Maximum Transmission Unit</p></blockquote><ul><li>每个数据链路层协议都有自己的帧格式, 也就定义了该协议下最大的数据长度</li><li>为了让 IPv4 协议与物理网络无关, IPv4 数据报的最大长度为 65535 字节, 是常见的网络中最大的 MTU 值</li><li>分段在传输层进行</li><li>数据报在到达最终目的端前, 可能被多次分段</li><li>标识: 一个序列号, 定义了特定的从源端发出的数据报, <strong>分段不改变标识</strong></li><li>标记: 3 位字段<ul><li>第一位: 保留不用</li><li>第二位: 不分段位 (DF, Don’t Fragment), 为 1 时强制禁止分段, 若超过 MTU 会导致无法发送并回送错误信息</li><li>第三位: 多分段位, 若为 1 表明这不是最后的分段, 为 0 表示是最后或唯一的分段</li></ul></li><li>分段偏移: 表示了该分段的第一个字节在整个数据报中的相对位置, <strong>单位是 8 字节, 也就是除以 8</strong><ul><li>所以分段时每个分段的长度必须满足使每个分段的第一个字节的位置为 8 的整数倍</li></ul></li><li>重组方法:<ul><li>第一个分段的分段偏移为 0</li><li>第一个分段的长度除以 8 得到第二个分段的偏移值</li><li>第一二个分段的长度之和除以 8 得到第三个分段的偏移值</li><li>重复以上过程, 最后一个分段的 多分段位 为 0</li></ul></li></ul><h3 id="ipv6"><a class="markdownIt-Anchor" href="#ipv6"></a> IPv6</h3><h4 id="数据报格式-imp-2"><a class="markdownIt-Anchor" href="#数据报格式-imp-2"></a> 数据报格式 [IMP]</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210621195449.png" alt="ipv6"></p><ul><li><strong>基本头部固定 40 字节, 选项等放在扩展头部</strong></li><li>版本: IPv6 的版本号, 为 6</li><li>优先级: 发生拥塞时决定丢弃顺序, 分为可进行拥塞控制的通信量和不可进行…<ul><li>可进行拥塞控制: 分 0~7, 0 最低, 不同服务类型的优先级不同</li><li>不可进行拥塞控制: 尚未指定, 8~15, 8 为具有最大冗余度的数据 (就是丢一点儿影响也没那么大的)</li></ul></li><li>流标号: 标识了一个数据报系列, 它们来源于同一个地址, 去往同一个地址, 使用同样的服务</li><li>有效载荷长度: <strong>定义存在冲突, 见下面</strong></li><li>下一个头部: 下一个可选的扩展头部的位置, 或者是上层协议 (比如 UDP/TCP) 的头部</li><li>跳数限制: 类似于 IPv4 中的 TTL (生存时间)</li><li>源地址: 发送方的地址</li><li>目的地址: 若使用了源路由选择, 则为下一个路由器的地址, 否则就是最终目的地的地址</li></ul><h3 id="ipv4-ipv6-头部对比"><a class="markdownIt-Anchor" href="#ipv4-ipv6-头部对比"></a> IPv4 IPv6 头部对比</h3><ul><li>IPv6 取消了头部长度字段, 因为 v6 头部固定 40 字节</li><li>IPv6 取消了服务类型, 用优先级+流标号代替功能</li><li>IPv6 取消了总长度字段, 使用有效载荷长度代替 <strong>这点有点小冲突, 详情看下面</strong></li><li>IPv6 基本头部中取消了标识, 标记和分组偏移, 放在了扩展头部里</li><li>IPv6 将 TTL 称为跳数限制</li><li>协议字段被替换成下一个头部字段</li><li>头部不再包含校验和</li><li>IPv4 中的选项移动到了 IPv6 的扩展头部中</li></ul><blockquote><p><strong>关于 IPv6 的有效载荷长度和 IPv4 的总长度</strong><br>按照书上说法, IPv6 的有效载荷长度为 “包括基本头部在内的IP数据报的总长度”, 这个说法其实和 IPv4 的总长度定义一样<br>但是老师的 PPT 上和我查的 <a href="https://en.wikipedia.org/wiki/IPv6_packet#Standard_payload_length">Wiki</a> 上都认为 <strong>有效载荷长度为除基本头部之外的数据报长度</strong><br>等待查证 0.0</p></blockquote><h3 id="ipv4-ipv6-混合"><a class="markdownIt-Anchor" href="#ipv4-ipv6-混合"></a> IPv4 IPv6 混合</h3><ul><li>双协议栈: 同时支持 IPv4 和 v6</li><li>隧道技术<ul><li>v6 -&gt; v4 -&gt; v6</li><li>通过在 v6 分组前添加一个 v4 的头部来让分组通过仅支持 v4 的区域</li></ul></li><li>头部转换<ul><li>v6 -&gt; v4</li><li>由于接收方仅支持 v4, 但发送方使用 v6, 因此在最后转发给接收方前把 v6 的头部转换为 v4 的头部</li></ul></li></ul><h2 id="chapter-21-地址映射-差错报告和多播"><a class="markdownIt-Anchor" href="#chapter-21-地址映射-差错报告和多播"></a> Chapter 21 地址映射、差错报告和多播</h2><h3 id="arp"><a class="markdownIt-Anchor" href="#arp"></a> ARP</h3><blockquote><p>ARP: Address Resolution Protocol, 地址解析协议</p></blockquote><h4 id="概念-imp"><a class="markdownIt-Anchor" href="#概念-imp"></a> 概念 [IMP]</h4><ul><li>逻辑地址到物理地址</li><li><strong>直接封装到数据链路层的帧中</strong></li><li>ARP 查询是广播, ARP 回答是单播 (持有对应逻辑地址的节点返回自己的物理地址)</li><li>支持所有的物理地址与逻辑地址类型</li></ul><h4 id="分组格式"><a class="markdownIt-Anchor" href="#分组格式"></a> 分组格式</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210621205627.png" alt="arp"></p><ul><li>硬件类型: 指定了物理网络的类型, 比如以太网</li><li>协议类型: 指定了使用逻辑地址的高层协议的类型, 比如 IPv4</li><li>两个长度: 字节为单位, 按需求填, 比如以太网物理地址长度是 6, IPv4 协议长度 (就是逻辑地址长度) 为 4</li><li>操作: 分为 ARP 请求和 ARP 回答</li><li>四个地址: 按需填<ul><li>注意, 在 ARP 请求中, 目标硬件地址填 0, 因为这时还不知道</li></ul></li></ul><h4 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h4><h5 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h5><ol><li>发送方想要发送报文, 知道接收方的逻辑地址但不知道物理地址</li><li>发送方产生一个 ARP 请求报文, 目标的物理地址填 0</li><li>请求报文发送给数据链路层, 封装成帧, 目的地址为广播地址</li><li>所有站点都接受到这个请求, 但比对请求报文中的目标逻辑地址后, 仅有相符的那个站点才会产生回应</li><li>相符的站点 (即接收方) 使用 ARP 回应报文, 其中包含了自己的物理地址, 单播</li><li>发送方得知接收方的物理地址, 即可发送报文</li></ol><h3 id="dhcp"><a class="markdownIt-Anchor" href="#dhcp"></a> DHCP</h3><blockquote><p>DHCP: Dynamic Host Configuration Protocol, 动态主机配置协议</p></blockquote><ul><li>通过向服务器请求自动获得逻辑地址</li><li>可以人工配置静态的物理地址和逻辑地址间的对应关系, 也可以在地址池中自动分配</li><li>自动分配的地址为租用地址, 有时间上限, 到期后需要更新或停用</li></ul><h3 id="icmp"><a class="markdownIt-Anchor" href="#icmp"></a> ICMP</h3><blockquote><p>ICMP: Internet Control Message Protocol, 因特网控制报文协议</p></blockquote><h4 id="概念-imp-2"><a class="markdownIt-Anchor" href="#概念-imp-2"></a> 概念 [IMP]</h4><blockquote><p>我觉得不用记功能细节…</p></blockquote><ul><li>提供差错报告报文和查询报文</li><li>ICMP 不能纠正差错, 只能把出错信息发回给原始的源端</li></ul><h4 id="报文格式-imp"><a class="markdownIt-Anchor" href="#报文格式-imp"></a> 报文格式 [IMP]</h4><ul><li>封装在 IP 数据报里面</li><li>头部固定有 8 字节, 数据部分可变长</li><li>头部的前 4 字节固定, 后 4 字节随类型变化</li></ul><h4 id="差错报告-imp"><a class="markdownIt-Anchor" href="#差错报告-imp"></a> 差错报告 [IMP]</h4><ul><li>处理 IP 数据报时出现的问题<ul><li>目的端不可达: 找不到对应主机或端口</li><li>时间超时: TTL 到达 0</li><li>源端抑制: 通知源端出现拥塞与丢弃, 开始流量控制</li><li>参数问题: 报文格式不对</li><li>重定向: 主机将报文发送给了绕路的路由器, 该路由器会转发并回送这条差错报告, 可以更新主机的路由表</li></ul></li></ul><h4 id="查询报文"><a class="markdownIt-Anchor" href="#查询报文"></a> 查询报文</h4><ul><li>成对出现, 提供信息交换与查询<ul><li>回送请求与回答: ping 命令的那个</li><li>时间戳请求与回答: 测量两主机间往返时间, 可用于时间同步</li><li>地址掩码请求与回答</li><li>路由器询问与通告</li></ul></li></ul><h3 id="igmp"><a class="markdownIt-Anchor" href="#igmp"></a> IGMP</h3><blockquote><p>IGMP: Internet Group Management Protocol, 因特网组管理协议</p></blockquote><ul><li>不是多播路由协议, 而是管理组成员的协议</li><li>为多播路由器 (multicast router) 提供关于连接到网络上的节点成员状态的信息</li></ul><h2 id="chapter-22-传递-转发和路由选择"><a class="markdownIt-Anchor" href="#chapter-22-传递-转发和路由选择"></a> Chapter 22 传递、转发和路由选择</h2><h3 id="转发技术"><a class="markdownIt-Anchor" href="#转发技术"></a> 转发技术</h3><ul><li>下一条方法: 路由表中仅保存下一跳的地址</li><li>路由方法: 路由表中保存完整的路由信息 (完整的路径)</li><li>特定网络方法: 将连接在整个网络上的主机视为同一个条目</li><li>特定主机方法: 每台主机一个条目</li><li>默认方法: 表里有的按表来, 没有的同一扔到一个端口</li></ul><h3 id="转发过程"><a class="markdownIt-Anchor" href="#转发过程"></a> 转发过程</h3><ul><li>采用无类寻址</li><li>表中包含<strong>掩码</strong>, 网络地址, 下一跳地址, 接口</li><li>过程<ul><li>将每个条目的掩码与接收到的分组的目的地址相与, 判断是否符合网络地址<ul><li>若不符合, 则比较下一条</li><li>若符合, 准备通过对应的下一跳地址和端口转发, 可能需要 ARP</li><li>若无符合条目, 按默认条目转发</li></ul></li></ul></li></ul><h3 id="地址聚合-imp"><a class="markdownIt-Anchor" href="#地址聚合-imp"></a> 地址聚合 [IMP]</h3><p>对网络的其他部分, 将连续的地址块儿通过缩短掩码的长度来将其是为一个地址</p><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622000936.png" alt="aggregate"></p><blockquote><p>在 R2 看来, 组织 1~4 是同一个地址, 只占一个条目, 只需要转发到 m0 接口就行<br>至于组织 1~4 之间各自的分组转发, 由 R1 负责</p></blockquote><h3 id="最长掩码匹配-imp"><a class="markdownIt-Anchor" href="#最长掩码匹配-imp"></a> 最长掩码匹配 [IMP]</h3><ul><li>在路由表中按照掩码的长短从上到下排序, 长的在上面</li><li>这样每次都从掩码最长的开始匹配</li><li>而掩码最长意味着最"精确", 范围最小</li></ul><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622001259.png" alt="longest match"></p><blockquote><p>假如目标地址为 140.24.7.200 (属于组织 4) 的分组到达 R2, 会从 m1 转发出去 (第一条的掩码最长且成功匹配)<br>之后经过 R3 到达组织 4</p></blockquote><blockquote><p><strong>至于之后的 RIP, OSPF, BGP 等请自行看书, 提纲上都是加粗的…</strong><br>单播路由协议：路由协议的分类及典型的路由协议(RIP、OSPF、BGP)，AS 的概念、RIP 协议和 OSPF 协议、Dijkstra、Bellmanford 算法计算路由表及最小生成树<br>多播的概念和多播路由协议（了解）</p></blockquote><h1 id="part-5-传输层"><a class="markdownIt-Anchor" href="#part-5-传输层"></a> Part 5 传输层</h1><h2 id="chapter-23-udp-tcp-和-sctp"><a class="markdownIt-Anchor" href="#chapter-23-udp-tcp-和-sctp"></a> Chapter 23 UDP、TCP 和 SCTP</h2><h3 id="端口-imp"><a class="markdownIt-Anchor" href="#端口-imp"></a> 端口 [IMP]</h3><ul><li>一个端口号确定了主机上的一个进程</li><li>划分<ul><li>1~1023: 熟知端口</li><li>1024~49151: 注册端口, IANA 不分配不控制, 但可以注册来防止重复</li><li>49152~65535: 动态端口, 可以有任何进程使用, 不需注册</li></ul></li><li>套接字地址: 由 IP 地址和端口号组成, 唯一确定了一台主机上的一个进程</li></ul><h3 id="udp"><a class="markdownIt-Anchor" href="#udp"></a> UDP</h3><blockquote><p>UDP: User Datagram Protocol, 用户数据报协议</p></blockquote><h4 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h4><ul><li>无连接 不可靠 传输层协议</li><li>有限的差错检验</li></ul><h4 id="udp-的熟知端口-imp"><a class="markdownIt-Anchor" href="#udp-的熟知端口-imp"></a> UDP 的熟知端口 [IMP]</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622002944.png" alt="udp port"></p><blockquote><p>可以看书 p468</p></blockquote><h4 id="数据报结构"><a class="markdownIt-Anchor" href="#数据报结构"></a> 数据报结构</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622003102.png" alt="header"></p><ul><li>头部固定 8 字节</li><li>源端口号: 如果是源主机是客户机, 则大概率是临时端口号; 服务器则大概率是熟知端口号</li><li>目的端口号: 类似上面, 不过反过来</li><li>总长度: 头部 (8 字节) + 数据长度</li><li>校验和</li><li>注意在真正的 UDP 头部中, 没有源地址和目的地址 (这是 IP 头部的东西), 但是校验和会用到它们</li></ul><h4 id="校验和-imp"><a class="markdownIt-Anchor" href="#校验和-imp"></a> 校验和 [IMP]</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622003643.png" alt="p header"></p><ul><li>实际上是<strong>伪头部</strong>与头部共同的校验和</li><li>伪头部: 类似 IP 头部的最后 12 字节, 见上图</li><li>数据部分通过填充 0 补齐到 16 位的整数倍, 但<strong>在发送时会被移除, 不进行填充</strong></li><li>在计算完校验和后, 伪头部和填充就被移除, 它们不会交给 IP</li><li>计算方法和之前一样, 16 位分组, 求和, 循环进位, 最后取反码</li><li>校验和是可选的, 若不计算则可在这个字段填充全 1 (因为真正的校验和不可能为全 1, 这说明和为 0)</li></ul><h3 id="tcp-imp"><a class="markdownIt-Anchor" href="#tcp-imp"></a> TCP [IMP]</h3><blockquote><p>TCP: Transmission Control Protocol, 连接控制协议</p></blockquote><h4 id="概念与特点"><a class="markdownIt-Anchor" href="#概念与特点"></a> 概念与特点</h4><ul><li>有连接 可靠 传输层协议</li><li>有流量控制和差错控制</li><li>服务:<ul><li>提供进程到进程的通信</li><li>提供流传递服务, 类似于一个假想的管道, 存在缓冲区</li><li>全双工通信</li><li>面向连接</li></ul></li><li>使用序列号 seq, 值为该段包含的第一个(数据)字节的序号</li><li>使用确认号 ack, 值为接收方预期接受的下一个字节的序号</li></ul><h4 id="段格式"><a class="markdownIt-Anchor" href="#段格式"></a> 段格式</h4><blockquote><p>TCP 中的分组被称为"段"</p></blockquote><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622004618.png" alt="tcp segment"></p><ul><li>源端口地址, 目的端口地址: 和 UDP 中的一样</li><li>序列号 seq: 段中数据的第一个字节的序号, 连接建立时双方各自通过随机数产生初始序列号 (ISN)</li><li>确认号 ack: 段的接收方期望接受的下一个字节号</li><li>头部长度: 单位为<strong>4字节</strong>, 也就是说该字段的值为头部长度除以 4</li><li>保留: 就是保留</li><li>六个控制位<ul><li>URG: 紧急指针有效, 见后面</li><li>ACK: 该帧包含确认</li><li>PSH: 请求急迫/发送数据 <s>(其实没啥用)</s></li><li>RST: 连接复位 <s>(GFW经常就靠这个阻断你的连接)</s></li><li>SYN: 同步序列号</li><li>FIN: 终止连接</li></ul></li><li>窗口: 定义了接收窗口 (rwnd, Receive<strong>r</strong> Window) 的大小, 见阻塞控制</li><li>校验和: 计算方法一样, 也有伪头部, 伪头部 + 头部 + 数据, 但是书上没说 TCP 的伪头部是啥</li><li>紧急指针: 指向紧急字节的最后一个字节, 紧急字节总是位于段的开始, 收到后会被直接送往进程, 无需等待</li></ul><h4 id="连接的建立"><a class="markdownIt-Anchor" href="#连接的建立"></a> 连接的建立</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622104459.png" alt="tcp establish"></p><ul><li>采用三次握手<ul><li>客户端: SYN (仅包含己方 seq, SYN 段不携带数据, 但占用序列号)</li><li>服务器: SYN + ACK (包含服务器的 seq 和 ack, 和单纯的 SYN 一样占用序列号)</li><li>客户端: ACK (若 ACK 段不携带数据, 则不占用序列号)</li></ul></li><li>存在 SYN 洪泛攻击的问题<ul><li>攻击方伪造大量的 SYN, 伪装成正常的连接请求</li><li>由于服务器需要为每一个请求分配资源, 因此很快被耗尽</li><li>最终服务器无法接受新的正常用户的请求 -&gt; 拒绝服务攻击 (DoS, Denial of Service)</li></ul></li></ul><blockquote><p>DDoS, Distributed Denial of Service, 就是分布式拒绝服务攻击</p></blockquote><h4 id="连接终止"><a class="markdownIt-Anchor" href="#连接终止"></a> 连接终止</h4><h5 id="三次挥手"><a class="markdownIt-Anchor" href="#三次挥手"></a> 三次挥手</h5><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622105351.png" alt="3 wave"></p><ul><li>主动方: FIN, 可携带数据, 占用一个序列号</li><li>被动方: FIN+ACK, 可携带数据, 占用一个序列号</li><li>主动方: ACK, 不占用序列号</li></ul><h5 id="四次挥手"><a class="markdownIt-Anchor" href="#四次挥手"></a> 四次挥手</h5><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622105644.png" alt="4 wave"></p><ul><li>主动方: FIN</li><li>被动方: FIN+ACK<ul><li>此时进入<strong>半关闭</strong></li><li>主动方不能够再发送数据, 但可以接收数据</li><li>被动方还能够继续发送数据</li></ul></li><li>被动方: FIN</li><li>主动方: ACK</li></ul><h4 id="差错控制"><a class="markdownIt-Anchor" href="#差错控制"></a> 差错控制</h4><h5 id="校验和-2"><a class="markdownIt-Anchor" href="#校验和-2"></a> 校验和</h5><p>在头部, 校验内容包括伪头部 + 头部 + 数据</p><h5 id="确认-2"><a class="markdownIt-Anchor" href="#确认-2"></a> 确认</h5><p>就是对占用序列号的段回送 ACK -&gt; ACK 本身不占用序列号, 所以不需要确认</p><h5 id="重传"><a class="markdownIt-Anchor" href="#重传"></a> 重传</h5><ul><li>出现损坏, 丢失或延迟时重传段</li><li>在实现中, 分为重传计时器到时和连续收到 3 个 ACK</li><li>重传计时器到时:<ul><li>已发送未确认的(占用序列号的)段有一个定时器<ul><li>称为 RTO 计时器 (Retransmission Time-Out)</li><li>其值根据往返时间动态更新</li><li>对 ACK 段不设置定时器</li></ul></li><li>定时器到时时重发最早的重要的段</li></ul></li><li>连续收到三个 ACK:<ul><li>触发<strong>快速重传</strong></li><li>立即发送缺少的段</li></ul></li><li>失序的段<ul><li>暂时保留, 直到缺少的那个段到达</li><li>TCP 保证提交给进程的数据是顺序正确的</li></ul></li></ul><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622111546.png" alt="RTO"></p><blockquote><p>重传计时器超时重传</p></blockquote><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622111612.png" alt="3 ACK"></p><blockquote><p>快速重传, 重传时 seq 301~400 的计时器还没到时, 但依然重传</p></blockquote><h4 id="tcp-拥塞控制"><a class="markdownIt-Anchor" href="#tcp-拥塞控制"></a> TCP 拥塞控制</h4><ul><li>在这里确定 cwnd 大小 (Congestion Window, 拥塞窗口)</li><li>采用三个阶段: 慢速启动, 拥塞避免, 拥塞检测</li><li>慢速启动: 指数增长<ul><li>开始时 cwnd = 1 MSS (最大段长度, 在连接建立时确定, 相当于这时窗口大小为一个段)</li><li>每一个段的确认都会使 cwnd+1, <strong>按照指数规律增长</strong></li><li>到达<strong>阈值</strong>时, 结束慢速启动阶段</li></ul></li><li>拥塞避免: 加性增加<ul><li>每次窗口中所有段均被确认后才有 cwnd+1</li><li>直到检测到拥塞</li></ul></li><li>拥塞检测: 乘性减少<ul><li>若重传计时器到时, 说明拥塞可能很严重: 段丢失且一直没收到相关信息<ul><li>强烈反应<ul><li>阈值设置为 cwnd 的一半</li><li>cwnd = 1 MSS</li><li>开始慢速启动阶段</li></ul></li><li>相当于阈值变为实际上限的一半, 然后重启传输 (速度方面)</li></ul></li><li>若接收到三个 ACK, 说明可能有轻度拥塞, 一些段可能已经成功到达, 仅有部分缺失<ul><li>轻度反应<ul><li>阈值设置为 cwnd 的一半</li><li>cwnd = 阈值 (部分实现是 阈值+3)</li><li>开始拥塞避免阶段 (就是加性增加)</li></ul></li></ul></li></ul></li></ul><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622114245.png" alt="c-control"></p><blockquote><p>SS: 慢速启动 (指数增长)<br>AI: 加性增加<br>MD: 乘性减少<br>Threshold: 阈值</p></blockquote><h4 id="tcp-流量控制-imp"><a class="markdownIt-Anchor" href="#tcp-流量控制-imp"></a> TCP 流量控制 [IMP]</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622124037.png" alt="Window"></p><ul><li>采用滑动窗口, 面向字节, 又称信贷滑窗协议</li><li>窗口大小为头部中的接收窗口 (rwnd) 与 cwnd 较小值<ul><li>rwnd 表明了接收方当前可用的窗口大小</li></ul></li><li>在窗口中, 左侧为已发送但未确认的, 右侧为可立刻发送的</li><li>在窗口外, 左侧为已发送且已确认的, 右侧为未发送且尚不可发送的</li><li>发送方接收到 ACK 后, 可以合拢窗口: 左侧向右移动</li><li>当 rwnd 或 cwnd 更新时, 可以张开窗口: 右侧向右移动, 但不建议收缩 (右侧向左移动)</li><li>窗口左边沿不能向左移动</li></ul><h2 id="chapter-24-拥塞控制和服务质量"><a class="markdownIt-Anchor" href="#chapter-24-拥塞控制和服务质量"></a> Chapter 24 拥塞控制和服务质量</h2><h3 id="吞吐量和延迟-imp"><a class="markdownIt-Anchor" href="#吞吐量和延迟-imp"></a> 吞吐量和延迟 [IMP]</h3><ul><li>通常是衡量网络性能的因素</li><li>吞吐量:<ul><li>单位时间内通过网络的分组数量</li><li>载荷小于网络容量时, 吞吐量随载荷增加成比例增长</li><li>载荷达到网络容量时, 吞吐量会急剧下降 (一些分组被丢弃导致重传)</li></ul></li><li>延迟: 当载荷远小于网络容量时，延迟最小<ul><li>最小延迟是由传播延迟和处理延迟所组成的，且都可以忽略不计</li><li>载荷达到网络容量时, 延迟急剧增加 (分组需要排队)</li></ul></li></ul><h3 id="拥塞控制-imp"><a class="markdownIt-Anchor" href="#拥塞控制-imp"></a> 拥塞控制 [IMP]</h3><h4 id="开环拥塞控制"><a class="markdownIt-Anchor" href="#开环拥塞控制"></a> 开环拥塞控制</h4><ul><li>重传 (例如 TCP)</li><li>窗口 (比如选择性重复 ARQ)</li><li>确认 (ACK, 使用一个 ACK 确认多个分组与停止-等待 ARQ)</li><li>丢弃 (按照优先级)</li><li>许可 (虚电路建立连接时检查是否有拥塞, 有则拒绝建立连接)</li></ul><h4 id="闭环拥塞控制"><a class="markdownIt-Anchor" href="#闭环拥塞控制"></a> 闭环拥塞控制</h4><ul><li>背压: 从目的端方向的节点逐个拒绝接受上行节点的数据, 直到源端</li><li>抑制分组: 从发生拥塞的节点发送警告信息到源端</li><li>隐含信令: 进行推测, 例如过长时间没有收到确认</li><li>显示信令: 把信号包含在携带数据的分组中, 分前向信令 (向发生拥塞的方向), 后向信令 (原理发生拥塞的方向)</li></ul><h1 id="part-6-应用层"><a class="markdownIt-Anchor" href="#part-6-应用层"></a> Part 6 应用层</h1><h2 id="chapter-25-域名系统"><a class="markdownIt-Anchor" href="#chapter-25-域名系统"></a> Chapter 25 域名系统</h2><blockquote><p>DNS: Domain Name System</p></blockquote><h3 id="域名空间-imp"><a class="markdownIt-Anchor" href="#域名空间-imp"></a> 域名空间 [IMP]</h3><ul><li>使用倒置的树定义</li><li>最多 128 级, 根节点为 0 级</li><li>每个节点都有一个标号 (最长 63 的字符串), <strong>根节点标号为空</strong></li><li>每一个节点的子节点标号不能相同 -&gt; 保证了域名的唯一性</li><li>域名由从子节点向根节点方向上的标号组成, 由点分割</li><li>全称域名 (FQDN)<ul><li>Full Qualified Domain Name</li><li>包含每一个节点</li><li>以点结尾, 因为最后的根节点标号为空</li></ul></li><li>部分域名<ul><li>Partially Qualified Domain Name</li><li>起始于子节点, 但没有到达根节点</li><li>所以不以点结尾</li></ul></li></ul><h3 id="客户端服务器模式的域名解析-imp"><a class="markdownIt-Anchor" href="#客户端服务器模式的域名解析-imp"></a> 客户端服务器模式的域名解析 [IMP]</h3><ul><li>客户端通过请求最近的 DNS 服务器</li><li>正向查询: 域名到地址</li><li>反向查询: 地址到域名, 也叫 PTR 查询 (指针查询)<ul><li>若要查询 A.B.C.D 的域名, 发送 <code>D.C.B.A.in-addr.arpa.</code></li><li>注意反向和最后的点</li></ul></li><li>分为递归解析和迭代解析<ul><li>递归解析: 客户机期望本地服务器直接提供最终结果<ul><li>如果该服务器是这个域名的授权服务器, 则直接响应</li><li>否则把请求转发给另一个服务器 (通常是父服务器)<ul><li>如果父服务器是授权服务器, 则父服务器 -&gt; 本地服务器 -&gt; 客户端</li><li>否则继续递归, 直到找到结果</li></ul></li></ul></li><li>迭代解析: 客户机自己一个一个询问找到结果<ul><li>如果该服务器是这个域名的授权服务器, 则直接响应</li><li>否则该服务器返回一个它认为可能知道的服务器的地址, 由客户机自己去继续查询</li></ul></li></ul></li><li>DNS 服务器采用缓存技术, 存储最近的查询与结果<ul><li>通过在查询条目中添加 TTL (生存时间) 来保证结果不过时</li></ul></li></ul><h3 id="dns-报文"><a class="markdownIt-Anchor" href="#dns-报文"></a> DNS 报文</h3><ul><li>查询和请求报文头部相同</li><li>看书 p534</li></ul><h2 id="chapter-26-远程登录-电子邮件和文件传输"><a class="markdownIt-Anchor" href="#chapter-26-远程登录-电子邮件和文件传输"></a> Chapter 26 远程登录、电子邮件和文件传输</h2><h3 id="telnet"><a class="markdownIt-Anchor" href="#telnet"></a> TELNET</h3><blockquote><p>TELNET: Terminal NETwork, 终端网络</p></blockquote><ul><li>建立到远程计算机的连接 (类似命令行版本的远程桌面)</li><li>是客户端/服务器架构</li></ul><h3 id="电子邮件"><a class="markdownIt-Anchor" href="#电子邮件"></a> 电子邮件</h3><h4 id="构架"><a class="markdownIt-Anchor" href="#构架"></a> 构架</h4><ul><li>UA: 用户代理程序, 负责生成邮件 (类似邮件客户端, 人用的那个)</li><li>MTA: 报文传输代理, 负责转发与保存, 客户端只能推入报文 (push)</li><li>MAA: 报文访问代理, 负责提供收到的报文, 客户端只能取出报文 (pull)</li><li>发送方为 A, 接收方为 B:<ul><li>同一系统: A -&gt; UA -&gt; 系统 -&gt; UA -&gt; B</li><li>不同系统: A -&gt; UA -&gt; MTA客户端(在邮件服务器上) -&gt; 因特网 -&gt; MTA服务器(在另一台邮件服务器上) -&gt; UA -&gt; B</li><li>一方未直接连接到邮件服务器: 先通过广域网/局域网把邮件报文发到服务器</li><li>双方均为👆: A-&gt;UA-&gt;MTA客户端(在A的计算机上)-&gt;MTA客户端(在邮件服务器上)-&gt;因特网-&gt;MTA服务器(在另一台邮件服务器上)-&gt;MAA服务器(同前)-&gt;MAA客户端(在B计算机上)-&gt;UA-&gt;B</li></ul></li></ul><h4 id="mime-imp"><a class="markdownIt-Anchor" href="#mime-imp"></a> MIME [IMP]</h4><blockquote><p>MIME: Multipurpose Internet Mail Extension, 多用途因特网邮件扩展</p></blockquote><ul><li>将非 ASCII 数据转换成 NVT ASCII 数据</li></ul><h4 id="smtp-imp"><a class="markdownIt-Anchor" href="#smtp-imp"></a> SMTP [IMP]</h4><blockquote><p>SMTP: Simple Mail Transfer Protocol, 简单邮件传输协议</p></blockquote><ul><li>是报文传输代理 (MTA) 协议</li><li>定义了一组交换邮件的命令</li></ul><h4 id="pop3-和-imap4-imp"><a class="markdownIt-Anchor" href="#pop3-和-imap4-imp"></a> POP3 和 IMAP4 [IMP]</h4><blockquote><p>POP: Post Office Protocol ver 3, 邮局协议版本 3<br>IMAP: Internet Mail Access Protocol ver 4, 因特网邮件访问协议版本 4</p></blockquote><ul><li>都是报文访问代理 (MAA) 协议, 提供用户和邮件服务器间的报文阅读</li><li>POP3:<ul><li>功能简单, 不支持预览</li><li>支持删除模式和保存模式<ul><li>删除: 邮件从邮箱读取后即被删除</li><li>保存: 读后不删除</li></ul></li></ul></li><li>IMAP4:<ul><li>可以在下载前读取头部或内容中的特定字符串</li><li>可以部分下载邮件内容</li></ul></li></ul><h3 id="文件传输"><a class="markdownIt-Anchor" href="#文件传输"></a> 文件传输</h3><h4 id="ftp-imp"><a class="markdownIt-Anchor" href="#ftp-imp"></a> FTP [IMP]</h4><ul><li>客户机/服务器模式</li><li>控制端口 21, 数据端口 20</li><li>前者在整个会话期间持续连接, 后者仅在文件传输时连接</li><li>需要登陆, 但服务器可以允许匿名帐户 (谁都能用)</li><li>可以传输文本和二进制文件</li></ul><h2 id="chapter-27-万维网与超文本传输协议"><a class="markdownIt-Anchor" href="#chapter-27-万维网与超文本传输协议"></a> Chapter 27 万维网与超文本传输协议</h2><h3 id="url-imp"><a class="markdownIt-Anchor" href="#url-imp"></a> URL [IMP]</h3><blockquote><p>URL: Uniform Resource Locator, 统一资源定位符</p></blockquote><ul><li>格式: <code>协议 :// 主机 : 端口 / 路径</code><ul><li>例如 <code>https://example.suffix:80/index</code></li></ul></li><li>端口可选, 协议最常用的是 HTTP</li></ul><h3 id="http"><a class="markdownIt-Anchor" href="#http"></a> HTTP</h3><blockquote><p>HTTP: HyperText Transfer Protocol, 超文本传输协议</p></blockquote><h4 id="概念-imp-3"><a class="markdownIt-Anchor" href="#概念-imp-3"></a> 概念 [IMP]</h4><ul><li>在 80 端口上使用 TCP</li><li>同样用来存取信息, 类似 FTP 和 SMTP 的组合</li></ul><h4 id="报文结构-imp"><a class="markdownIt-Anchor" href="#报文结构-imp"></a> 报文结构 [IMP]</h4><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622141444.png" alt="req"></p><blockquote><p>请求报文的结构</p></blockquote><p><img src="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622141525.png" alt="res"></p><blockquote><p>响应报文的结构</p></blockquote><ul><li>都是纯文本的</li><li>请求类型: GET, POST, HEAD, PUT, TRACE 等等</li><li>首部: 类似于选项, 指定了可接受的格式, 语言, 过期时间等</li></ul><blockquote><p>无关内容: 实际上有些人认为 HTTP 报文由于使用了纯文本, 不利于快速解析<br>不过纯文本倒是有个显著优点 - 人类可读 🐶</p></blockquote><h4 id="http-操作"><a class="markdownIt-Anchor" href="#http-操作"></a> HTTP 操作</h4><ul><li>HTTP 本身是无状态的, 状态需要依赖 cookie 保存</li><li>客户端发送请求报文来初始化HTTP事务</li><li>服务器发送响应报文进行回复</li></ul><blockquote><p><em>0620 🕊🕊🕊 计划: To Chapter 18, end of Part 3 - Datalink Layer</em><br><em>0620 Completed 🍻</em><br><em>0621 🕊🕊🕊 计划: To Chapter 20 - IP Protocol</em><br><em>0621 Finished Chapter 24, end of Part 5 - Network Layer 🍻</em><br><em>0622 🕊🕊🕊 计划: Finish’em ALL</em><br><em>0622 We made it.</em></p></blockquote>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/CS-Network/">CS Network</category>
      
      <category domain="https://horizonchaser.github.io/tags/Review/">Review</category>
      
      
      <comments>https://horizonchaser.github.io/2021/06/13/CS-Network-Review-and-Summary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>BUUCTF Weekly Reverse</title>
      <link>https://horizonchaser.github.io/2021/02/01/2021-Weekly-Reverse/</link>
      <guid>https://horizonchaser.github.io/2021/02/01/2021-Weekly-Reverse/</guid>
      <pubDate>Mon, 01 Feb 2021 21:04:56 GMT</pubDate>
      
      <description>BUUCTF上的逆向练习与 Writeup</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="week-5-0131-0206-buuctf"><a class="markdownIt-Anchor" href="#week-5-0131-0206-buuctf"></a> Week 5, 01/31 - 02/06, BUUCTF</h2><h3 id="reverse1"><a class="markdownIt-Anchor" href="#reverse1"></a> reverse1</h3><p>用 ExeinfoPE 看一下, 是一个 x64 程序.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210201212113576.png" alt="image-20210201212113576"></p><p>IDA, 入口是<code>sub_140012170</code>, 一路跟踪下去到<code>sub_140012190</code>,  <s>然后分析不能</s></p><p>从 Strings window 看一下, 发现一条明显的提示语 <code>wrong flag</code>, 看一下, 是<code>sub_1400118C0</code>引用了它, 跳过去康康.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210201212247636.png" alt="image-20210201212247636"></p><p>第18行的 <code>for</code>循环中, 把 <code>Str2[]</code>中的<code>o</code>全部替换为了<code>0</code>, 然后和输入的<code>Str1</code>进行比较, 判断是否正确.</p><p><code>Str2[]</code>的内容是<code>{hello_world}</code>, 替换后输入程序检查, 确定正确.</p><p><code>flag{hell0_w0rld}</code></p><h3 id="reverse3"><a class="markdownIt-Anchor" href="#reverse3"></a> reverse3</h3><p>IDA, 找到 <code>main</code>之后 F5, 大概修改一些名称之后得到如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main_0</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">size_t</span> StrLen<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v4<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token class-name">size_t</span> destLen2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-188h]</span>  <span class="token keyword">char</span> v8<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-188h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [esp+DCh] [ebp-ACh]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+E8h] [ebp-A0h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> destLen<span class="token punctuation">;</span> <span class="token comment">// [esp+E8h] [ebp-A0h]</span>  <span class="token keyword">char</span> Destination<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+F4h] [ebp-94h] BYREF</span>  <span class="token keyword">char</span> Str<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+160h] [ebp-28h] BYREF</span>  <span class="token keyword">char</span> v14<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+17Ch] [ebp-Ch] BYREF</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>i <span class="token operator">&gt;=</span> <span class="token number">0x64</span> <span class="token punctuation">)</span>      <span class="token function">j____report_rangecheckfailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Destination<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"please enter the flag:"</span><span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"%20s"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>  StrLen <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">sub_4110BE</span><span class="token punctuation">(</span>Str<span class="token punctuation">,</span> StrLen<span class="token punctuation">,</span> v14<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strncpy</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> v4<span class="token punctuation">,</span> <span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  destLen <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> destLen<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    Destination<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> j<span class="token punctuation">;</span>  destLen2 <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Destination<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>Destination<span class="token punctuation">,</span> aE3nifih9bCNDh<span class="token punctuation">,</span> destLen2<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"rigth flag!\n"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"wrong flag!\n"</span><span class="token punctuation">,</span> v8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在得到输入之后, <code>sub_4110BE</code>对输入的 <code>Str</code>进行了一些处理, 同时 27 行的 <code>for</code> 循环也对 <code>Destination[]</code> 进行了移位, 之后两者比较判断是否正确.</p><p>观察 <code>sub_4110BE</code>, 发现其中调用了一个 base64 的编码表, 结合行为确定是对输入进行 base64 编码.</p><p>把 <code>Destination[]</code>的内容进行反移位, 得到<code>e2lfbDB2ZV95b3V9</code>, base64 解码后得到 <code>{i_l0ve_you}</code></p><p><code>flag{i_l0ve_you}</code></p><p><s>另外题中的"right"打错了…</s></p><h3 id="simplerev"><a class="markdownIt-Anchor" href="#simplerev"></a> SimpleRev</h3><p>DIE 检查, 发现是一个 x64 ELF 文件. IDA 打开, 定位到 <code>main</code>.</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl __noreturn main(int argc, const char **argv, const char **envp){  int v3; // eax  char v4; // [rsp+Fh] [rbp-1h]  while ( 1 )  {    while ( 1 )    {      printf("Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: ");      v4 = getchar();      if ( v4 != 'd' &amp;&amp; v4 != 'D' )        break;      Decry();    }    if ( v4 == 'q' || v4 == 'Q' )      Exit("Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: ", argv);    puts("Input fault format!");    v3 = getchar();    putchar(v3);  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>明显, 在 <code>Decry</code> 函数中进行了 flag 的验证…</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned __int64 Decry(){  char currChar; // [rsp+Fh] [rbp-51h]  int v2; // [rsp+10h] [rbp-50h]  int v3; // [rsp+14h] [rbp-4Ch]  int i; // [rsp+18h] [rbp-48h]  int keyLen; // [rsp+1Ch] [rbp-44h]  char src[8]; // [rsp+20h] [rbp-40h] BYREF  __int64 v7; // [rsp+28h] [rbp-38h]  int v8; // [rsp+30h] [rbp-30h]  char *v9; // [rsp+40h] [rbp-20h] BYREF  __int64 v10; // [rsp+48h] [rbp-18h]  int v11; // [rsp+50h] [rbp-10h]  unsigned __int64 v12; // [rsp+58h] [rbp-8h]  v12 = __readfsqword(0x28u);  *(_QWORD *)src = 'SLCDN';  v7 = 0LL;  v8 = 0;  v9 = (char *)'wodah';  v10 = 0LL;  v11 = 0;  text = join(key3, (const char *)&amp;v9);         // text == killshadow  strcpy(key, key1);                            // key == ASDFK  strcat(key, src);                             // key == ASDFKNDCLS  v2 = 0;  v3 = 0;  getchar();  keyLen = strlen(key);  for ( i = 0; i &lt; keyLen; ++i )  {    if ( key[v3 % keyLen] &gt; '@' &amp;&amp; key[v3 % keyLen] &lt;= 'Z' )      key[i] = key[v3 % keyLen] + 32;    ++v3;  }  printf("Please input your flag:");  while ( 1 )  {    currChar = getchar();    if ( currChar == '\n' )      break;    if ( currChar == ' ' )    {      ++v2;    }    else    {      if ( currChar &lt;= 96 || currChar &gt; 122 )   // NOT lower case      {        if ( currChar &gt; '@' &amp;&amp; currChar &lt;= 'Z' )// upper case        {          str2[v2] = (currChar - 39 - key[v3 % keyLen] + 97) % 26 + 97;          ++v3;        }      }      else      {        str2[v2] = (currChar - 39 - key[v3 % keyLen] + 97) % 26 + 97;        ++v3;      }      if ( !(v3 % keyLen) )        putchar(' ');      ++v2;    }  }  if ( !strcmp(text, str2) )    puts("Congratulation!\n");  else    puts("Try again!\n");  return __readfsqword(0x28u) ^ v12;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 37 行的 <code>while</code> 循环后, 通过计算 <code>str2[]</code>的值并判断是否与<code>text</code>相等来确定 flag 正确与否, 写个脚本爆破即可.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">upperTable<span class="token operator">=</span><span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>lowerTable <span class="token operator">=</span> upperTable<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>key<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'ADSFKNDCLS'</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>klens<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>text<span class="token operator">=</span><span class="token string">'killshadow'</span>flag<span class="token operator">=</span><span class="token string">''</span>flag2<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str2<span class="token operator">=</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> upperTable<span class="token punctuation">:</span>        <span class="token keyword">if</span> str2<span class="token operator">==</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i  <span class="token operator">%</span> klens<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">+=</span>c<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str2<span class="token operator">=</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> lowerTable<span class="token punctuation">:</span>        <span class="token keyword">if</span> str2<span class="token operator">==</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i  <span class="token operator">%</span> klens<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag2<span class="token operator">+=</span>c<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag{'</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">'}'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag{'</span><span class="token operator">+</span>flag2<span class="token operator">+</span><span class="token string">'}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为并未对大小写进行限定, 所以大小写理论上均可…大概, 总之大写是可以的.</p><p><code>flag{KLDQCUDFZO}</code></p><h2 id="week-6-0207-0214-buuctf"><a class="markdownIt-Anchor" href="#week-6-0207-0214-buuctf"></a> Week 6, 02/07 - 02/14, BUUCTF</h2><h3 id="crackrtf"><a class="markdownIt-Anchor" href="#crackrtf"></a> CrackRTF</h3><p>看题目说明, 在文件中藏了一个 rtf 文件, 不过用 binwalk 扫描没发现什么. 可能是加密了…</p><p>用 IDA 打开, 定位到 <code>main_0</code>, 发现需要两个密码, 长度均为 6 个字符, 其中第一个为纯数字, 与 <code>@DBApp</code> 链接后计算一个哈希值, 与 <code>6E32D0943418C2C33385BC35A1470250DD8923A9</code> 比较.</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int __cdecl main_0(int argc, const char **argv, const char **envp){  DWORD v3; // eax  DWORD v4; // eax  char Str[260]; // [esp+4Ch] [ebp-310h] BYREF  int v7; // [esp+150h] [ebp-20Ch]  char String1[260]; // [esp+154h] [ebp-208h] BYREF  char Destination[260]; // [esp+258h] [ebp-104h] BYREF  memset(Destination, 0, sizeof(Destination));  memset(String1, 0, sizeof(String1));  v7 = 0;  printf("pls input the first passwd(1): ");  scanf("%s", Destination);  if ( strlen(Destination) != 6 )  {    printf("Must be 6 characters!\n");    ExitProcess(0);  }  v7 = atoi(Destination);  if ( v7 &lt; 100000 )    ExitProcess(0);  strcat(Destination, "@DBApp");  v3 = strlen(Destination);  getSHA1((BYTE *)Destination, v3, String1);  if ( !_strcmpi(String1, "6E32D0943418C2C33385BC35A1470250DD8923A9") )  {    printf("continue...\n\n");                  // Destination == 123321@DBApp    printf("pls input the first passwd(2): ");    memset(Str, 0, sizeof(Str));    scanf("%s", Str);    if ( strlen(Str) != 6 )    {      printf("Must be 6 characters!\n");      ExitProcess(0);    }    strcat(Str, Destination);    memset(String1, 0, sizeof(String1));    v4 = strlen(Str);    getMD5((BYTE *)Str, v4, String1);    if ( !_strcmpi("27019e688a4e62a649fd99cadaafdb4e", String1) )    {      if ( !(unsigned __int8)sub_40100F(Str) )      {        printf("Error!!\n");        ExitProcess(0);      }      printf("bye ~~\n");    }  }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入 <code>sub_401230</code>, 定位到 <code>CryptCreateHash(phProv, 0x8004u, 0, 0, &amp;phHash)</code>, 搜一下这个函数的<a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id">文档</a>, 发现第二个参数控制了计算的哈希种类, <code>0x8004</code>是 SHA1, <code>0x8003</code>是 MD5. 由此我们可以对在 [100000, 1000000) 的前半部分进行爆破, 写个脚本.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibprefix <span class="token operator">=</span> <span class="token string">""</span>postfix <span class="token operator">=</span> <span class="token string">"@DBApp"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    prefix <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    shaObj <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> postfix<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(shaObj.hexdigest())</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>shaObj<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"6E32D0943418C2C33385BC35A1470250DD8923A9"</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> postfix<span class="token punctuation">)</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样, 我们得到了第一个密码 <code>1233321</code>, 这时 <code>Destination == "123321@DBApp"</code>, 输入的第二个密码后面会连接 <code>Destination</code>, 然后计算 MD5 值, 和 <code>27019e688a4e62a649fd99cadaafdb4e</code>比较, 判断是否正确.</p><p>需要注意的是, 第二个密码只限制了长度, 没有限制是纯数字…<s>没注意到的话你可能就会和我一样卡住了</s></p><p>到这里, 我们有两种方法.</p><h4 id="充分利用你电脑的计算能力"><a class="markdownIt-Anchor" href="#充分利用你电脑的计算能力"></a> 充分利用你电脑的计算能力</h4><p>我们已知第二个 MD5 原文的后半部分和前半部分的长度, 相当于一个加盐的 MD5 爆破 - <a href="https://github.com/hashcat/hashcat">HashCat </a>很适合干这个事儿, 特别是你的 GPU 比较强的时候.</p><p>用如下的命令行进行一次 <code>md5($pass.$salt)</code>掩码攻击. <s>其实就是暴力穷举, 不过更高级一点, 大概</s></p><p><code>.\hashcat.exe -m 10 "27019e688a4e62a649fd99cadaafdb4e:123321@DBApp" -a 3 ?a?a?a?a?a?a</code></p><p>在我的电脑上, 大概十秒就得到了结果…</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210207140651360.png" alt="image-20210207140651360"></p><p>前半部分是 <code>~!3a@0</code>, 把俩密码输入程序, 得到一个 RTF 文档, 打开就是 flag.</p><p><s>不过, 我认为这应该不是出题人的最初想法吧</s></p><h4 id="充分利用你自己的-计算能力-解题能力"><a class="markdownIt-Anchor" href="#充分利用你自己的-计算能力-解题能力"></a> 充分利用你自己的 <s>计算能力</s> 解题能力</h4><p>在 <code>main_0</code> 的 44 行, 我们发现在两个密码验证正确后, 调用了 <code>sub_40400F</code>, 参数是 <code>Str</code>.</p><p><code>sub_40400F</code>会再调用 <code>sub_4014D0</code>, 参数变为 <code>LPCSTR</code>类型.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> __cdecl <span class="token function">sub_4014D0</span><span class="token punctuation">(</span>LPCSTR lpString<span class="token punctuation">)</span><span class="token punctuation">{</span>  LPCVOID lpBuffer<span class="token punctuation">;</span> <span class="token comment">// [esp+50h] [ebp-1Ch]</span>  DWORD NumberOfBytesWritten<span class="token punctuation">;</span> <span class="token comment">// [esp+58h] [ebp-14h] BYREF</span>  DWORD nNumberOfBytesToWrite<span class="token punctuation">;</span> <span class="token comment">// [esp+5Ch] [ebp-10h]</span>  HGLOBAL hResData<span class="token punctuation">;</span> <span class="token comment">// [esp+60h] [ebp-Ch]</span>  HRSRC hResInfo<span class="token punctuation">;</span> <span class="token comment">// [esp+64h] [ebp-8h]</span>  HANDLE hFile<span class="token punctuation">;</span> <span class="token comment">// [esp+68h] [ebp-4h]</span>  hFile <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  hResData <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  nNumberOfBytesToWrite <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  NumberOfBytesWritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  hResInfo <span class="token operator">=</span> <span class="token function">FindResourceA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>LPCSTR<span class="token punctuation">)</span><span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>hResInfo <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  nNumberOfBytesToWrite <span class="token operator">=</span> <span class="token function">SizeofResource</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hResInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  hResData <span class="token operator">=</span> <span class="token function">LoadResource</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hResInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>hResData <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  lpBuffer <span class="token operator">=</span> <span class="token function">LockResource</span><span class="token punctuation">(</span>hResData<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_401005</span><span class="token punctuation">(</span>lpString<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>lpBuffer<span class="token punctuation">,</span> nNumberOfBytesToWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>  hFile <span class="token operator">=</span> <span class="token function">CreateFileA</span><span class="token punctuation">(</span><span class="token string">"dbapp.rtf"</span><span class="token punctuation">,</span> <span class="token number">0x10000000u</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2u</span><span class="token punctuation">,</span> <span class="token number">0x80u</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> hFile <span class="token operator">==</span> <span class="token punctuation">(</span>HANDLE<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>hFile<span class="token punctuation">,</span> lpBuffer<span class="token punctuation">,</span> nNumberOfBytesToWrite<span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberOfBytesWritten<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">CloseHandle</span><span class="token punctuation">(</span>hFile<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是 <code>FindResourceA</code>这个函数, 从<a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-findresourcea">文档</a>来看, 它会尝试寻找名称为 <code>0x65</code>, 类型为 <code>AAA</code> 的资源, 然后通过<code>SizeofResource</code>计算长度, 通过<code>LoadResource</code>加载到<code>lpBuffer</code>中并上锁, 之后调用了<code>sub_401005</code>进行了什么操作, 然后创建<code>dbapp.rtf</code>并写文件, 最后关闭.</p><p>看来<code>sub_401005</code>就是解密函数了.</p><p><code>sub_401005</code>会继续调用<code>sub_401420</code>, 主要是一个异或的循环…</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">unsigned int __cdecl sub_401420(LPCSTR key, int fileContentOffset, int a3){  unsigned int result; // eax  unsigned int i; // [esp+4Ch] [ebp-Ch]  unsigned int keyLen; // [esp+54h] [ebp-4h]  keyLen = lstrlenA(key);  for ( i = 0; ; ++i )  {    result = i;    if ( i &gt;= a3 )      break;    *(_BYTE *)(i + fileContentOffset) ^= key[i % keyLen];  }  return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里, 会将现有数据的每一位和密钥进行异或作为解密, 而原文件是一个 RTF 格式的文件, 文件头是 <a href="https://www.filesignatures.net/index.php?page=search&amp;search=7B5C72746631&amp;mode=SIG"><code>7B 5C 72 74 66 31</code></a>, 正好六个字节, 和第二段密码一样长.</p><p>参考<a href="https://blog.csdn.net/qq_43786458/article/details/102488408">这篇题解</a>, 用 ResourceHacker 看一下资源,果然找到了这个. (0x65 == 101)</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210207150448312.png" alt="image-20210207150448312"></p><p>加密后的文件头是 <code>05 7D 41 15 26 01</code>, 把它和原来的文件头进行异或就得到了第二段密码: <code>~!3a@0</code></p><p><code>flag{N0_M0re_Free_Bugs}</code></p><h2 id="week-11-0314-0320-buuctf"><a class="markdownIt-Anchor" href="#week-11-0314-0320-buuctf"></a> Week 11, 03/14 - 03/20, BUUCTF</h2><h3 id="suctf2019signin"><a class="markdownIt-Anchor" href="#suctf2019signin"></a> [SUCTF2019]SignIn</h3><p><s>好像摸鱼摸的太狠了… 从开学到现在啥也没干…</s></p><p>IDA 打开, 定位到<code>main</code>, 发现两个大整数.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-4A0h] BYREF</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-490h] BYREF</span>  <span class="token keyword">char</span> v6<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-480h] BYREF</span>  <span class="token keyword">char</span> v7<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-470h] BYREF</span>  <span class="token keyword">char</span> input<span class="token punctuation">[</span><span class="token number">112</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-460h] BYREF</span>  <span class="token keyword">char</span> coded<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+B0h] [rbp-3F0h] BYREF</span>  <span class="token keyword">unsigned</span> __int64 v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+498h] [rbp-8h]</span>  v10 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[sign in]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[input your flag]: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%99s"</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_96A</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> coded<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__gmpz_init_set_str</span><span class="token punctuation">(</span>v7<span class="token punctuation">,</span> <span class="token string">"ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35"</span><span class="token punctuation">,</span> <span class="token number">16LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__gmpz_init_set_str</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> coded<span class="token punctuation">,</span> <span class="token number">16LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__gmpz_init_set_str</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token string">"103461035900816914121390101299049044413950405173712170434161686539878160984549"</span><span class="token punctuation">,</span> <span class="token number">10LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__gmpz_init_set_str</span><span class="token punctuation">(</span>v5<span class="token punctuation">,</span> <span class="token string">"65537"</span><span class="token punctuation">,</span> <span class="token number">10LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">__gmpz_powm</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> v6<span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">__gmpz_cmp</span><span class="token punctuation">(</span>v6<span class="token punctuation">,</span> v7<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"GG!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"TTTTTTTTTTql!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sub_96A</code>会把输入进行处理, 得到 16 进制字符串. 之后的<code>__gmpz_</code>系列函数是 GNU 的高精度计算库.</p><p>16 ~ 19 行初始化了四个整数, 查看<a href="https://gmplib.org/manual/Integer-Exponentiation">文档</a>发现<code>__gmpz_powm(mpz_t rop, const mpz_t base, const mpz_t exp, const mpz_t mod)</code>实际上等价于<code>rop = (base ^ exp) % mod</code>. 另外, 据说这个函数经常在 RSA 算法中出现…</p><p>RSA! 这些大整数正好就是 RSA 中会用到的! 对应一下, <code>v7</code>是密文, <code>v6</code>是明文, <code>v5</code>是<code>e</code>, <code>v4</code>就是<code>n</code>. 把<code>v4</code>放到 <a href="http://factordb.com/index.php">factor.db</a> 分解一下, 得到了<code>p</code>和<code>q</code>.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210318200048244.png" alt="image-20210318200048244"></p><p>这样, RSA 算法的所有变量我们都拿到了, 直接写个脚本解密就能拿到 flag 了.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> binasciin <span class="token operator">=</span> <span class="token number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span>p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">282164587459512124844245113950593348271</span><span class="token punctuation">)</span>q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">366669102002966856876605669837014229419</span><span class="token punctuation">)</span>e <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">65537</span><span class="token punctuation">)</span>eula <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> eula<span class="token punctuation">)</span>c <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span><span class="token number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span><span class="token punctuation">)</span>dec <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"十进制:\n%s"</span><span class="token operator">%</span>dec<span class="token punctuation">)</span>dec_hex <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"十六进制:\n%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>dec_hex<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ascii:\n%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>a2b_hex<span class="token punctuation">(</span>dec_hex<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>gmpy2</code>在我的 Windows 下装不上 (需要<code>gmp</code> <code>mpfr</code> <code>mpc</code>), 因此我在 Ubuntu 虚拟机下面装了.</p><p>拿到结果.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210318200810904.png" alt="image-20210318200810904"></p><p>flag: <code>suctf{Pwn_@_hundred_years}</code></p><h2 id="week-13-0328-0403-buuctf"><a class="markdownIt-Anchor" href="#week-13-0328-0403-buuctf"></a> Week 13, 03/28 - 04/03, BUUCTF</h2><h3 id="flareon6-overlong"><a class="markdownIt-Anchor" href="#flareon6-overlong"></a> [FlareOn6] Overlong</h3><p>PE32 程序, 没发现有壳, 直接用 IDA 打开, 只有三个函数, 而且没有 <code>.init_array</code>和<code>.fini_array</code>段, 没有发现有价值的明文字符串 - 也就是说有某种形式的加解密.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210402231014192.png" alt="image-20210402231014192"></p><p>运行一下试试, 注意到下图最后是个冒号… 推测应该是长度限制了.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210402231001573.png" alt="image-20210402231001573"></p><p>IDA 打开<code>start</code>函数, 很容易定位到解密函数, 它的第二个参数是密文, 第三个参数就是长度.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __stdcall <span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">,</span> <span class="token keyword">int</span> a4<span class="token punctuation">)</span><span class="token punctuation">{</span>  CHAR Text<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-84h] BYREF</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+80h] [ebp-4h]</span>  v6 <span class="token operator">=</span> <span class="token function">sub_401160</span><span class="token punctuation">(</span>Text<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_402008<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 解密函数</span>  Text<span class="token punctuation">[</span>v6<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">MessageBoxA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Caption<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.text:004011C0 start           proc near.text:004011C0.text:004011C0 Text            = byte ptr -84h.text:004011C0 var_4           = dword ptr -4.text:004011C0.text:004011C0                 push    ebp.text:004011C1                 mov     ebp, esp.text:004011C3                 sub     esp, 84h.text:004011C9                 push    1Ch.text:004011CB                 push    offset unk_402008.text:004011D0                 lea     eax, [ebp+Text].text:004011D6                 push    eax.text:004011D7                 call    sub_401160.text:004011DC                 add     esp, 0Ch.text:004011DF                 mov     [ebp+var_4], eax.text:004011E2                 mov     ecx, [ebp+var_4].text:004011E5                 mov     [ebp+ecx+Text], 0.text:004011ED                 push    0               ; uType.text:004011EF                 push    offset Caption  ; "Output".text:004011F4                 lea     edx, [ebp+Text].text:004011FA                 push    edx             ; lpText.text:004011FB                 push    0               ; hWnd.text:004011FD                 call    ds:MessageBoxA.text:00401203                 xor     eax, eax.text:00401205                 mov     esp, ebp.text:00401207                 pop     ebp.text:00401208                 retn    10h.text:00401208 start           endp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>unk_402008</code>的长度是 <code>0xAF</code>, 尝试修改一下. <strong>但是由于某些原因, 在用 KeyPatch 修改<code>push 1Ch</code>的时候会干扰下一条指令…</strong></p><p>用动态调试, 在<code>0x4011C9</code>下个断点, 在 push 之后直接把栈上数据改成 <code>0xAF</code>, 如下图.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210402232605263.png" alt="image-20210402232605263"></p><p>然后继续执行, 看到了 <s>好康的</s> 答案.</p><p><img src="/2021/02/01/2021-Weekly-Reverse/image-20210402232658068.png" alt="image-20210402232658068"></p><p><code>flag{I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com}</code></p><h3 id="gxyctf2019-simple-cpp"><a class="markdownIt-Anchor" href="#gxyctf2019-simple-cpp"></a> [GXYCTF2019] simple CPP</h3><p><s>果然题面里有 simple 的不是送分题就是送命题</s></p><p>IDA打开, 按顺序把<code>main</code>分成三部分</p><h4 id="第一部分-异或加密"><a class="markdownIt-Anchor" href="#第一部分-异或加密"></a> 第一部分 异或加密</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v40 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>v41 <span class="token operator">=</span> <span class="token number">15</span>i64<span class="token punctuation">;</span><span class="token function">LOBYTE</span><span class="token punctuation">(</span>Block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v4 <span class="token operator">=</span> std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>       std<span class="token operator">::</span>cout<span class="token punctuation">,</span>       <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"I'm a first timer of Logic algebra , how about you?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>ostream<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> std<span class="token operator">::</span>endl<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Let's start our game,Please input your flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>operator<span class="token operator">&gt;&gt;</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cin<span class="token punctuation">,</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>string <span class="token operator">*</span><span class="token punctuation">)</span>Block<span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>ostream<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> std<span class="token operator">::</span>endl<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v40 <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">&gt;</span> <span class="token number">25</span> <span class="token punctuation">)</span> <span class="token comment">//v40 is len of input str</span><span class="token punctuation">{</span>  v35 <span class="token operator">=</span> std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Wrong input ,no GXY{} in input words"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  std<span class="token operator">::</span>ostream<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>v35<span class="token punctuation">,</span> std<span class="token operator">::</span>endl<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">goto</span> LABEL_41<span class="token punctuation">;</span><span class="token punctuation">}</span>v5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8 <span class="token operator">*</span><span class="token punctuation">)</span>operator <span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0x20u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>v6 <span class="token operator">=</span> v5<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v5 <span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  v6 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span><span class="token punctuation">}</span>v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> v40 <span class="token punctuation">)</span><span class="token punctuation">{</span>  v8 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    v9 <span class="token operator">=</span> Block<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v41 <span class="token operator">&gt;=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span>      v9 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>Block<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token operator">&amp;</span>qword_7FF73C476048<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span>qword_7FF73C476060 <span class="token operator">&gt;=</span> <span class="token number">0x10</span> <span class="token punctuation">)</span><span class="token comment">// qword -&gt; xor key</span>      v10 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>qword_7FF73C476048<span class="token punctuation">;</span>    v6<span class="token punctuation">[</span>v8<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v9 <span class="token operator">+</span> v8<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>v10 <span class="token operator">+</span> v7 <span class="token operator">%</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>v7<span class="token punctuation">;</span>    <span class="token operator">++</span>v8<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v7 <span class="token operator">&lt;</span> v40 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里会首先对输入进行一次异或加密并保存在<code>v6</code>, key 是 <code>*qword_7FF73C476060</code>, 实际内容未知, 等到动态调试时再确定.</p><h4 id="第二部分-分组"><a class="markdownIt-Anchor" href="#第二部分-分组"></a> 第二部分 分组</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">  v11 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  v14 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v40 <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token punctuation">)</span>    <span class="token keyword">goto</span> LABEL_27<span class="token punctuation">;</span>  v15 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v40 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token keyword">goto</span> LABEL_27<span class="token punctuation">;</span>  v16 <span class="token operator">=</span> v6<span class="token punctuation">;</span> <span class="token comment">//v16 points to input str</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    v17 <span class="token operator">=</span> <span class="token operator">*</span>v16 <span class="token operator">+</span> v11<span class="token punctuation">;</span>    <span class="token operator">++</span>v15<span class="token punctuation">;</span>    <span class="token operator">++</span>v16<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span> v15 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>        v14 <span class="token operator">=</span> v17<span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_23<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">16</span><span class="token operator">:</span>        v13 <span class="token operator">=</span> v17<span class="token punctuation">;</span>        <span class="token keyword">goto</span> LABEL_23<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">24</span><span class="token operator">:</span>        v12 <span class="token operator">=</span> v17<span class="token punctuation">;</span>LABEL_23<span class="token operator">:</span>        v17 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">32</span><span class="token operator">:</span>        std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"ERRO,out of range"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    v11 <span class="token operator">=</span> v17 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v15 <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v40 <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里把输入按照 8 个字符为一组 (正好 64 位)分开, 分别赋给<code>v14</code> <code>v13</code> <code>v12</code> <code>v11</code>.</p><h4 id="第三部分-校验"><a class="markdownIt-Anchor" href="#第三部分-校验"></a> 第三部分 校验</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token keyword">if</span> <span class="token punctuation">(</span> v14 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v18 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64 <span class="token operator">*</span><span class="token punctuation">)</span>operator <span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0x20u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>v18 <span class="token operator">=</span> v14<span class="token punctuation">;</span>    v18<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v13<span class="token punctuation">;</span>    v18<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v12<span class="token punctuation">;</span>    v18<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v11<span class="token punctuation">;</span>    <span class="token keyword">goto</span> LABEL_28<span class="token punctuation">;</span>  <span class="token punctuation">}</span>LABEL_27<span class="token operator">:</span>  v18 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>LABEL_28<span class="token operator">:</span>  v38 <span class="token operator">=</span> v18<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//v12</span>  v19 <span class="token operator">=</span> v18<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//v13</span>  v20 <span class="token operator">=</span> <span class="token operator">*</span>v18<span class="token punctuation">;</span> <span class="token comment">//v14</span>  v21 <span class="token operator">=</span> <span class="token punctuation">(</span>__int64 <span class="token operator">*</span><span class="token punctuation">)</span>operator <span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0x20u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>  v22 <span class="token operator">=</span> v19 <span class="token operator">&amp;</span> v20<span class="token punctuation">;</span> <span class="token comment">//v13&amp;v14</span>  <span class="token operator">*</span>v21 <span class="token operator">=</span> v19 <span class="token operator">&amp;</span> v20<span class="token punctuation">;</span>  v23 <span class="token operator">=</span> v38 <span class="token operator">&amp;</span> <span class="token operator">~</span>v20<span class="token punctuation">;</span>   v21<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v23<span class="token punctuation">;</span>  v24 <span class="token operator">=</span> <span class="token operator">~</span>v19<span class="token punctuation">;</span>  v25 <span class="token operator">=</span> v38 <span class="token operator">&amp;</span> v24<span class="token punctuation">;</span>  v21<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v38 <span class="token operator">&amp;</span> v24<span class="token punctuation">;</span>  v26 <span class="token operator">=</span> v20 <span class="token operator">&amp;</span> v24<span class="token punctuation">;</span>  v21<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v26<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v23 <span class="token operator">!=</span> <span class="token number">0x11204161012</span>i64 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v21<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>    v23 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  v27 <span class="token operator">=</span> v23 <span class="token operator">|</span> v22 <span class="token operator">|</span> v25 <span class="token operator">|</span> v26<span class="token punctuation">;</span>  v28 <span class="token operator">=</span> v18<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v29 <span class="token operator">=</span> v18<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v30 <span class="token operator">=</span> v25 <span class="token operator">&amp;</span> <span class="token operator">*</span>v18 <span class="token operator">|</span> v29 <span class="token operator">&amp;</span> <span class="token punctuation">(</span>v22 <span class="token operator">|</span> v28 <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token operator">*</span>v18 <span class="token operator">|</span> <span class="token operator">~</span><span class="token punctuation">(</span>v28 <span class="token operator">|</span> <span class="token operator">*</span>v18<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v31 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v30 <span class="token operator">==</span> <span class="token number">0x8020717153E3013</span>i64 <span class="token punctuation">)</span>    v31 <span class="token operator">=</span> v27 <span class="token operator">==</span> <span class="token number">0x3E3A4717373E7F1F</span>i64<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v27 <span class="token operator">^</span> v18<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x3E3A4717050F791F</span>i64 <span class="token punctuation">)</span>    v3 <span class="token operator">=</span> v31<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>v23 <span class="token operator">|</span> v22 <span class="token operator">|</span> v28 <span class="token operator">&amp;</span> v29<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">*</span>v18 <span class="token operator">&amp;</span> v29 <span class="token operator">|</span> <span class="token number">0xC00020130082C0C</span>i64<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> v3 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v32 <span class="token operator">=</span> std<span class="token operator">::</span>operator<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>std<span class="token operator">::</span>char_traits<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token operator">::</span>cout<span class="token punctuation">,</span> <span class="token punctuation">(</span>__int64<span class="token punctuation">)</span><span class="token string">"Congratulations!flag is GXY{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...... other things ......</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们可以得到如下的方程组…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">z <span class="token operator">&amp;</span> <span class="token operator">~</span>x <span class="token operator">==</span> <span class="token number">1176889593874</span>z <span class="token operator">&amp;</span> <span class="token operator">~</span>x <span class="token operator">|</span> y <span class="token operator">&amp;</span> x <span class="token operator">|</span> z <span class="token operator">&amp;</span> <span class="token operator">~</span>y <span class="token operator">|</span> x <span class="token operator">&amp;</span> <span class="token operator">~</span>y <span class="token operator">==</span> <span class="token number">4483974544037412639</span>z <span class="token operator">&amp;</span> <span class="token operator">~</span>y <span class="token operator">&amp;</span>x <span class="token operator">|</span> z <span class="token operator">&amp;</span><span class="token punctuation">(</span>y <span class="token operator">&amp;</span> x <span class="token operator">|</span> y <span class="token operator">&amp;</span> <span class="token operator">~</span>x <span class="token operator">|</span> <span class="token operator">~</span><span class="token punctuation">(</span>y <span class="token operator">|</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">577031497978884115</span><span class="token punctuation">(</span>z <span class="token operator">&amp;</span> <span class="token operator">~</span>x <span class="token operator">|</span> y <span class="token operator">&amp;</span> x <span class="token operator">|</span> z <span class="token operator">&amp;</span> <span class="token operator">~</span>y <span class="token operator">|</span> x <span class="token operator">&amp;</span> <span class="token operator">~</span>y<span class="token punctuation">)</span> <span class="token operator">^</span> w <span class="token operator">==</span> <span class="token number">4483974543195470111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用 z3 解之, 得到</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">w <span class="token operator">=</span> <span class="token number">842073600</span>y <span class="token operator">=</span> <span class="token number">290580315766788</span>x <span class="token operator">=</span> <span class="token number">4483973367147818765</span>z <span class="token operator">=</span> <span class="token number">577031497978884115</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>v6</code>就是<code>x y z w</code>按顺序连接得到的加密后的 flag.</p><h4 id="最后一击"><a class="markdownIt-Anchor" href="#最后一击"></a> 最后一击</h4><p>接下来我们在<code>0x13DF</code>的位置下个断点, 观察一下<code>qword_7FF73C476048</code>指向的内容.</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">.data:00007FF73C476048 qword_7FF73C476048 dq 1D5FD108F30h      ; DATA XREF: main+DF↑o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选中<code>0x1D5FD108F30h</code>处的数据, Edit - Strings, 得到<code>i_will_check_is_debug_or_not</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x3e</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span><span class="token number">0x46</span><span class="token punctuation">,</span><span class="token number">0x05</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x0d</span><span class="token punctuation">,</span><span class="token number">0x1</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x8</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x3e</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x13</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">]</span>key <span class="token operator">=</span> <span class="token string">"i_will_check_is_debug_or_not"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>y</code>手动修正一下, 得到 flag.</p><p><code>flag{We1l_D0ne!P0or_algebra_am_i}</code></p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/BUUCTF/">BUUCTF</category>
      
      <category domain="https://horizonchaser.github.io/tags/Reverse/">Reverse</category>
      
      
      <comments>https://horizonchaser.github.io/2021/02/01/2021-Weekly-Reverse/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2021 Weekly Misc</title>
      <link>https://horizonchaser.github.io/2021/01/29/2021-Weekly-Misc/</link>
      <guid>https://horizonchaser.github.io/2021/01/29/2021-Weekly-Misc/</guid>
      <pubDate>Fri, 29 Jan 2021 15:17:16 GMT</pubDate>
      
      <description>每周的 Misc 练习与 Writeup</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="week-4-0124-0130-buuctf"><a class="markdownIt-Anchor" href="#week-4-0124-0130-buuctf"></a> Week 4, 01/24 - 01/30 BUUCTF</h2><h3 id="被偷走的文件"><a class="markdownIt-Anchor" href="#被偷走的文件"></a> 被偷走的文件</h3><p>打开流量包, 发现一些FTP协议的包, 用<code>ftp or ftp-data</code>筛选出来, 结果如下.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130110430119.png" alt="image-20210130110430119"></p><p>55 号包就是服务器返回的包含 flag.rar 的数据包, 右键详情中的 FTP Data 分组, 导出分组字节流. 从文件头的<code>Rar!</code>可以判定, 这是一个 rar 文件.</p><p>打开导出的文件, 发现需要密码, 用 ARCHPR 爆破, 得到四位密码<code>5790</code>, 进而得到 flag.</p><p><code>flag{6fe99a5d03fb01f833ec3caa80358fa3}</code></p><h4 id="另一种提取数据的做法"><a class="markdownIt-Anchor" href="#另一种提取数据的做法"></a> 另一种提取数据的做法</h4><p>从 <a href="https://pcapng.github.io/pcapng/draft-tuexen-opsawg-pcapng.html">pcapng 的规范</a>中, 我们可以发现数据包在捕获文件中是明文存储的, 同时 FTP 的数据也是明文传输的, 所以我们可以直接使用 binwalk 或者 foremost 从 pcapng 中提取文件.</p><p>如果提取出的文件太多的话, 也可以先导出指定的数据包再尝试提取.</p><h3 id="bjdctf2020-认真你就输了"><a class="markdownIt-Anchor" href="#bjdctf2020-认真你就输了"></a> [BJDCTF2020] 认真你就输了</h3><p>打开, 是一个 xls 文件, 但不能正常显示.</p><p>不过 xls 文件本身也是一个 zip 压缩包, 直接解压, 在 xl/charts 下面发现一个 flag.txt, 打开就是 flag…</p><p><code>flag{M9eVfi2Pcs#}</code></p><h3 id="bjdctf2020藏藏藏"><a class="markdownIt-Anchor" href="#bjdctf2020藏藏藏"></a> [BJDCTF2020]藏藏藏</h3><p>打开, 是张 jpg 图片, 用 stegsolve 看一下 File Format…</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130121745206.png" alt="image-20210130121745206"></p><p>看来文件末尾藏了点东西, 熟悉的 <code>50 4B 03 04</code> - 应该是个 zip . 比较奇怪的是, 用 binwalk 没能识别到 zip 头, 只识别到了结尾…</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130122312148.png" alt="image-20210130122312148"></p><p>不过关系不大, 用 UltraEdit (或者别的什么十六进制编辑器)打开, 定位到 zip 文件头, 在<code>0xC7EE</code>的位置, 写个 python 脚本从这里切分就行.</p><p>打开切分得到的 zip 文件, 里面是个 docx 文件, 打开扫码, 得到flag.</p><p><code>flag{you are the best!}</code></p><h3 id="gxyctf2019-佛系青年"><a class="markdownIt-Anchor" href="#gxyctf2019-佛系青年"></a> [GXYCTF2019] 佛系青年</h3><p>打开压缩包, 里面有一张图, 一个 txt, 后者是加密的.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130151231685.png" alt="image-20210130151231685"></p><p>到这里, 会产生两种想法:</p><ul><li>压缩包的密码在图里, 得先把密码找到 (错了)</li><li><strong>压缩包是伪加密的</strong> (这才是对的…)</li></ul><h4 id="错误示范"><a class="markdownIt-Anchor" href="#错误示范"></a> 错误示范</h4><p>用 stegsolve 尝试无果, 尝试用 zsteg 检测隐写方式, 发现不支持 - 文件头是 <code>FF D8 FF D9</code>…原来是个 jpg  <s>又被出题人套路了,下次一定注意先用file确认一下</s></p><p>用 stegdetect 检测, 系数为 10.0, 报告可能是 jphide, 用 stegbreak 跑字典, 未果.</p><p>至此发现, 此路不通…😭</p><h4 id="正解"><a class="markdownIt-Anchor" href="#正解"></a> 正解</h4><p>因为存在未加密的文件, 因此一定不是全局伪加密, 可能是单独设置了每一个文件记录的加密位.</p><p>用 010 Editor 打开, 定位到 dirEntry[1], 也就是 fo.txt 对应的记录的位置, 发现 <a href="https://www.jianshu.com/p/8e4209bca4af"><code>deFlags</code></a>是<code>09 00</code>, 存在伪加密, 修改为<code>00 00</code>, 正常解压出了 fo.txt.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130152220026.png" alt="image-20210130152220026"></p><p>在最下面我们发现了这么一串东西.</p><blockquote><p>佛曰：遮等諳勝能礙皤藐哆娑梵迦侄羅哆迦梵者梵楞蘇涅侄室實真缽朋能。奢怛俱道怯都諳怖梵尼怯一罰心缽謹缽薩苦奢夢怯帝梵遠朋陀諳陀穆諳所呐知涅侄以薩怯想夷奢醯數羅怯諸</p></blockquote><p>在<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">这里</a>解密, 得到 flag.</p><p><code>flag{w0_fo_ci_Be1}</code></p><p><s>所以那张图真的没有用啊…</s></p><h3 id="秘密文件"><a class="markdownIt-Anchor" href="#秘密文件"></a> 秘密文件</h3><p>打开流量包, 发现大量 FTP 协议流量, 跟踪.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130153937974.png" alt="image-20210130153937974"></p><p>发现一个 rar 文件, binwalk 分离, 发现有密码, 爆破, 得口令为<code>1903</code>, 解压得 flag.</p><p><code>flag{d72e5a671aa50fa5f400e5d10eedeaa5}</code></p><p><s>我一开始还以为密码是ctf来着…</s></p><h3 id="bjdctf2020-你猜我是个啥"><a class="markdownIt-Anchor" href="#bjdctf2020-你猜我是个啥"></a> [BJDCTF2020] 你猜我是个啥</h3><p>下载附件, 打开, 提示不是个有效的压缩文件…</p><p>010 Editor, 发现是个 png, 打开发现是一个二维码, 在文件尾有明文 flag.</p><p><code>flag{i_am_fl@g}</code></p><h3 id="bjdctf-2nd-easybaba"><a class="markdownIt-Anchor" href="#bjdctf-2nd-easybaba"></a> [BJDCTF 2nd] EasyBaBa</h3><p>下载, 得到一个 19.9 MB 的 454x427 的 jpg 文件…这大小显然不对啊…</p><p>binwalk 分离, 发现 zip 结尾, 从 <code>0x6E43</code>手动分离 zip, 得到了这个</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210130223536091.png" alt="image-20210130223536091"></p><p>查看文件头, 发现是一个 avi 视频, 打开, 在里面发现几个隐藏的一闪而过的二维码, 截图, 用 QR Research 解码, 拼接得flag.</p><p><code>flag{imagin_love_Y1ng}</code></p><h2 id="week-5-0131-0206-buuctf"><a class="markdownIt-Anchor" href="#week-5-0131-0206-buuctf"></a> Week 5, 01/31 - 02/06, BUUCTF</h2><h3 id="swpu2019-神奇的二维码"><a class="markdownIt-Anchor" href="#swpu2019-神奇的二维码"></a> [SWPU2019] 神奇的二维码</h3><p>下载附件, 打开, 用 binwalk 分离一下, 得到四个 rar 压缩包.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210131162556648.png" alt="image-20210131162556648"></p><p>先看第一个<code>7104.rar</code>, 里面有一个 <code>encode.txt</code>, 打开是一段 base64: <code>YXNkZmdoamtsMTIzNDU2Nzg5MA==</code>, 解码得<code>asdfghjkl1234567890</code>.</p><p>对于<code>716A.rar</code>, 有一张图片和压缩包, 内层压缩包需要密码 - 也就是我们刚刚拿到的解码后的内容…不过解压之后检查, 并没发现 flag…</p><p><s>看看flag在不在里面?</s></p><p><s>不在😡</s></p><p>在<code>17012.rar</code>中, 我们发现了一个 flag.doc, 里面有一段很长的, 看上去是 base64 的东西, 解码一下, 变成了另一段 base64… <s>有点意思</s></p><p>重复解码多次之后, 我们得到了<code>comEON_YOuAreSOSoS0great</code>, 用这个解压 <code>18394.rar</code>, 有一段音频.</p><p>放到 Audacity 里看一下, 明显是<a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81">摩尔斯电码</a>, 用<a href="https://morsecode.world/international/decoder/audio-decoder-adaptive.html">这个</a>解码一下(或者自己来也行), 得到 flag.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210131164320704.png" alt="image-20210131164320704"></p><p>flag: <code>flag{morseisveryveryeasy}</code></p><p>BTW, 直接扫描二维码会告诉你 <code>flag is not here</code>…</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210131164506602.png" alt="image-20210131164506602"></p><h3 id="bjdctf2020-一叶障目"><a class="markdownIt-Anchor" href="#bjdctf2020-一叶障目"></a> [BJDCTF2020] 一叶障目</h3><p>下载打开, 发现 Honeyview 打不开图片, 但是资源管理器能显示预览图 - 显然图的某些东西是被改过了.</p><p>用 010 Editor 打开, 报了 CRC 校验错误, 结合之前看到的条状图案, 怀疑是宽高被改了.</p><p>对于 <a href="https://dev.gameres.com/Program/Visual/Other/PNGFormat.htm">PNG 图片</a>, 宽高这些信息保存在 IHDR 中, 作为第一个数据块紧接着文件头之后. IHDR 长 13 字节, 定义如下.</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210201205712447.png" alt="image-20210201205712447"></p><p>所以在已知 CRC 的前提下, 我们可以通过在合理范围内穷举宽高的方式得到正确的大小.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf-8</span><span class="token keyword">import</span> zlib<span class="token keyword">import</span> struct<span class="token keyword">import</span> timetime_start<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#读文件</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">'1.png'</span>  <span class="token comment">#注意，1.png图片要和脚本在同一个文件夹下哦~</span>fileRead <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>fileRead<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#0xCh ~ 0x1Ch</span>crc32key <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>fileRead<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\x'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"b'"</span><span class="token punctuation">,</span><span class="token string">'0x'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#crc32key = 0xCBD6DF8A #补上0x，copy hex value</span><span class="token comment">#data = bytearray(b'\x49\x48\x44\x52\x00\x00\x01\xF4\x00\x00\x01\xF1\x08\x06\x00\x00\x00')  #hex下copy grep hex</span>n <span class="token operator">=</span> <span class="token number">4095</span> <span class="token comment">#理论上0xffffffff,但考虑到屏幕实际，0x0fff就差不多了</span><span class="token keyword">for</span> w <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#高和宽一起爆破</span>    width <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&gt;i'</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#q为8字节，i为4字节，h为2字节</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        height <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&gt;i'</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            data<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            <span class="token comment">#print(data)</span>        crc32result <span class="token operator">=</span> zlib<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> crc32result <span class="token operator">==</span> crc32key<span class="token punctuation">:</span>            <span class="token comment">#print("Correct Width: " + (width) + "\nCorrect Height: " + (height))</span>            <span class="token comment">#写文件</span>            newpic <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span>fileRead<span class="token punctuation">)</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                newpic<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">[</span>x<span class="token punctuation">]</span>                newpic<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>x<span class="token punctuation">]</span>            fw <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">+</span><span class="token string">'_CRC_Repaired.png'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token comment">#保存副本</span>            fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>newpic<span class="token punctuation">)</span>            fw<span class="token punctuation">.</span>closetime_end<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"CRC Repaired, saved as "</span> <span class="token operator">+</span> <span class="token builtin">file</span><span class="token operator">+</span><span class="token string">'_CRC_Repaired.png'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Time Used: '</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>time_end<span class="token operator">-</span>time_start<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看修复后的图片, 得到 flag.</p><p><code>flag{66666}</code></p><h3 id="bjdctf-2nd-real_easybaba"><a class="markdownIt-Anchor" href="#bjdctf-2nd-real_easybaba"></a> [BJDCTF 2nd] Real_EasyBaBa</h3><p>查看图片, 发现是 jpg 格式, 并且有一定损坏…</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210204221540876.png" alt="image-20210204221540876"></p><p>binwalk 扫描一下, 发现 zip 文件尾但是没发现文件头. 检查发现文件头被修改为 <code>50 4B FF FF</code> , 修改后分离得到一个包含 <code>hint</code> 文件的 zip 压缩包, 打开后…是一个二维码…</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210204223726793.png" alt="image-20210204223726793"></p><p>缩小之后扫描, 得到一行指令 <code>od -vtx1 ./draw.png | head -56 | tail -28</code>, 执行后发现输出的是这里对应的 16 进制内容</p><p><img src="/2021/01/29/2021-Weekly-Misc/image-20210204224728710.png" alt="image-20210204224728710"></p><p>仔细看, 能看到对应的字符画…<s>这也太坑了吧</s></p><p><code>flag{572154976}</code></p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/Misc/">Misc</category>
      
      <category domain="https://horizonchaser.github.io/tags/BUUCTF/">BUUCTF</category>
      
      
      <comments>https://horizonchaser.github.io/2021/01/29/2021-Weekly-Misc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2021 Weekly Reverse</title>
      <link>https://horizonchaser.github.io/2021/01/27/Strong-Reversers/</link>
      <guid>https://horizonchaser.github.io/2021/01/27/Strong-Reversers/</guid>
      <pubDate>Wed, 27 Jan 2021 14:39:10 GMT</pubDate>
      
      <description>每周的逆向练习与 Writeup</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="2021-week-2-0126"><a class="markdownIt-Anchor" href="#2021-week-2-0126"></a> 2021 Week 2 - 01/26</h1><h2 id="0x00-ddctf-android-easy"><a class="markdownIt-Anchor" href="#0x00-ddctf-android-easy"></a> 0x00 DDCTF-Android Easy</h2><p><s>接触到的第二道安卓逆向题</s></p><p>下载, 发现是个 zip , 但是有 apk 的目录结构, 用 jadx-gui 打开可以看到如下的结构</p><p><img src="https://i.loli.net/2021/01/27/Jd8H6ITzRl5NYsO.png" alt="image-20210127124159278"></p><p>很明显, 重点在 FlagActivity 类里面, <code>i()</code>中将<code>p</code> <code>q</code> 两个byte数组进行一系列操作后得到解密后的<code>byte[] bArr2</code>, 作为<code>String()</code>的参数返回.  之后在<code>onClickTest()</code>中通过将输入的字符串同<code>i()</code>的返回值进行比较, 判定 flag 是否正确.</p><p>那就很显然, <code>i()</code>的返回值就是正确的 flag. 把<code>i()</code>运行一次, 得到返回值<code>DDCTF-3ad60811d87c4a2dba0ef651b2d93476@didichuxing.com</code>, 用<code>flag{ }</code>包裹提交.</p><p><code>flag{DDCTF-3ad60811d87c4a2dba0ef651b2d93476@didichuxing.com}</code></p><h2 id="0x01-welcome-to-jni"><a class="markdownIt-Anchor" href="#0x01-welcome-to-jni"></a> 0x01 WELCOME TO JNI</h2><blockquote><p>“JNI是什么？”</p></blockquote><blockquote><p><strong>JNI</strong> （<strong>Java Native Interface，Java本地接口</strong>）是一种<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6&amp;action=edit&amp;redlink=1">编程框架</a>，使得<a href="https://zh.wikipedia.org/wiki/Java%E8%99%9A%E6%8B%9F%E6%9C%BA">Java虚拟机</a>中的<a href="https://zh.wikipedia.org/wiki/Java">Java</a>程序可以调用本地应用/或库，也可以被其他程序调用。 本地程序一般是用其它语言（<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C</a>、<a href="https://zh.wikipedia.org/wiki/C%2B%2B">C++</a>或<a href="https://zh.wikipedia.org/wiki/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80">汇编语言</a>等）编写的，并且被编译为基于本机硬件和操作系统的程序。</p><p>– Wikipedia</p></blockquote><p>简单的来说, JNI 可以让 Java 调用其他语言的库.</p><p>用 jadx-gui 打开 apk 文件, 定位到 Main Activity --在<code>com.reverier.xdsec_re_20200126</code>下面</p><p><img src="https://i.loli.net/2021/01/27/hwg4BSpNfiFO8DH.png" alt="image-20210127131115411"></p><p>在<code>MainActivity</code>类中, 可以看到声明了一个 native 方法 - <code>loginUtils()</code>, 从名字推测是 <s>检查 flag</s> 登陆验证, 加载了一个本地库<code>native-lib</code>, 它对应的文件在<code>/lib</code>下面, 对应不同的架构.</p><p>在 33 行可以看到, <code>loginUtil()</code>接受了输入的字符串作为参数, 然后返回一个布尔值作为结果, 控制输出<code>Right</code>和<code>Wrong</code> - 这就是重点了.</p><p>从 apk 中提取出 x86 架构对应的<code>native-lib.so</code>, IDA 打开, 找到对应的方法<code>Java_com_reverier_xdsec_1re_120200126_MainActivity_loginUtils()</code>, 反编译如下.</p><p><img src="https://i.loli.net/2021/01/27/7UM1xOPLB3RTIFK.png" alt="image-20210127132734025"></p><p>第 8 行开始, <code>v6</code>保存了作为参数的字符串的长度, <code>v5</code>则保存了另一个字符串的长度, <code>v4</code>保存了参数字符串. 第 11 行比较两个字符串的长度, 若相等则再通过<code>strncmp()</code>比较.</p><p>综上, <code>off_1FD4 + 5972</code>应该就指向了flag. <code>0x1FD4 + 5972d == 0x880</code>, 跳转过去, 发现果然保存着flag.</p><p><img src="https://i.loli.net/2021/01/27/shcxbOGXJ2U6DFV.png" alt="image-20210127133107771"></p><p><code>flag{welcome_to_naive_lib!}</code></p><p>做完了才意识到, 其实当时直接从 IDA 的 Strings window 能直接看到这个明文字符串…</p><h2 id="002-codegate-ctf-2018-redvelvet"><a class="markdownIt-Anchor" href="#002-codegate-ctf-2018-redvelvet"></a> 0×02 Codegate CTF 2018 RedVelvet</h2><p>IDA 打开, 跳转到<code>main()</code>, 发现了一大串<code>funcX()</code>的调用.  <s>有点壮观(x</s></p><p>观察结构发现, 在 48 行, ``fgets()<code>接受了 28 个字节的输入(包含末尾的</code>\n<code>), 保存到</code>s<code>中. 而</code>funcX()<code>并未改变</code>s<code>的值, 而是进行了一些验证, 比如</code>func7()`:</p><p><img src="https://i.loli.net/2021/01/27/fuRYoAhm31TjLzw.png" alt="image-20210127134648665"></p><p>这 15 个<code>funcX()</code>共同对<code>s</code>进行了一系列的检查, 然后计算<code>s</code>的 SHA256 值, 并和<code>0a435f46288bb5a764d13fca6c901d3750cee73fd7689ce79ef6dc0ff8f380e5</code>比较, 确定 flag 正确与否.</p><p><s>所以直接用 hashcat 穷举破解理论上倒也可行</s></p><p>接下来就是 angr 发挥威力的时候了, 我们不需要将程序执行完, 只需要找到一个输入, 能够满足这十五个<code>funcX()</code>的约束, 使程序运行到<code>SHA256_Init()</code>前即可 - 对应的地址是<code>0x401534</code>.</p><p>同时, 我们还需要避免进入<code>funcX()</code>中的<code>exit(1)</code>的分支, 以<code>func1()</code>为例.</p><p><img src="https://i.loli.net/2021/01/27/Mu2QcKWZ81dfzFR.png" alt="image-20210127135526675"></p><p><code>0x4009ED</code>和<code>0x4009F7</code>就是我们不希望运行到的地方, 因为到这里说明我们的输入没有通过<code>func1()</code>的检验, 执行了<code>exit(1)</code> - 其他的<code>funcX()</code>同理.</p><p>这样, 我们得到了期望执行到的地址与要避免的地址, 写出如下脚本.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angrprog <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span><span class="token string">'./RedVelvet'</span><span class="token punctuation">,</span> load_options<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'auto_load_libs'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   state <span class="token operator">=</span> prog<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    simgr <span class="token operator">=</span> prog<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>state<span class="token punctuation">)</span>   simgr<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span><span class="token number">0x00401534</span> <span class="token punctuation">,</span>avoid<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x4009ED</span><span class="token punctuation">,</span><span class="token number">0x4009F7</span><span class="token punctuation">,</span><span class="token number">0x400A3C</span><span class="token punctuation">,</span><span class="token number">0x400A46</span><span class="token punctuation">,</span><span class="token number">0x400A9F</span><span class="token punctuation">,</span><span class="token number">0x400B01</span><span class="token punctuation">,</span><span class="token number">0x400B5C</span><span class="token punctuation">,</span><span class="token number">0x400C05</span><span class="token punctuation">,</span><span class="token number">0x400CAB</span><span class="token punctuation">,</span><span class="token number">0x400D51</span><span class="token punctuation">,</span><span class="token number">0x400DD6</span><span class="token punctuation">,</span><span class="token number">0x400E5E</span><span class="token punctuation">,</span><span class="token number">0x400F07</span><span class="token punctuation">,</span><span class="token number">0x400FAD</span><span class="token punctuation">,</span><span class="token number">0x4105F</span><span class="token punctuation">,</span><span class="token number">0x4010E9</span><span class="token punctuation">,</span> <span class="token number">0x40119D</span><span class="token punctuation">]</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> simgr<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过漫长的运行( VMWare Ubuntu + Docker angr/angr 大概 30 分钟? ), 我们得到了如下输出 (<code>fg</code>是因为我之前误以为写错了, 于是挂起去检查脚本了…)</p><p><img src="https://i.loli.net/2021/01/27/id16RHAoK5TBpW3.png" alt="image-20210127140006667"></p><p>放到源程序里检查一下, 看来没毛病.</p><p><img src="https://i.loli.net/2021/01/27/DeuYsaXi3ZW4mMt.png" alt="image-20210127140226953"></p><p><code>flag{What_You_Wanna_Be?:)_la_la}</code></p><h3 id="something-else"><a class="markdownIt-Anchor" href="#something-else"></a> Something Else</h3><ol><li>RedVelvet依赖 1.0.0 版本的 <a href="http://libcrypto.so">libcrypto.so</a>, 但是包含它的老版本的 openssl 已经过时了, 最后用<code>apt-file</code>查到英伟达的<code>nslight-system</code>还带这东西, 于是安装之后手动复制出来…</li><li>理论上通过 15 个<code>funcX()</code>中的约束条件, 可以直接求出来满足的输入值, 就像<code>z3</code>那样</li><li>如果限定输入长度与范围( ASCII 可见字符) 的话, 应当能够跑的更快, 学习中</li><li>关于原题: 暂时没找到…</li></ol><h1 id="2021-week-3-0210"><a class="markdownIt-Anchor" href="#2021-week-3-0210"></a> 2021 Week 3 - 02/10</h1><h2 id="0x00-pydis"><a class="markdownIt-Anchor" href="#0x00-pydis"></a> 0x00 PyDis</h2><p>一道 Python 逆向题, 本来想直接用 uncompyle6 来着, 不过它目前只能支持到 3.8 …</p><p>不过我们总是可以自己手动来解决 √ <s>从零开始, 半天过去了</s></p><p>根据提示, 用 <code>marshal</code> 解析 pyc 文件, 提取出指令部分, 然后用 <code>dis</code> 反编译, 拿到字节码指令. 根据 <a href="https://docs.python.org/3/library/dis.html">Python文档</a>, 我们可以写出同义的代码, 如下.</p><p>(<code>#</code>开头的是我们推测出的每行对应的源代码, 缩进一致)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token number">1</span>           <span class="token number">0</span> BUILD_LIST               <span class="token number">0</span>             <span class="token number">2</span> LOAD_CONST               <span class="token number">0</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token number">4</span> CALL_FINALLY             <span class="token number">1</span> <span class="token punctuation">(</span>to <span class="token number">7</span><span class="token punctuation">)</span>             <span class="token number">6</span> STORE_NAME               <span class="token number">0</span> <span class="token punctuation">(</span>magic<span class="token punctuation">)</span>   <span class="token comment"># magic = [178, ....]</span> <span class="token number">2</span>           <span class="token number">8</span> LOAD_NAME                <span class="token number">1</span> <span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>            <span class="token number">10</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token string">'flag &gt;&gt;&gt; '</span><span class="token punctuation">)</span>            <span class="token number">12</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">14</span> STORE_NAME               <span class="token number">2</span> <span class="token punctuation">(</span>inp<span class="token punctuation">)</span>   <span class="token comment"># inp = input("flag &gt;&gt;&gt; ")</span> <span class="token number">4</span>          <span class="token number">16</span> LOAD_NAME                <span class="token number">3</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>            <span class="token number">18</span> LOAD_NAME                <span class="token number">2</span> <span class="token punctuation">(</span>inp<span class="token punctuation">)</span>            <span class="token number">20</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">22</span> STORE_NAME               <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>   <span class="token comment"># inp = list(flag)</span> <span class="token number">5</span>          <span class="token number">24</span> LOAD_NAME                <span class="token number">5</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>            <span class="token number">26</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token number">28</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">30</span> LOAD_NAME                <span class="token number">5</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>            <span class="token number">32</span> LOAD_NAME                <span class="token number">0</span> <span class="token punctuation">(</span>magic<span class="token punctuation">)</span>            <span class="token number">34</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">36</span> COMPARE_OP               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token operator">!=</span><span class="token punctuation">)</span>            <span class="token number">38</span> POP_JUMP_IF_FALSE       <span class="token number">54</span>   <span class="token comment"># if(len(flag) != len(magic)):</span> <span class="token number">6</span>          <span class="token number">40</span> LOAD_NAME                <span class="token number">6</span> <span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">)</span>            <span class="token number">42</span> LOAD_CONST               <span class="token number">2</span> <span class="token punctuation">(</span><span class="token string">'qwq'</span><span class="token punctuation">)</span>            <span class="token number">44</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">46</span> POP_TOP   <span class="token comment">#   print("qwq")</span> <span class="token number">7</span>          <span class="token number">48</span> LOAD_NAME                <span class="token number">7</span> <span class="token punctuation">(</span>exit<span class="token punctuation">)</span>            <span class="token number">50</span> CALL_FUNCTION            <span class="token number">0</span>            <span class="token number">52</span> POP_TOP      <span class="token comment">#   exit()</span> <span class="token number">9</span>     <span class="token operator">&gt;&gt;</span>   <span class="token number">54</span> LOAD_NAME                <span class="token number">8</span> <span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">)</span>            <span class="token number">56</span> LOAD_NAME                <span class="token number">5</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>            <span class="token number">58</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token number">60</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">62</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token number">64</span> BINARY_FLOOR_DIVIDE            <span class="token number">66</span> CALL_FUNCTION            <span class="token number">1</span>            <span class="token number">68</span> GET_ITER       <span class="token operator">&gt;&gt;</span>   <span class="token number">70</span> FOR_ITER                <span class="token number">54</span> <span class="token punctuation">(</span>to <span class="token number">126</span><span class="token punctuation">)</span>            <span class="token number">72</span> STORE_NAME               <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token comment"># for i in range(len(flag) // 2):</span><span class="token number">10</span>          <span class="token number">74</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token number">76</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token number">78</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">80</span> BINARY_MULTIPLY            <span class="token number">82</span> LOAD_CONST               <span class="token number">4</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token number">84</span> BINARY_ADD            <span class="token number">86</span> BINARY_SUBSCR            <span class="token number">88</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token number">90</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token number">92</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token number">94</span> BINARY_MULTIPLY            <span class="token number">96</span> BINARY_SUBSCR            <span class="token number">98</span> ROT_TWO           <span class="token number">100</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>           <span class="token number">102</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token number">104</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>           <span class="token number">106</span> BINARY_MULTIPLY           <span class="token number">108</span> STORE_SUBSCR                           <span class="token comment"># flag[2*i] = flag[2*i+1] </span>           <span class="token number">110</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>           <span class="token number">112</span> LOAD_CONST               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>           <span class="token number">114</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>         <span class="token comment"># flag[2*i+1] = flag[2*i]</span>           <span class="token number">116</span> BINARY_MULTIPLY           <span class="token number">118</span> LOAD_CONST               <span class="token number">4</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>           <span class="token number">120</span> BINARY_ADD           <span class="token number">122</span> STORE_SUBSCR           <span class="token number">124</span> JUMP_ABSOLUTE           <span class="token number">70</span>   <span class="token comment">#   flag[2*i], flag[2*i+1] = flag[2*i+1], flag[2*i]</span><span class="token number">12</span>     <span class="token operator">&gt;&gt;</span>  <span class="token number">126</span> BUILD_LIST               <span class="token number">0</span>           <span class="token number">128</span> STORE_NAME              <span class="token number">10</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span>   <span class="token comment"># check = []</span><span class="token number">14</span>         <span class="token number">130</span> LOAD_NAME                <span class="token number">8</span> <span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">)</span>           <span class="token number">132</span> LOAD_NAME                <span class="token number">5</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>           <span class="token number">134</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>           <span class="token number">136</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">138</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">140</span> GET_ITER       <span class="token operator">&gt;&gt;</span>  <span class="token number">142</span> FOR_ITER                <span class="token number">26</span> <span class="token punctuation">(</span>to <span class="token number">170</span><span class="token punctuation">)</span>           <span class="token number">144</span> STORE_NAME               <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token comment"># for i in range(len(flag)):</span><span class="token number">15</span>         <span class="token number">146</span> LOAD_NAME               <span class="token number">10</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span>           <span class="token number">148</span> LOAD_METHOD             <span class="token number">11</span> <span class="token punctuation">(</span>append<span class="token punctuation">)</span>           <span class="token number">150</span> LOAD_NAME               <span class="token number">12</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">)</span>           <span class="token number">152</span> LOAD_NAME                <span class="token number">4</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>           <span class="token number">154</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>           <span class="token number">156</span> BINARY_SUBSCR           <span class="token number">158</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">160</span> LOAD_CONST               <span class="token number">5</span> <span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>           <span class="token number">162</span> BINARY_XOR           <span class="token number">164</span> CALL_METHOD              <span class="token number">1</span>           <span class="token number">166</span> POP_TOP           <span class="token number">168</span> JUMP_ABSOLUTE          <span class="token number">142</span>   <span class="token comment">#   check.append(ord(flag[i]) ^ 222)</span><span class="token number">17</span>     <span class="token operator">&gt;&gt;</span>  <span class="token number">170</span> LOAD_NAME                <span class="token number">8</span> <span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">)</span>           <span class="token number">172</span> LOAD_NAME                <span class="token number">5</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span>           <span class="token number">174</span> LOAD_NAME                <span class="token number">0</span> <span class="token punctuation">(</span>magic<span class="token punctuation">)</span>           <span class="token number">176</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">178</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">180</span> GET_ITER       <span class="token operator">&gt;&gt;</span>  <span class="token number">182</span> FOR_ITER                <span class="token number">34</span> <span class="token punctuation">(</span>to <span class="token number">218</span><span class="token punctuation">)</span>           <span class="token number">184</span> STORE_NAME               <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token comment"># for i in range(len(magic)):</span><span class="token number">18</span>         <span class="token number">186</span> LOAD_NAME               <span class="token number">10</span> <span class="token punctuation">(</span>check<span class="token punctuation">)</span>           <span class="token number">188</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>           <span class="token number">190</span> BINARY_SUBSCR           <span class="token number">192</span> LOAD_NAME                <span class="token number">0</span> <span class="token punctuation">(</span>magic<span class="token punctuation">)</span>           <span class="token number">194</span> LOAD_NAME                <span class="token number">9</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span>           <span class="token number">196</span> BINARY_SUBSCR           <span class="token number">198</span> COMPARE_OP               <span class="token number">3</span> <span class="token punctuation">(</span><span class="token operator">!=</span><span class="token punctuation">)</span>           <span class="token number">200</span> POP_JUMP_IF_FALSE      <span class="token number">182</span>   <span class="token comment">#   if(check[i] != magic[i]):</span><span class="token number">19</span>         <span class="token number">202</span> LOAD_NAME                <span class="token number">6</span> <span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">)</span>           <span class="token number">204</span> LOAD_CONST               <span class="token number">2</span> <span class="token punctuation">(</span><span class="token string">'qwq'</span><span class="token punctuation">)</span>           <span class="token number">206</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">208</span> POP_TOP   <span class="token comment">#       print("qwq")</span><span class="token number">20</span>         <span class="token number">210</span> LOAD_NAME                <span class="token number">7</span> <span class="token punctuation">(</span>exit<span class="token punctuation">)</span>           <span class="token number">212</span> CALL_FUNCTION            <span class="token number">0</span>           <span class="token number">214</span> POP_TOP           <span class="token number">216</span> JUMP_ABSOLUTE          <span class="token number">182</span>   <span class="token comment">#       exit()</span><span class="token number">22</span>     <span class="token operator">&gt;&gt;</span>  <span class="token number">218</span> LOAD_NAME                <span class="token number">6</span> <span class="token punctuation">(</span><span class="token keyword">print</span><span class="token punctuation">)</span>           <span class="token number">220</span> LOAD_CONST               <span class="token number">6</span> <span class="token punctuation">(</span><span class="token string">'happy new year!'</span><span class="token punctuation">)</span>           <span class="token number">222</span> CALL_FUNCTION            <span class="token number">1</span>           <span class="token number">224</span> POP_TOP           <span class="token number">226</span> LOAD_CONST               <span class="token number">7</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>           <span class="token number">228</span> RETURN_VALUE   <span class="token comment"># print("happy new year!")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后写个jio本解密就行了.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span>       <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">]</span>dec <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">222</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dec <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dec <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>flag{hapi_new_ya</code>, 记得补上 <code>}</code></p><h2 id="0x01-flareon4-igniteme"><a class="markdownIt-Anchor" href="#0x01-flareon4-igniteme"></a> 0x01 FlareOn4 IgniteMe</h2><p><code>die</code>查壳, 确认 32 位 pe 文件, 没壳, IDA 打开, 定位到入口点 <code>start</code>函数.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __noreturn <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  DWORD NumberOfBytesWritten<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-4h] BYREF</span>  NumberOfBytesWritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  stdinHandle <span class="token operator">=</span> <span class="token function">GetStdHandle</span><span class="token punctuation">(</span><span class="token number">4294967286u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// stdin</span>  stdoutHandle <span class="token operator">=</span> <span class="token function">GetStdHandle</span><span class="token punctuation">(</span><span class="token number">0xFFFFFFF5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// stdout</span>  <span class="token function">WriteFile</span><span class="token punctuation">(</span>stdoutHandle<span class="token punctuation">,</span> aG1v3M3T3hFl4g<span class="token punctuation">,</span> <span class="token number">0x13u</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberOfBytesWritten<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">praseInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">sub_401050</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">WriteFile</span><span class="token punctuation">(</span>stdoutHandle<span class="token punctuation">,</span> aG00dJ0b<span class="token punctuation">,</span> <span class="token number">0xAu</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberOfBytesWritten<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">WriteFile</span><span class="token punctuation">(</span>stdoutHandle<span class="token punctuation">,</span> aN0tT00H0tRWe7r<span class="token punctuation">,</span> <span class="token number">0x24u</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>NumberOfBytesWritten<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ExitProcess</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>GetStdHandle</code>函数没见过, 查了一下<a href="https://docs.microsoft.com/zh-cn/windows/console/getstdhandle">文档</a>, 是获得设备句柄, 参数决定是标准 输入/输出/错误 设备.</p><p>在第 8 行输出提示之后调用了一个函数, 推测是解析输入 - 同时确定的输入缓冲区的第一个零字节的位置作为结尾. 然后在第 10 行调用<code>sub_401050</code>检验 flag,</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sub_401050</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v1<span class="token punctuation">;</span> <span class="token comment">// [esp+0h] [ebp-Ch]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+4h] [ebp-8h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [esp+4h] [ebp-8h]</span>  <span class="token keyword">char</span> key<span class="token punctuation">;</span> <span class="token comment">// [esp+Bh] [ebp-1h]</span>  v1 <span class="token operator">=</span> <span class="token function">getFirstZeroBytePos</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>prasedInput<span class="token punctuation">)</span><span class="token punctuation">;</span>  key <span class="token operator">=</span> <span class="token function">sub_401000</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">// 0x4</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> v1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    encIn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key <span class="token operator">^</span> prasedInput<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    key <span class="token operator">=</span> prasedInput<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">39</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> encIn<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>enc<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是一个简单的循环异或加密, 不过注意是反向的, 初始的<code>key</code>是<code>0x4</code>. 写个jio本解密, 拿到 flag.</p><p><code>flag{R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com}</code></p><p><s>还真是晚上做的…</s></p><h2 id="0x02-buuctf-firmware"><a class="markdownIt-Anchor" href="#0x02-buuctf-firmware"></a> 0x02 BUUCTF Firmware</h2><p>看题目是一个路由器固件的分析, 用 binwalk 扫描一下, 得到了文件系统的位置, 也就是提取出来的<code>120200.squashfs</code>文件.</p><p><img src="/2021/01/27/Strong-Reversers/image-20210210230050652.png" alt="image-20210210230050652"></p><p>用 <code>file</code>命令确认了一下, 是 squashfs 文件系统, 不过不能直接用<code>mount</code>挂载 - 可能是因为有 lzma 压缩了…</p><p>在网上搜索了一下, 得知 <a href="https://github.com/mirror/firmware-mod-kit">firmware-mod-kit</a> (简称 fmk) 可以从 squashfs 提取文件, 不过在我这里总是提取失败, 或者返回成功但是啥也没提取出来… 也许是因为 fmk 从 2013 年之后没更新过吧…</p><p>最后用 <code>unsquashfs</code> 提取成功 (是 <a href="https://github.com/plougher/squashfs-tools">squashfs-tools</a> 下的一个工具), 在 <code>/tmp</code>下发现一个 <code>backdoor</code> 文件…<s>还好这名字挺明显…</s></p><p>确认是 32 位的 ARM ELF 文件, die 检查发现 upx 壳, 脱壳之后 IDA 打开, 定位到 <code>main</code>.</p><p>在前面获取 MAC 等等之后, 这个 <code>initConnection</code>函数引起了我们的注意, 尤其是这里.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token function">initConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token punctuation">{</span>     <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Failed to connect..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token comment">// do some other things</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>initConnextion</code>返回不为零时, 会等待五秒再重来 - 这里应该就是回连服务器了. 进去看看, 确定地址<code>echo.byethost51.com</code>, 端口<code>36667</code>.</p><p><code>MD5(echo.byethost51.com:36667) == 33a422c45d551ac6e4756f59812a954b</code></p><p>所以, <code>flag{33a422c45d551ac6e4756f59812a954b}</code></p><h2 id="最后-祝大家新年快乐"><a class="markdownIt-Anchor" href="#最后-祝大家新年快乐"></a> 最后, 祝大家新年快乐🍻</h2><h1 id="2021-week-6-0305"><a class="markdownIt-Anchor" href="#2021-week-6-0305"></a> 2021 Week 6 - 03/05</h1><p><sub>前两周因为题不会(好多知识盲区.jpg)+准备返校，只做出来了两道…不过看题解学到了很多，继续努力</sub></p><h2 id="000-hacking-with-google-2020-beginner"><a class="markdownIt-Anchor" href="#000-hacking-with-google-2020-beginner"></a> 0×00 Hacking with Google 2020 Beginner</h2><p>已经理解了整个过程, 不过还没有拿到 flag… angr 也没有跑出来正确的结果, 可能是没能正确识别 SSE 的函数…?</p><p>跑出来是这样…</p><p><img src="/2021/01/27/Strong-Reversers/image-20210305182332107.png" alt="image-20210305182332107"></p><p>等我再研究研究, 或许直接用 z3 会比较适合?</p><h2 id="001-vn-公开赛-csre"><a class="markdownIt-Anchor" href="#001-vn-公开赛-csre"></a> 0×01 V&amp;N 公开赛 CSRe</h2><p>看题目是混淆过的 C#, 查了一下, 可以用 <a href="https://github.com/CodingGuru1989/de4dot">detdot的修改版</a> 反混淆, 之后再用 <a href="https://github.com/icsharpcode/ILSpy">ILSpy</a> 反编译.</p><p>一个类一个类地找, 很快就能发现 <code>Class3.Main</code> 方法, 如下.</p><pre class="line-numbers language-C#" data-language="C#"><code class="language-C#">// Class3using System;using System.Security.Cryptography;using System.Text;internal sealed class Class3{public string method_0(string string_0, string string_1){string text = string.Empty;char[] array = string_0.ToCharArray();char[] array2 = string_1.ToCharArray();int num = ((array.Length &lt; array2.Length) ? array.Length : array2.Length);for (int i = 0; i &lt; num; i++){text += array[i] ^ array2[i];}return text;}public static string smethod_0(string string_0){byte[] bytes = Encoding.UTF8.GetBytes(string_0);byte[] array = SHA1.Create().ComputeHash(bytes);StringBuilder stringBuilder = new StringBuilder();byte[] array2 = array;foreach (byte b in array2){stringBuilder.Append(b.ToString("X2"));}return stringBuilder.ToString();}private static void Main(string[] args){if (!Class1.smethod_1()){return;}bool flag = true;Class3 @class = new Class3();string text = Console.ReadLine();if (smethod_0("3" + text + "9") != "B498BFA2498E21325D1178417BEA459EB2CD28F8"){flag = false;}string text2 = Console.ReadLine();string string_ = smethod_0("re" + text2);string text3 = @class.method_0(string_, "63143B6F8007B98C53CA2149822777B3566F9241");for (int i = 0; i &lt; text3.Length; i++){if (text3[i] != '0'){flag = false;}}if (flag){Console.WriteLine("flag{" + text + text2 + "}");}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag 一共有两端, 其中<code>text</code>直接就是<code>B498BFA2498E21325D1178417BEA459EB2CD28F8</code>的 SHA1 原文.</p><p>对于 <code>text2</code>, 观察<code>method_0</code>, 发现它会返回两个 string 类型参数的异或值, 而之后的 for 循环会比较异或后的字符串每个字符是否均为<code>"0"</code> - 很明显, <code>x ^ x == 0</code>, 所以<code>"re" + text2</code>的 SHA1 值就是 <code>63143B6F8007B98C53CA2149822777B3566F9241</code>.</p><p>cmd5 上查询, 得到 <code>text = "1415"</code>, <code>text2 = "turn"</code>, 最后得到 flag.</p><p><code>flag{1415turn}</code></p><h2 id="002-zer0pts2020-easy-strcmp"><a class="markdownIt-Anchor" href="#002-zer0pts2020-easy-strcmp"></a> 0×02 Zer0pts2020 easy-strcmp</h2><blockquote><p>“有时候你看见的不一定是真实的”</p><p>​                                                – RX</p></blockquote><p>IDA64 打开, 定位到<code>main</code>函数, 发现 flag 就摆在眼前 (误</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"zer0pts{********CENSORED********}"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Correct!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: %s &lt;FLAG&gt;\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><s>怎么看第五行的那东西都不能是 flag 吧</s></p><p>我们发现它确实调用了一个<code>strcmp</code>比较<code>argv[0]</code>和那东西 (就叫假 flag 吧) 的值, 但是它又确实不是 flag… 看看左侧, 发现还有两个奇怪的函数 <code>sub_6EA</code>和<code>sub_795</code>.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// write access to const memory has been detected, the output may be wrong!</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token function">sub_795</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rax</span>  result <span class="token operator">=</span> <span class="token operator">&amp;</span>strcmp<span class="token punctuation">;</span>  strcmp_pointer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">__int64</span> <span class="token punctuation">(</span>__fastcall <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_QWORD<span class="token punctuation">,</span> _QWORD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>strcmp<span class="token punctuation">;</span>  off_201028 <span class="token operator">=</span> sub_6EA<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(<code>srecmp_pointer</code>是我重命名的)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_6EA</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-8h]</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+1Ch] [rbp-4h]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">*</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    <span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v4<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> j <span class="token operator">+</span> a1<span class="token punctuation">)</span> <span class="token operator">-=</span> qword_201060<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">strcmp_pointer</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是我们并没有在<code>main</code>中看到这两个函数的调用, 看一下交叉引用, 发现这两个函数都在<code>.init_array</code>段里 - 会在<code>main</code>前就执行.</p><p><code>sub_795</code>会把在<code>.got.plt</code>段中原先正常的<code>strcmp</code>的地址替换成<code>sub_6EA</code>的地址, 而<code>sub_6EA</code>会把第一个参数按照每 8 个字符一组, 减去<code>qword_201060[j]</code>后再和假 flag 进行真正的<code>strcmp</code>…</p><p>既然这样, 写个 jio 本 - 看上去是这样.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>       <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span>       <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">]</span>enc <span class="token operator">=</span> <span class="token string">"********CENSORED********"</span>dec <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    dec <span class="token operator">=</span> dec <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span>dec <span class="token operator">=</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的结果是<code>l3ts_m4k3^4^DDSOUR_t0d4y</code>, 中间部分看上去不太对… 原因在于, 原程序是将整个<code>QWORD</code>作为一个整体进行加减, 但我们的 exp 是对每一个字节进行的计算, 这样进位不会影响到前一位.</p><p>进位影响的是 9 11 13 14 这几个位置, 手动加一就好.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>       <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span>       <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">]</span>enc <span class="token operator">=</span> <span class="token string">"********CENSORED********"</span>dec <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      c <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>c <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    dec <span class="token operator">=</span> dec <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span>dec <span class="token operator">=</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>zer0pts{l3ts_m4k3_4_DETOUR_t0d4y}</code></p><p>不过在平台上提交的时候应该是<code>flag{l3ts_m4k3_4_DETOUR_t0d4y}</code></p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/Reverse/">Reverse</category>
      
      <category domain="https://horizonchaser.github.io/tags/Android/">Android</category>
      
      
      <comments>https://horizonchaser.github.io/2021/01/27/Strong-Reversers/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MoeCTF 2020 Write Up for RxEncode</title>
      <link>https://horizonchaser.github.io/2020/10/16/MoeCTF-2020-Write-Up-for-RxEncode/</link>
      <guid>https://horizonchaser.github.io/2020/10/16/MoeCTF-2020-Write-Up-for-RxEncode/</guid>
      <pubDate>Fri, 16 Oct 2020 19:32:50 GMT</pubDate>
      
      <description>RxEncode 的 Writeup</description>
      
      
      
      <content:encoded><![CDATA[<h3 id="rxencode-题解"><a class="markdownIt-Anchor" href="#rxencode-题解"></a> RxEncode 题解</h3><p>这道题当时没有做出来 <s>, 然后就变成了面试作业</s></p><p>使用IDA反汇编, 观察main函数, 发现程序将输入的内容作为RxEncode函数的参数, 再将返回值s1同s2进行比较确定flag正确与否.</p><p>双击RxEncode并反汇编, 得伪代码如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>__fastcall <span class="token function">RxEncode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">void</span> <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">void</span> <span class="token operator">*</span>Dst<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-58h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-50h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-48h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+3Ch] [rbp-44h]</span>  _BYTE <span class="token operator">*</span>v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-40h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-38h]</span>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+4Ch] [rbp-34h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+70h] [rbp-10h]</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+78h] [rbp-8h]</span>  v14 <span class="token operator">=</span> a1<span class="token punctuation">;</span>  v15 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v2 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v3 <span class="token operator">=</span> a2 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    v2 <span class="token operator">=</span> v3<span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v2 <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    v12 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v12 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Dst <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v13<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> Dst <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>Dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v13<span class="token punctuation">)</span><span class="token punctuation">;</span>    v11 <span class="token operator">=</span> Dst<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v9 <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v7 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">find_pos</span><span class="token punctuation">(</span>v14<span class="token punctuation">[</span>v10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v9<span class="token punctuation">;</span>        <span class="token operator">++</span>v10<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      v8 <span class="token operator">=</span> v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> v9<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        <span class="token operator">*</span>v11<span class="token operator">++</span> <span class="token operator">=</span> v8 <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> Dst<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No enough memory.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到 ‘=’ 的ASCII码是61, 结合面试时的提示**"将flag进行**(类似)<strong>base64解码"</strong>, 仔细分析RxEncode的逻辑后, 得出这个函数的作用就是将内容进行类似base64的解码.</p><p>由此我们得出, s2保存的应当就是解码后的flag内容, 将变量的值转为16进制后结果如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">  <span class="token keyword">char</span> s2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-60h]</span> __int64 v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+18h] [rbp-58h]</span> __int64 v16<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-50h]</span><span class="token comment">/*....................................  其他内容  .....................................*/</span> <span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token number">0x4AD158FEB59C879ALL</span><span class="token punctuation">;</span> v15 <span class="token operator">=</span> <span class="token number">0xCBEBFDFA6CED0BFELL</span><span class="token punctuation">;</span> v16 <span class="token operator">=</span> <span class="token number">0x7A47A38E43A334E8LL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合s2 v15 v16在main的栈帧中相邻存放这一点, 我们推测s2实际的长度应当不止为8, 而是24.</p><p>事实上, 我认为v15 v16的__int64类型也是IDA的推测(它并不确定真实类型是什么) - 因为在栈帧中将s2的类型由默认的char []改为char [24]后, 三个变量变成了这样.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> <span class="token number">0x4AD158FEB59C879ALL</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v15 <span class="token operator">=</span> <span class="token number">0xCBEBFDFA6CED0BFELL</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v16 <span class="token operator">=</span> <span class="token number">0x7A47A38E43A334E8LL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>考虑到x86的小端序, 实际的字节顺序应当是 <code>9A 87 9C B5 FE 58</code>这样. 获得解码的flag后, 尝试进行base64编码.</p><p>考虑到flag中含有标准编码表不包含的<code>{ }</code>, 因此我们可以认为这个表不同于标准的编码表.</p><p>观察发现, RxEncode中调用了一个名为find_pos的函数, 它的作用应当是在编码表中查找字符的位置, 进入该函数, 得到编码表<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234{}789+/=</code>.</p><p>对先前得到的字节按照编码表进行编码, 可以得到flag<code>moectf{Y0Ur+C+1s+v3ry+g0o0OOo0d}</code>.</p><p><s>No my C is very poooooooor /(ㄒoㄒ)/</s>~~</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/MoeCTF/">MoeCTF</category>
      
      <category domain="https://horizonchaser.github.io/tags/Reverse/">Reverse</category>
      
      
      <comments>https://horizonchaser.github.io/2020/10/16/MoeCTF-2020-Write-Up-for-RxEncode/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MoeCTF 2020 Write Up</title>
      <link>https://horizonchaser.github.io/2020/10/16/MoeCTF%202020%20WriteUp/</link>
      <guid>https://horizonchaser.github.io/2020/10/16/MoeCTF%202020%20WriteUp/</guid>
      <pubDate>Fri, 16 Oct 2020 17:28:59 GMT</pubDate>
      
      <description>2020 MoeCTF 的部分 Writeup</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="moectf-2020-write-up"><a class="markdownIt-Anchor" href="#moectf-2020-write-up"></a> MoeCTF 2020 Write Up</h1><p><em><strong>By Horizon Chaser, aka. Horizon</strong></em></p><p>第一次参加CTF, 现学现用, 会做的题实在有限😂, 先把自己会的或者有思路的部分题写下来, 以供参考</p><p><s>其他不会的题就等各位巨佬的Write Up辽</s></p><p><s>龟速</s>更新记录</p><ul><li>10.14 Misc + Reverse.Rxencode</li><li>10.16 Reverse</li><li>10.18 Algorithm + Classical Crypto</li></ul><h2 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h2><p>Misc, 全程Miscellaneous, 本意是"杂项". 在CTF中大概是指多个领域 <s>脑洞</s> 的混合. 因此做起来还是很有意思的.</p><h3 id="welcome"><a class="markdownIt-Anchor" href="#welcome"></a> Welcome</h3><p>Misc入门题, 附件profession.jpg. 打开, 发现是专业团队, 仔细一看右下角有黑白色块, 觉得可能是在jpg文件末端添加了内容.</p><p>使用binwalk分析, 未发现隐写的文件, 有点疑惑.</p><p>使用16进制编辑器打开, 发现flag就在末尾😂</p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/image-20201012183142831.png" alt="welcome"></p><h3 id="hey-fxck-you"><a class="markdownIt-Anchor" href="#hey-fxck-you"></a> hey fxck you!</h3><p>附件good_morning_my_neighbors.png, 表达了诚挚的问候(大雾)</p><p>除了最下方被裁剪了, 图片没有发现什么问题, 使用binwalk分析, 发现末尾有一个zip文件, 解压得fk u.txt, 内容如下</p><blockquote><p><ins><ins><ins><ins>[&gt;&gt;</ins>&gt;</ins></ins>&gt;</ins><ins><ins>&gt;</ins></ins><ins><ins>&gt;</ins></ins><ins><ins><ins>&gt;</ins></ins></ins><ins><ins><ins>&gt;</ins></ins></ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins><ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins></ins><ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins></ins><ins><ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins></ins></ins><ins><ins><ins><ins><ins><ins><ins>&gt;</ins></ins></ins></ins></ins></ins></ins><ins><ins><ins><ins><ins><ins><ins><ins>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;—.</ins>.&lt;</ins></ins>+.–.&gt;</ins></ins>+.&lt;</ins>+.&gt;&gt;-----.–.&lt;&lt;-.&gt;-.&lt;&lt;&lt;&lt;&lt;+.&gt;&gt;&gt;&gt;&gt;&gt;.&lt;&lt;.&gt;.&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;+.</ins></ins>+.------------.&lt;+<ins><ins>.&gt;.&lt;&lt;&lt;</ins>.&lt;.&gt;&gt;&gt;&gt;&gt;&gt;</ins>++.</p></blockquote><p>搜索, 得知这是BrainFuck语言, 解密得到flag <code>moectf{yes!yes!fk_U_2!}</code></p><p><s>这是对此前问候的友好回应(确信)</s></p><h3 id="base64"><a class="markdownIt-Anchor" href="#base64"></a> base64？¿</h3><p>题面是一个以等号结尾的字符串  <code>0H9MJjCNPiMgJHMQJNtfyEJgIjtS1Ig=</code>, 结合名称, 确定是base64编码的文本.</p><p>按照标准的字符表无法解密, 查看hint, 得到字符表为<code>vwxrstuopq34567ABCDEFGHIJyz012PQRSTKLMNOZabcdUVWXYefghijklmn89+/</code>, 按照这个字符表解码, 得到flag<code>moectf{itai_base64_qaq}</code></p><h3 id="a3fxck"><a class="markdownIt-Anchor" href="#a3fxck"></a> A3FXCK</h3><p><s>所以a3又干啥了这是</s></p><p>题面是一个jpg, binwalk分析, 得到隐藏的A3FXCK.txt, 打开, 发现内容可被拆分为两类: <code>luoqXan</code>与<code>arttnbaX</code>, X为1~6的正整数.</p><p>结合首行的<code>123456[]()+!</code>, 推测1~6的值分别代表<code>[]()+!</code>, 替换后得到一坨奇怪的东西, 尝试按照JavaScript运行后得到flag <code>moectf{J5Fxck_1s_1nt3res7in9!}</code></p><p>新知识: <a href="https://github.com/aemkei/jsfuck">JSFuck</a>是将(小段的)JS代码加密为仅包含<code>[]()+!</code>的文本, 但是会造成严重的体积膨胀. 所以替换后得到的那一坨解密之后也只是一行<code>alert('moectf{J5Fxck_1s_1nt3res7in9!}'</code></p><p><s>由此得知, JS确实是最强大的编程语言</s></p><h2 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h2><h3 id="welcome-to-re"><a class="markdownIt-Anchor" href="#welcome-to-re"></a> Welcome To Re!</h3><p>签到题, 也是第一道我做出来的逆向的题😂</p><p>下载附件, 打开, 按照入门指南和Hint提示, 使用IDA64分析SignIn.exe, 在左侧定位main函数, 双击跳转到对应位置, 按下F5反汇编, 得到伪代码如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> Str1<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp-60h]</span>  <span class="token keyword">char</span> Str2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+50h] [rbp-30h]</span>  <span class="token function">_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>Str2<span class="token punctuation">,</span> <span class="token string">"moectf{W3lc0me-T0_th3-W0rld_Of_R3v3rsE!}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Welcome to MoeCTF! --by Reverier\nPlease Input your flag and I will check it:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%41s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Str1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Str1<span class="token punctuation">,</span> Str2<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulations!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Ruaaaaaaaaaaaaa~~~Wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在main函数中, 首先将flag内容复制到str2中, 然后输出提示信息并将输入保存到Str1中. 之后通过strcmp比较输入的Str2与保存的Str1的值是否一致. 由此我们得出, Str2的值就是flag<code>moectf{W3lc0me-T0_th3-W0rld_Of_R3v3rsE!}</code>. <s>虽然说是显然的, 但是该分析还是要分析的</s></p><p>总之, Welcome to the World of Reverse 🍻!</p><h3 id="rxencode"><a class="markdownIt-Anchor" href="#rxencode"></a> RxEncode</h3><p>这道题当时没有做出来 <s>, 然后就变成了面试作业</s></p><p>使用IDA反汇编, 观察main函数, 发现程序将输入的内容作为RxEncode函数的参数, 再将返回值s1同s2进行比较确定flag正确与否.</p><p>双击RxEncode并反汇编, 得伪代码如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span>__fastcall <span class="token function">RxEncode</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> v2<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">void</span> <span class="token operator">*</span>result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">void</span> <span class="token operator">*</span>Dst<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp-58h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp-50h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp-4Ch]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-48h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+3Ch] [rbp-44h]</span>  _BYTE <span class="token operator">*</span>v11<span class="token punctuation">;</span> <span class="token comment">// [rsp+40h] [rbp-40h]</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp-38h]</span>  <span class="token keyword">int</span> v13<span class="token punctuation">;</span> <span class="token comment">// [rsp+4Ch] [rbp-34h]</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>v14<span class="token punctuation">;</span> <span class="token comment">// [rsp+70h] [rbp-10h]</span>  <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// [rsp+78h] [rbp-8h]</span>  v14 <span class="token operator">=</span> a1<span class="token punctuation">;</span>  v15 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v2 <span class="token operator">=</span> a2<span class="token punctuation">;</span>  v3 <span class="token operator">=</span> a2 <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v2 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    v2 <span class="token operator">=</span> v3<span class="token punctuation">;</span>  v13 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v2 <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v10 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    v12 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a1<span class="token punctuation">[</span>v15 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">61</span> <span class="token punctuation">)</span>    <span class="token operator">++</span>v12<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v12 <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v13 <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>v12 <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    v13 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Dst <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v13<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> Dst <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>Dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v13<span class="token punctuation">)</span><span class="token punctuation">;</span>    v11 <span class="token operator">=</span> Dst<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      v9 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      v7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v9 <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> v15 <span class="token operator">-</span> v12 <span class="token operator">&gt;</span> v10 <span class="token punctuation">)</span>      <span class="token punctuation">{</span>        v7 <span class="token operator">=</span> <span class="token punctuation">(</span>v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">find_pos</span><span class="token punctuation">(</span>v14<span class="token punctuation">[</span>v10<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>v9<span class="token punctuation">;</span>        <span class="token operator">++</span>v10<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      v8 <span class="token operator">=</span> v7 <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> v9<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        <span class="token operator">*</span>v11<span class="token operator">++</span> <span class="token operator">=</span> v8 <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>v11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> Dst<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No enough memory.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到 ‘=’ 的ASCII码是61, 结合面试时的提示**"将flag进行**(类似)<strong>base64解码"</strong>, 仔细分析RxEncode的逻辑后, 得出这个函数的作用就是将内容进行类似base64的解码.</p><p>由此我们得出, s2保存的应当就是解码后的flag内容, 将变量的值转为16进制后结果如下.</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">  char s2[8]; // [rsp+10h] [rbp-60h] __int64 v15; // [rsp+18h] [rbp-58h] __int64 v16; // [rsp+20h] [rbp-50h]/*....................................  其他内容  .....................................*/ *(_QWORD *)s2 = 0x4AD158FEB59C879ALL; v15 = 0xCBEBFDFA6CED0BFELL; v16 = 0x7A47A38E43A334E8LL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合s2 v15 v16在main的栈帧中相邻存放这一点, 我们推测s2实际的长度应当不止为8, 而是24.</p><p>事实上, 我认为v15 v16的__int64类型也是IDA的推测(它并不确定真实类型是什么) - 因为在栈帧中将s2的类型由默认的char []改为char [24]后, 三个变量变成了这样.</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">*(_QWORD *)s2 = 0x4AD158FEB59C879ALL;*(_QWORD *)v15 = 0xCBEBFDFA6CED0BFELL;*(_QWORD *)v16 = 0x7A47A38E43A334E8LL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>考虑到x86的小端序, 实际的字节顺序应当是 <code>9A 87 9C B5 FE 58</code>这样. 获得解码的flag后, 尝试进行base64编码.</p><p>考虑到flag中含有标准编码表不包含的<code>{ }</code>, 因此我们可以认为这个表不同于标准的编码表.</p><p>观察发现, RxEncode中调用了一个名为find_pos的函数, 它的作用应当是在编码表中查找字符的位置, 进入该函数, 得到编码表<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234{}789+/=</code>.</p><p>对先前得到的字节按照编码表进行编码, 可以得到flag<code>moectf{Y0Ur+C+1s+v3ry+g0o0OOo0d}</code>.</p><p><s>No my C is very poooooooor /(ㄒoㄒ)/</s>~~</p><h4 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h4><p>在分析时我不小心改错了s2的类型, 却又改不回去, 而IDA本身又不支持撤销…<br>当时我通过菜单栏的New Instance新打开了一个IDA实例重新分析, 得到的main函数中解码后的flag的相关内容变成了这样, 栈帧也发生了相应的改变…</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Str2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">;</span>v11 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">101</span><span class="token punctuation">;</span>v12 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>v13 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">75</span><span class="token punctuation">;</span>v14 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>v15 <span class="token operator">=</span> <span class="token number">112</span><span class="token punctuation">;</span>v16 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">;</span>v17 <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>v18 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">78</span><span class="token punctuation">;</span>v19 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">47</span><span class="token punctuation">;</span>v20 <span class="token operator">=</span> <span class="token number">79</span><span class="token punctuation">;</span>v21 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>v22 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>v23 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>v24 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">85</span><span class="token punctuation">;</span>v25 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">34</span><span class="token punctuation">;</span>v26 <span class="token operator">=</span> <span class="token number">89</span><span class="token punctuation">;</span>v27 <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>v28 <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>v29 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">;</span>v30 <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>v31 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">;</span>v32 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">51</span><span class="token punctuation">;</span>v33 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span>v34 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>v35 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v36 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v37 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v38 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v39 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v40 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v41 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>v42 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过除此之外整体的结构并未发生过多改变, 其余内容一样.</p><h3 id="simple-re"><a class="markdownIt-Anchor" href="#simple-re"></a> Simple Re</h3><p>下载解压, 拖入IDA中反汇编, 得到伪代码. 观察发现, main中会将输入的字符串作为参数调用enc()函数.</p><p>双击跳转进该函数, 反汇编后得到伪代码如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __fastcall <span class="token function">enc</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>      <span class="token comment">/*  ............  循环用变量定义  ............  */</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x17</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x39u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x4Bu</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>l <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x4Au</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>m <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x49u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>n <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x26u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> ii <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ii <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>ii <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>ii<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x15u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> jj <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> jj <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>jj <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>jj<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x61u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> kk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> kk <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>kk <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x56u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> ll <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ll <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>ll <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>ll<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x1Bu</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> mm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mm <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>mm <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>mm<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x21u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> nn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> nn <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>nn <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>nn<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x40u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i1 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i1 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x57u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i2 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i2 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x2Eu</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i3 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i3 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i3<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x49u</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i4 <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span> <span class="token operator">++</span>i4 <span class="token punctuation">)</span>    out<span class="token punctuation">[</span>i4<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0x37u</span><span class="token punctuation">;</span>  byte_40807F <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> aim<span class="token punctuation">)</span> <span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Congratulations!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    result <span class="token operator">=</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"no...Don't Give up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到, 它是将输入依次对 0x17 0x39 0x4A … 0x37 进行异或, 然后将运算结果out与aim进行比较. 双击aim变量名, 跳转到栈帧中, 得到aim的值<code>rpz|kydKw^qTl@Y/m2f/J-@o^k.,qkb</code>.</p><p>由 <code>a^b^b == a</code>, 不难发现将aim依次同 0x37 0x49 … 0x39 0x17 进行异或即可得到flag<code>moectf{ThAnKs_F0r-y0U2_pAt13nt}</code></p><p><s>是挺需要耐心的…</s></p><h3 id="protection"><a class="markdownIt-Anchor" href="#protection"></a> Protection</h3><p>下载文件, 根据提示, 程序应该是加了个壳… 检测一下, 是一个UPX的壳, 根据 <a href="https://linux.die.net/man/1/upx">UPX的文档</a>, 我们可以使用<code>-d</code>选项解压缩.</p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/image-20201017215239958.png" alt="image-20201017215239958"></p><p>去掉UPX壳之后, 又到了IDA大显神通的时间了. 我们得到main函数的伪代码如下.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">signed</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+Ch] [rbp-34h]</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+10h] [rbp-30h]</span>  <span class="token keyword">unsigned</span> __int64 v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+38h] [rbp-8h]</span>  v6 <span class="token operator">=</span> <span class="token function">__readfsqword</span><span class="token punctuation">(</span><span class="token number">0x28u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token string">"please input your flag: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">_isoc99_scanf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int64<span class="token punctuation">)</span><span class="token string">"%28s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">27</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span>v5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"wrong!"</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"right!"</span><span class="token punctuation">,</span> v5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不难看出, 这里是将输入和 x 进行逐个字符异或后再同 y 比较. 用同样的方法, 我们得到<code>x = aouv#@!V08asdozpnma&amp;*#%!$^&amp;*</code>, <code>y ={0x0c, 0x0, 0x10, 0x15, 0x57, 0x26, 0x5a, 0x23, 0x40, 0x40, 0x3e, 0x42, 0x37, 0x30, 0x9, 0x19, 0x3, 0x1d, 0x50, 0x43, 0x7, 0x57, 0x15, 0x7e, 0x51, 0x6d, 0x43, 0x57, 0, 0, 0, 0}</code>.</p><p>写个Java脚本 <s>暂时还不会py</s> 异或之后得到 flag <code>moectf{upx_1S_simp1e-t0_u3e}</code></p><p><s>UPX是挺好用的</s></p><h2 id="algorithm"><a class="markdownIt-Anchor" href="#algorithm"></a> Algorithm</h2><p>算法题, 据说在正式的CTF比赛中不会出现…</p><h3 id="mess"><a class="markdownIt-Anchor" href="#mess"></a> mess</h3><p><s>What a mess !</s></p><p>查看Python脚本, 发现是将flag转为ASCII码之后, 再向其中随机插入字母.</p><p>解法也简单, 去掉字母后将相邻的两个(或三个数字, 范围是 20~126 )转换为该ASCII码对应的字符.</p><p>flag: <code>moectf{pyth0n_1s_s0_s1mple}</code></p><h3 id="曲奇饼"><a class="markdownIt-Anchor" href="#曲奇饼"></a> 曲奇饼</h3><p>统计非重复子串的最大长度.</p><p>简单的滑动窗口即可解决, 细节参见代码.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//或者用自带的max也行</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getMaxSubStrLeng</span><span class="token punctuation">(</span>string inStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//滑动窗口, 应该很直观</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> currBegin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> currEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> inStr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string currContent <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currBegin <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> currEnd <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currContent<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>inStr<span class="token punctuation">[</span>currEnd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> currContent<span class="token punctuation">.</span>npos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currContent<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>currContent<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inStr<span class="token punctuation">[</span>currEnd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currEnd<span class="token operator">++</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> currEnd <span class="token operator">-</span> currBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//更新最大值</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//cout &lt;&lt; currContent.find(inStr[currBegin]) &lt;&lt; endl;</span>            currContent<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>currContent<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>inStr<span class="token punctuation">[</span>currBegin<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currBegin<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//遇到重复则逐渐从左端删除currContent中的字符,</span>            <span class="token comment">//直到不再有字符和inStr[currEnd]重复</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//cout &lt;&lt; currContent &lt;&lt; endl;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string inStr<span class="token punctuation">;</span>    <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> inStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">getMaxSubStrLeng</span><span class="token punctuation">(</span>inStr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="frank-赤道企鹅-永远的神"><a class="markdownIt-Anchor" href="#frank-赤道企鹅-永远的神"></a> Frank &amp; 赤道企鹅, 永远的神</h3><p>这两道题解法相似, 都是统计文件内容, 可参见repo中对应的FrankCounter.java 与EquatorCounter.java</p><p>其余略😜</p><h2 id="classic-crypto"><a class="markdownIt-Anchor" href="#classic-crypto"></a> Classic Crypto</h2><blockquote><p>“古典密码在现代的CTF比赛中已经很少出现”    – FAQ</p></blockquote><h3 id="大帝的征程-1-2"><a class="markdownIt-Anchor" href="#大帝的征程-1-2"></a> 大帝的征程 #1 &amp; #2</h3><p>凯撒密码是一种经典的移位密码, 由flag格式, 得前六个字符为<code>moectf</code>, 然后在此基础上计算密文相对于已知明文的偏移量即可</p><p><s>已知明文攻击 (大概)</s></p><h3 id="大帝的征程-3"><a class="markdownIt-Anchor" href="#大帝的征程-3"></a> 大帝的征程 #3</h3><p>由上述经验, 我们推测偏移量应该为 +47(注意由于ASCII码的范围为0~127, 我们需要对127取余作为结果), 写个java脚本解密, 我们得到了<code>moectf{cnquer_th_X#S$"}</code>…</p><p>看起来大部分是正确的, 只是有一些字符没有正确的解出来. 结合之前的经验, 我们推测<code>cnquer</code> 应该是<code>c0nquer</code>, <code>th</code>应该是<code>th3</code>. 计算可得这时的偏移量是-47, 再计算一次, 我们得到了全部明文: flag <code>moectf{c0nquer_th3_XDSEC}</code></p><p><s>I’m afraid I’m too vegetable to do that 😭</s></p><h3 id="大帝的征程-维吉尼亚-维吉尼亚ex"><a class="markdownIt-Anchor" href="#大帝的征程-维吉尼亚-维吉尼亚ex"></a> 大帝的征程 维吉尼亚 &amp; 维吉尼亚Ex</h3><h4 id="背景知识-维吉尼亚密码"><a class="markdownIt-Anchor" href="#背景知识-维吉尼亚密码"></a> 背景知识: 维吉尼亚密码</h4><p>维吉尼亚密码由凯撒密码扩展而来，引入了密钥的概念。即根据密钥来决定用哪一行的密表(或者你也可以理解成偏移量…)来进行替换，以此来对抗字频统计。</p><p>也就是说, 实际上, 维吉尼亚分解之后还是相当于多个凯撒密码的组合…</p><p>那现在(至少相邻字符的)偏移量不再固定, 我们应该怎么做呢…?</p><h4 id="friedman测试法确定密钥长度"><a class="markdownIt-Anchor" href="#friedman测试法确定密钥长度"></a> Friedman测试法确定密钥长度</h4><p>我们知道, 不同字母在同一文本的出现概率并不相同(至少对于包括英文在内的大多数语言如此). 那么, 我们可以定义一个叫做"重合指数"的量, 来量化两个串之间的对应程度.</p><p>设x=x1x2…xn是一条n个字母的串，x的重合指数记为CI，定义为x中两个随机元素相同的概率。</p><p>而通过对大量的英文文本进行统计, 我们得到每个字母的出现概率如下.</p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/b91e4e49c93c2db554922f8ecb22f56a_thumb.png" alt="【密码学】维吉尼亚密码加解密原理及其破解算法Java实现"></p><p>由此, 我们可以得到英文文本的重合指数为 <strong>0.065</strong>(我们假定明文的重合指数大致也是这个值).</p><p>结合之前的"维吉尼亚密码相当于多个凯撒密码的组合"这一特点, 我们就可以把长为n的密文先分为m组, 按照列的形式组成一个 m*(n/m)的矩阵, 然后检测每一组密文的重合指数.</p><p>如果m正好就是密钥的长度, 那么每一组的CI值应当大致也是0.065; 如果不是的话, 那么分组后的密文看起来应该很随机. 而对于一个随机串, 重合指数约为 <strong>0.038</strong>.</p><p>综上, 我们就通过Friedman测试法得到了密钥的最可能长度.</p><h4 id="字母频度分析确定密钥"><a class="markdownIt-Anchor" href="#字母频度分析确定密钥"></a> 字母频度分析确定密钥</h4><p>有了密钥长度m, 我们就可以将密文按照密钥长度分解为k = n/m组, 每一组都是凯撒密码, 然后用类似上图的字母频度分析即可解密.</p><blockquote><p>由上面的分析可知, 要破解维吉尼亚密码, 还是需要收集到大量的密文的. 不过这两道题的密文都很长, 足够破解了.</p></blockquote><h2 id="android"><a class="markdownIt-Anchor" href="#android"></a> Android</h2><p>其实Android我之前也没接触过, 这里就简单的记录一下简单的Android逆向过程吧.</p><p><s>“你之前到底接触过啥??” “啥也没接触过…”</s></p><p><img src="/2020/10/16/MoeCTF%202020%20WriteUp/5442499-52cadc4569714633.png" alt="img"></p><p>借一张图(来自<a href="https://www.jianshu.com/p/d29c37dda256">这里</a>)说明apk的打包过程.</p><p>我们看到, java文件在编译后会生成class文件, 然后与其他第三方的class文件与library一起组成dex文件, 然后再经过一些处理, zip压缩, 签名, 对齐后就是我们看到的apk文件了.</p><p>所以, 我们可以直接将apk按照zip解压, 然后获得dex文件. 不过dex是Android的Dalvik虚拟机专用的字节码文件, 我们得把它转成标准的java虚拟机的class文件.</p><p>幸运的是, 已经有大佬实现了相关的工具: <a href="https://github.com/pxb1988/dex2jar">dex2jar</a>. 获得jar/class文件后, 我们可以使用<a href="https://github.com/java-decompiler/jd-gui">jd-gui</a>反编译class文件, 得到源码.</p><h3 id="baby-android"><a class="markdownIt-Anchor" href="#baby-android"></a> Baby Android</h3><p>(稍后再更…)</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/Misc/">Misc</category>
      
      <category domain="https://horizonchaser.github.io/tags/MoeCTF/">MoeCTF</category>
      
      <category domain="https://horizonchaser.github.io/tags/Reverse/">Reverse</category>
      
      <category domain="https://horizonchaser.github.io/tags/Algorithm/">Algorithm</category>
      
      <category domain="https://horizonchaser.github.io/tags/Classical-Crypto/">Classical Crypto</category>
      
      <category domain="https://horizonchaser.github.io/tags/Android/">Android</category>
      
      
      <comments>https://horizonchaser.github.io/2020/10/16/MoeCTF%202020%20WriteUp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>About Horizon Blog</title>
      <link>https://horizonchaser.github.io/2020/10/15/The-Beginning-of-Everything/</link>
      <guid>https://horizonchaser.github.io/2020/10/15/The-Beginning-of-Everything/</guid>
      <pubDate>Thu, 15 Oct 2020 21:52:08 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;the-beginning-of-everything&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#the-beginning-of-everything&quot;&gt;&lt;/a&gt; The Beginning of</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="the-beginning-of-everything"><a class="markdownIt-Anchor" href="#the-beginning-of-everything"></a> The Beginning of Everything</h2><p>其实很早之前就想在 Github Pages 上搭一个个人博客了, CSDN 总是让人很难受</p><p><s>但是拖延症晚期的我现在才搭完hhh</s></p><p>言归正传, 基于 Hexo 和 Travis CI 的 Pages 并不难部署, 只是基于 YMAL 的主题配置写起来有点麻烦, 向 Markdown 中插入图片也是一件麻烦事儿…</p><p>博客在 <a href="https://horizonchaser.gitee.io/">Gitee Pages</a> 上有一份镜像, <s>不过在我搞定 Github 的 workflow 之前, Gitee 的更新可能不是很及时😂</s>已经搞定了🍻</p><p>就这样吧, 欢迎大家来玩儿~</p><h2 id="known-issue"><a class="markdownIt-Anchor" href="#known-issue"></a> Known Issue</h2><ul><li>[ ] Gitalk 由于 Github 的 CORS 限制无法使用</li></ul><h2 id="develop-plan"><a class="markdownIt-Anchor" href="#develop-plan"></a> Develop Plan</h2><p>开发计划 <s>挖坑计划</s></p><ul><li>[ ] 添加一个 Live2D 看板娘</li><li>[ ] 魔改一下 <code>hexo-bilibili-bangumi</code>, 加个进度显示</li><li>[ ] 加个音乐播放器</li><li>[ ] 把 RSS 订阅显示的更新日期改成文章的更新日期</li><li>[ ] 整个随机 Banner</li></ul><h2 id="更新日志"><a class="markdownIt-Anchor" href="#更新日志"></a> 更新日志</h2><h3 id="update-20201015"><a class="markdownIt-Anchor" href="#update-20201015"></a> Update 2020/10/15</h3><p>Horizon Blog 搭起来了! 👏👏👏</p><h3 id="update-20210131"><a class="markdownIt-Anchor" href="#update-20210131"></a> Update 2021/01/31</h3><p>把博客的 CI 从 Travis 迁移到 Github Actions 上了, 前者太慢了, 排队能排半个小时…</p><h3 id="update-20210205"><a class="markdownIt-Anchor" href="#update-20210205"></a> Update 2021/02/05</h3><p>从 <a href="https://www.bfcounter.vip/">蝴蝶计数器</a> 拿到了一个统计的小工具, 放到这里</p><p><s>看起来并没有多少人看…</s></p><h3 id="update-20210614"><a class="markdownIt-Anchor" href="#update-20210614"></a> Update 2021/06/14</h3><p>把 hexo 升级到了 hexo 5, 主题和其他依赖包也一并升级了下</p><p>为了<s>更好看地</s>用 LaTex 写公式, 把渲染器换成了 <code>hexo-renderer-markdown-it-plus</code>, 并用 <code>katex</code> 作为解析器</p><h3 id="update-20210615"><a class="markdownIt-Anchor" href="#update-20210615"></a> Update 2021/06/15</h3><p>增加了 RSS 订阅支持</p><h3 id="update-20210831"><a class="markdownIt-Anchor" href="#update-20210831"></a> Update 2021/08/31</h3><p>修好了 RSS 订阅地址, 原来一直是 <a href="example.com">example.com</a>, 还在想为啥, 原来是因为 <code>_config.yml</code> 里面的地址忘改了…</p>]]></content:encoded>
      
      
      
      <category domain="https://horizonchaser.github.io/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
      
      <category domain="https://horizonchaser.github.io/tags/Develop/">Develop</category>
      
      
      <comments>https://horizonchaser.github.io/2020/10/15/The-Beginning-of-Everything/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
